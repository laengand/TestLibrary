namespace InstrumentDrivers
{
    using System;
    using System.Runtime.InteropServices;


    public class rsupv : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~rsupv() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public rsupv(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.
        /// 
        /// - Performs an identification query on the Instrument.
        /// 
        /// - Resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.
        /// 
        /// - Each time this function is invoked a Unique Session is opened.  It is possible to have more than one session open for the same resource.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// This control specifies the interface and address of the device that is to be initialized (Instrument Descriptor). The exact grammar to be used in this control is shown in the note below. 
        /// 
        /// Default Value:  "GPIB::20"
        /// 
        /// Notes:
        /// 
        /// (1) Based on the Instrument Descriptor, this operation establishes a communication session with a device.  The grammar for the Instrument Descriptor is shown below.  Optional parameters are shown in square brackets ([]).
        /// 
        /// Interface   Grammar
        /// ------------------------------------------------------
        /// GPIB        GPIB[board]::primary address[::secondary address]
        ///             [::INSTR]
        /// VXI-11      TCPIP::remote_host::INSTR 
        /// USB         USB::&lt;vendor Id&gt;::&lt;product Id&gt;::&lt;serial number&gt; 
        ///             
        /// The GPIB keyword is used for GPIB interface.
        /// The TCPIP keyword is used for VXI-11 interface.
        /// The USB keyword is used for USB interface, where       
        /// &lt;vendor Id&gt;     is 0x0AAD for Rohde&amp;Schwarz
        /// &lt;product Id&gt;    is 0x004D for UPV
        /// &lt;serial number&gt; is Serial number (on the rear panel of
        /// the instrument). For example 100001. 
        /// 
        /// Examples:
        /// (1) GPIB   - "GPIB::20"
        /// (2) VXI-11 - "TCPIP::192.168.1.33::INSTR"
        /// (3) USB    - "USB::0x0AAD::0x004D::100001::INSTR"
        /// 
        /// The default value for optional parameters are shown below.
        /// 
        /// Optional Parameter          Default Value
        /// -----------------------------------------
        /// board                       0
        /// secondary address           none - 31
        /// </param>
        /// <param name="ID_Query">
        /// This control specifies if an ID Query is sent to the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Skip Query
        /// VI_TRUE  (1) - Do Query (Default Value)
        /// 
        /// Notes:
        ///    
        /// (1) Under normal circumstances the ID Query ensures that the instrument initialized is the type supported by this driver. However circumstances may arise where it is undesirable to send an ID Query to the instrument.  In those cases; set this control to "Skip Query" and this function will initialize the selected interface, without doing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Don't Reset
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want the instrument reset. Set this control to "Don't Reset" while initializing the instrument.
        /// </param>
        public rsupv(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// This function sets the state of generator output.
        /// 
        /// Remote-control command(s):
        /// OUTPut ON | OFF
        /// </summary>
        /// <param name="State">
        /// This control sets the state of generator output.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorOutputState(bool State)
        {
            int pInvokeResult = PInvoke.SetGeneratorOutputState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of generator output.
        /// 
        /// Remote-control command(s):
        /// OUTPut?
        /// </summary>
        /// <param name="State">
        /// This control returns the state of generator output.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorOutputState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorOutputState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the generator (analog, digital, I2S Board, Impairment).
        /// 
        /// Note(s):
        /// 
        /// (1) The I2S Board is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) Impairment is not available in UPP.
        /// 
        /// (3) HDMI is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// INSTrument[1][:SELect] ANLG | DIG | I2SBoard | IMPairment | U2Channel | HDMI
        /// </summary>
        /// <param name="Instrument">
        /// This control selects generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_ANALOG        (0) - Analog
        /// RSUPV_GEN_DIGITAL_AUDIO (1) - Digital Audio
        /// RSUPV_GEN_I2S           (2) - I2S Board
        /// RSUPV_GEN_IMPAIRMENT    (3) - Impairment
        /// RSUPV_GEN_U2C           (4) - USI Dual Chan
        /// RSUPV_GEN_HDMI          (5) - HDMI
        /// 
        /// Default Value: RSUPV_GEN_ANALOG (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorInstrument(int Instrument)
        {
            int pInvokeResult = PInvoke.SetGeneratorInstrument(this._handle, Instrument);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries selected generator instrument (analog, digital, I2S Board, Impairment).
        /// 
        /// Remote-control command(s):
        /// INSTrument[1][:SELect]?
        /// </summary>
        /// <param name="Instrument">
        /// This control returns selected generator instrument.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_ANALOG        (0) - Analog
        /// RSUPV_GEN_DIGITAL_AUDIO (1) - Digital Audio
        /// RSUPV_GEN_I2S           (2) - I2S Board
        /// RSUPV_GEN_IMPAIRMENT    (3) - Impairment
        /// RSUPV_GEN_U2C           (4) - USI Dual ChanRSUPV_GEN_HDMI          (5) - HDMI
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorInstrument(out int Instrument)
        {
            int pInvokeResult = PInvoke.GetGeneratorInstrument(this._handle, out Instrument);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures analog generator.
        /// 
        /// Note(s):
        /// 
        /// (1) Features 'Common' and 'Impedance' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CHANnel OFF | CH1 | CH2 | CH2Is1 | CH2Phase180
        /// OUTPut:TYPE UNBalanced | BALanced | CTESt
        /// OUTPut:IMPedance R10 | R200 | R600
        /// OUTPut:LOW FLOat | GROund
        /// OUTPut:BANDwidth:MODE B22 | B40 | B80 | AUTO
        /// SOURce:VOLTage:RANGe AUTO | FIX
        /// SOURce:VOLTage:MAXimum
        /// </summary>
        /// <param name="Channel">
        /// This control selects the signal-carrying XLR plugs.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// RSUPV_GEN_CH_2_180 (4) - 2 (phase 180)
        /// 
        /// Default Value: RSUPV_GEN_CH_1 (1)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) OFF: Both XLR plugs are deactivated.
        /// 
        /// (2) 1: XLR plug 1 supplies the generator signal; XLR plug 2 is
        /// deactivated.
        /// 
        /// (3) 2: XLR plug 2 supplies the generator signal; XLR plug 1 is
        /// deactivated.
        /// 
        /// (4) 2=1: Both XLR plugs supply an output signal.
        /// If the generator function "Stereo Sine" is selected (R&amp;S UPV-B3 option is required for this), the level and frequency can be different for each channel of the output signal.
        /// 
        /// </param>
        /// <param name="Output_Type">
        /// This control selects output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_UNBAL (0) - Unbal
        /// RSUPV_GEN_OUTPUT_BAL   (1) - Bal
        /// RSUPV_GEN_OUTPUT_CTEST (2) - Com Mode Test
        /// 
        /// Default Value: RSUPV_GEN_OUTPUT_BAL (1)
        /// 
        /// Notes:
        /// 
        /// (1) Unbal: The RMS of the generator signal can be max. 10 V. The output impedance is 5 ohms. If commercially available BNC cables are to be used, it is recommended to use an XLR/BNC adapter R&amp;S UPL-Z1.
        /// 
        /// (2) Bal: The RMS of the generator signal can be max. 20 V. The user can choose between three different output impedance values.
        /// 
        /// (3) Com Mode Test: Identical output signals are present at pins 2 and 3 of the XLR connectors. The signal lines are referenced to the generator ground. The output impedance is made up of two identical resistances in the two signal lines. This generator output configuration is suitable for measuring the common-mode rejection of balanced DUTs.
        /// </param>
        /// <param name="Impedance">
        /// This control selects output impedance.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_IMPEDANCE_10  (0) -  10 Ohm
        /// RSUPV_GEN_IMPEDANCE_200 (1) - 200 Ohm
        /// RSUPV_GEN_IMPEDANCE_600 (2) - 600 Ohm
        /// RSUPV_GEN_IMPEDANCE_25  (3) -  25 Ohm 
        /// 
        /// Default Value: RSUPV_GEN_IMPEDANCE_R10 (0)
        /// 
        /// Notes:
        /// 
        /// (0) 10 Ohm: The output impedance is 10 ohm.
        /// 
        /// (1) 200 Ohm: The output impedance is 200 ohm. If the R&amp;S UPV-U1 option is installed, the output impedance is 150 ohm. After the R&amp;S UPV-U1 option has been installed, the R&amp;S UPV must be informed of this via the diagnostics panel so that "150 ohm." is then displayed in the selection box. The installation instructions supplied with the option explain which entries are required for this.
        /// 
        /// (2) 600 Ohm: The output impedance is 600 ohm.
        /// 
        /// (3) 25 Ohm: The output impedance is 25 ohm (Only for UPP).
        /// 
        /// </param>
        /// <param name="Common">
        /// This control selects output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_COMM_FLOAT (0) - Float
        /// RSUPV_GEN_OUTPUT_COMM_GND   (1) - Ground
        /// 
        /// Default Value: RSUPV_GEN_OUTPUT_COMM_GND (1)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Float: The generator ground is not electrically connected to the instrument ground. With the default configuration
        /// "Unbal", a capacitance of approx. 25 nF is connected between the two ground connections.
        /// With "Bal", the capacitance is approx. 2 nF and is primarily determined by the layout and coupling capacitance inside the toroidal transformer which delivers the supply voltages for the generator. 
        /// 
        /// (2) Ground: The generator ground is electrically connected to the instrument ground with approx. 50 ohm.
        /// 
        /// </param>
        /// <param name="Bandwidth">
        /// This control selects frequency range.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_BWIDTH_22    (0) - 22 kHz
        /// RSUPV_GEN_BWIDTH_40    (1) - 40 kHz
        /// RSUPV_GEN_BWIDTH_80    (2) - 80 kHz
        /// RSUPV_GEN_BWIDTH_AUTO  (3) - Play Auto
        /// 
        /// Default Value: RSUPV_GEN_BWIDTH_22 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 22 kHz: The maximum output frequency is 22 kHz. The generator D/A converter is then clocked at 48 kHz.
        /// 
        /// (2) 40 kHz: The maximum output frequency is 40 kHz. The generator D/A converter is then clocked at 96 kHz.
        /// 
        /// (3) 80 kHz: The maximum output frequency is 80 kHz. The generator D/A converter is then clocked at 192 kHz.
        /// 
        /// (4) Play Auto: For the Play generator function only. The bandwidth is automatically determined as a function of the
        /// sample rate entered in the WAV file. This sample rate is likewise used for clocking the generator DAC.
        /// </param>
        /// <param name="Volt_Range">
        /// This control sets generator level control.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_VOLT_RANG_AUTO (0) - Auto
        /// RSUPV_GEN_VOLT_RANG_FIX  (1) - Fix
        /// 
        /// Default Value: RSUPV_GEN_VOLT_RANG_AUTO (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Auto: The internal signal paths are optimally driven; the
        /// output voltage is adjusted using the analog hardware.
        /// 
        /// (2) Fix: The analog hardware is permanently set to the
        /// specified maximum voltage. The actual output voltage is obtained by controlling the level of the D/A converter; the analog hardware settings remain unchanged.
        /// 
        /// This setting is ignored if the "Low-Distortion Generator" option (R&amp;S UPV-B1) is used. In this case, level control is always performed according to the Auto algorithm.
        /// 
        /// </param>
        /// <param name="Max_Voltage">
        /// This control sets maximum value for the output voltage.
        /// 
        /// Valid Range: 0.0 to 20.0 V
        /// 
        /// Default Value: 10.0 V
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Max Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorAnalog(int Channel, int Output_Type, int Impedance, int Common, int Bandwidth, int Volt_Range, double Max_Voltage, int Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorAnalog(this._handle, Channel, Output_Type, Impedance, Common, Bandwidth, Volt_Range, Max_Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the signal-carrying XLR plugs in the bottom right-hand part of the R&amp;S UPV front panel.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CHANnel OFF | CH1 | CH2 | CH2Is1
        /// </summary>
        /// <param name="Channel">
        /// This control selects the signal-carrying XLR plugs.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// 
        /// Default Value: RSUPV_GEN_CH_1 (1)
        /// 
        /// Notes:
        /// 
        /// (1) OFF: Both XLR plugs are deactivated.
        /// 
        /// (2) 1: XLR plug 1 supplies the generator signal; XLR plug 2 is
        /// deactivated.
        /// 
        /// (3) 2: XLR plug 2 supplies the generator signal; XLR plug 1 is
        /// deactivated.
        /// 
        /// (4) 2 = 1: Both XLR plugs supply an output signal.
        /// If the generator function "Stereo Sine" is selected (R&amp;S UPV-B3 option is required for this), the level and frequency can be different for each channel of the output signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorChannelMode(int Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorChannelMode(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to return how the signal-carrying XLR plugs in the bottom right-hand part of the R&amp;S UPV front panel are configured.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns the signal-carrying XLR plugs configuration.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorChannelMode(out int Channel)
        {
            int pInvokeResult = PInvoke.GetGeneratorChannelMode(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures generator output to be unbalanced (Unbal) or balanced (Bal). The setting always applies to both outputs. The generator can also supply a common-mode signal.
        /// 
        /// Remote-control command(s):
        /// OUTPut:TYPE UNBalanced | BALanced | CTESt
        /// </summary>
        /// <param name="Output_Type">
        /// This control selects output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_UNBAL (0) - Unbal
        /// RSUPV_GEN_OUTPUT_BAL   (1) - Bal
        /// RSUPV_GEN_OUTPUT_CTEST (2) - Com Mode Test
        /// 
        /// Default Value: RSUPV_GEN_OUTPUT_BAL (1)
        /// 
        /// Notes:
        /// 
        /// (1) Unbal: The RMS of the generator signal can be max. 10 V. The output impedance is 5 ohms. If commercially available BNC cables are to be used, it is recommended to use an XLR/BNC adapter R&amp;S UPL-Z1.
        /// 
        /// (2) Bal: The RMS of the generator signal can be max. 20 V. The user can choose between three different output impedance values.
        /// 
        /// (3) Com Mode Test: Identical output signals are present at pins 2 and 3 of the XLR connectors. The signal lines are referenced to the generator ground. The output impedance is made up of two identical resistances in the two signal lines. This generator output configuration is suitable for measuring the common-mode rejection of balanced DUTs.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorOutputType(int Output_Type)
        {
            int pInvokeResult = PInvoke.SetGeneratorOutputType(this._handle, Output_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generator output type. 
        /// 
        /// Remote-control command(s):
        /// OUTPut:TYPE?
        /// </summary>
        /// <param name="Output_Type">
        /// This control returns output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_UNBAL (0) - Unbal
        /// RSUPV_GEN_OUTPUT_BAL   (1) - Bal
        /// RSUPV_GEN_OUTPUT_CTEST (2) - Com Mode Test
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorOutputType(out int Output_Type)
        {
            int pInvokeResult = PInvoke.GetGeneratorOutputType(this._handle, out Output_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the output impedance.
        /// 
        /// Notes:
        /// 
        /// (1) This function can only be operated if "Bal" has been selected as the Output Type. If "Unbal" has been selected, only a field showing a fixed impedance (5 ohm in this case) is displayed.
        /// 
        /// (2) Impedance 25 Ohm is the only impedance available in UPP.
        /// 
        /// (3) Impedance 25 Ohm is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance R10 | R200 | R600 | R25
        /// </summary>
        /// <param name="Impedance">
        /// This control selects output impedance.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_IMPEDANCE_10  (0) -  10 Ohm
        /// RSUPV_GEN_IMPEDANCE_200 (1) - 200 Ohm
        /// RSUPV_GEN_IMPEDANCE_600 (2) - 600 Ohm
        /// RSUPV_GEN_IMPEDANCE_25  (3) -  25 Ohm 
        /// 
        /// Default Value: RSUPV_GEN_IMPEDANCE_R10 (0)
        /// 
        /// Notes:
        /// 
        /// (0) 10 Ohm: The output impedance is 10 ohm.
        /// 
        /// (1) 200 Ohm: The output impedance is 200 ohm. If the R&amp;S UPV-U1 option is installed, the output impedance is 150 ohm. After the R&amp;S UPV-U1 option has been installed, the R&amp;S UPV must be informed of this via the diagnostics panel so that "150 ohm." is then displayed in the selection box. The installation instructions supplied with the option explain which entries are required for this.
        /// 
        /// (2) 600 Ohm: The output impedance is 600 ohm.
        /// 
        /// (3) 25 Ohm: The output impedance is 25 ohm (Only for UPP).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorImpedance(int Impedance)
        {
            int pInvokeResult = PInvoke.SetGeneratorImpedance(this._handle, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output impedance.
        /// 
        /// Notes:
        /// 
        /// (1) This function can only be operated if "Bal" has been selected as the Output Type. If "Unbal" has been selected, only a field showing a fixed impedance (5 ohm in this case) is displayed.
        /// 
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance?
        /// </summary>
        /// <param name="Impedance">
        /// This control returns output impedance.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_IMPEDANCE_10  (0) -  10 Ohm
        /// RSUPV_GEN_IMPEDANCE_200 (1) - 200 Ohm
        /// RSUPV_GEN_IMPEDANCE_600 (2) - 600 Ohm
        /// RSUPV_GEN_IMPEDANCE_25  (3) -  25 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorImpedance(out int Impedance)
        {
            int pInvokeResult = PInvoke.GetGeneratorImpedance(this._handle, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the generator ground.
        /// 
        /// Notes:
        /// 
        /// (1) XLR Pin 1 always remains unconnected, regardless of the selected configuration.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LOW FLOat | GROund
        /// </summary>
        /// <param name="Common">
        /// This control selects output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_COMM_FLOAT (0) - Float
        /// RSUPV_GEN_OUTPUT_COMM_GND   (1) - Ground
        /// 
        /// Default Value: RSUPV_GEN_OUTPUT_COMM_GND (1)
        /// 
        /// Notes:
        /// 
        /// (1) Float: The generator ground is not electrically connected to the instrument ground. With the default configuration "Unbal", a capacitance of approx. 25 nF is connected between the two ground connections. With "Bal", the capacitance is approx. 2 nF and is primarily determined by the layout and coupling capacitance inside the toroidal transformer which delivers the supply voltages for the generator.
        /// 
        /// (2) Ground: The generator ground is electrically connected to the instrument ground with approx. 50 ohm.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorCommon(int Common)
        {
            int pInvokeResult = PInvoke.SetGeneratorCommon(this._handle, Common);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generator ground.
        /// 
        /// Notes:
        /// 
        /// (1) XLR Pin 1 always remains unconnected, regardless of the selected configuration.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LOW?
        /// </summary>
        /// <param name="Common">
        /// This control returns output type.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTPUT_COMM_FLOAT (0) - Float
        /// RSUPV_GEN_OUTPUT_COMM_GND   (1) - Ground
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorCommon(out int Common)
        {
            int pInvokeResult = PInvoke.GetGeneratorCommon(this._handle, out Common);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If the universal generator is selected, this function selects the generator D/A converter bandwidth.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BANDwidth:MODE B22 | B40 | B80 | AUTO
        /// </summary>
        /// <param name="Bandwidth">
        /// This control selects frequency range.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_BWIDTH_22    (0) - 22 kHz
        /// RSUPV_GEN_BWIDTH_40    (1) - 40 kHz
        /// RSUPV_GEN_BWIDTH_80    (2) - 80 kHz
        /// RSUPV_GEN_BWIDTH_AUTO  (3) - Play Auto
        /// 
        /// Default Value: RSUPV_GEN_BWIDTH_22 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 22 kHz: The maximum output frequency is 22 kHz. The generator D/A converter is then clocked at 48 kHz.
        /// 
        /// (2) 40 kHz: The maximum output frequency is 40 kHz. The generator D/A converter is then clocked at 96 kHz.
        /// 
        /// (3) 80 kHz: The maximum output frequency is 80 kHz. The generator D/A converter is then clocked at 192 kHz.
        /// 
        /// (4) Play Auto: For the Play generator function only. The bandwidth is automatically determined as a function of the
        /// sample rate entered in the WAV file. This sample rate is likewise used for clocking the generator DAC.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorBandwidth(int Bandwidth)
        {
            int pInvokeResult = PInvoke.SetGeneratorBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generator D/A converter bandwidth.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BANDwidth:MODE?
        /// </summary>
        /// <param name="Bandwidth">
        /// This control returns frequency range.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_BWIDTH_22    (0) - 22 kHz
        /// RSUPV_GEN_BWIDTH_40    (1) - 40 kHz
        /// RSUPV_GEN_BWIDTH_80    (2) - 80 kHz
        /// RSUPV_GEN_BWIDTH_AUTO  (3) - Play Auto
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) 22 kHz: The maximum output frequency is 22 kHz.
        /// The generator D/A converter is then clocked at 48 kHz.
        /// 
        /// (2) 40 kHz: The maximum output frequency is 40 kHz.
        /// The generator D/A converter is then clocked at 96 kHz.
        /// 
        /// (3) 80 kHz The maximum output frequency is 80 kHz.
        /// The generator D/A converter is then clocked at 192 kHz.
        /// 
        /// (4) Play Auto: For the Play generator function only. The bandwidth is automatically determined as a function of the
        /// sample rate entered in the WAV file. This sample rate is likewise used for clocking the generator DAC.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorBandwidth(out int Bandwidth)
        {
            int pInvokeResult = PInvoke.GetGeneratorBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the generator level control.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RANGe AUTo | FIX
        /// </summary>
        /// <param name="Volt_Range">
        /// This control sets generator level control.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_VOLT_RANG_AUTO (0) - Auto
        /// RSUPV_GEN_VOLT_RANG_FIX  (1) - Fix
        /// 
        /// Default Value: RSUPV_GEN_VOLT_RANG_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto: The internal signal paths are optimally driven; the
        /// output voltage is adjusted using the analog hardware.
        /// 
        /// (2) Fix: The analog hardware is permanently set to the
        /// specified maximum voltage. The actual output voltage is obtained by controlling the level of the D/A converter; the analog hardware settings remain unchanged.
        /// 
        /// This setting is ignored if the "Low-Distortion Generator" option (R&amp;S UPV-B1) is used. In this case, level control is always performed according to the Auto algorithm.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorVoltageRange(int Volt_Range)
        {
            int pInvokeResult = PInvoke.SetGeneratorVoltageRange(this._handle, Volt_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generator level control.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RANGe?
        /// </summary>
        /// <param name="Volt_Range">
        /// This control returns generator level control.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_VOLT_RANG_AUTO (0) - Auto
        /// RSUPV_GEN_VOLT_RANG_FIX  (1) - Fix
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Auto: The internal signal paths are optimally driven; the
        /// output voltage is adjusted using the analog hardware.
        /// 
        /// (2) Fix: The analog hardware is permanently set to the
        /// specified maximum voltage. The actual output voltage is obtained by controlling the level of the D/A converter; the analog hardware settings remain unchanged.
        /// 
        /// This setting is ignored if the "Low-Distortion Generator" option (R&amp;S UPV-B1) is used. In this case, level control is always performed according to the Auto algorithm.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorVoltageRange(out int Volt_Range)
        {
            int pInvokeResult = PInvoke.GetGeneratorVoltageRange(this._handle, out Volt_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets maximum value for the output voltage.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:MAXimum
        /// </summary>
        /// <param name="Max_Voltage">
        /// This control sets maximum value for the output voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 10.0 V
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Max Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMaxVoltage(double Max_Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMaxVoltage(this._handle, Max_Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns maximum value for the output voltage.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:MAXimum?
        /// </summary>
        /// <param name="Max_Voltage">
        /// This control returns maximum value for the output voltage.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Max Voltage.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMaxVoltage(out double Max_Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMaxVoltage(this._handle, out Max_Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures digital generator's common parameters.
        /// 
        /// Note(s):
        /// 
        /// (1) Features 'Sync Output', 'Int Clk Freq', 'Sync Out Type' and 'Aux Output' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SYNC:TO INTClock | AINPut | AUXinput | SINPut | SINVinput
        /// OUTPut:SAMPle:MODE F32 | F44 | F48 | F88 | F96 | F176 | F192 | VALue | SYNChron
        /// OUTPut:SAMPle:FREQuency
        /// OUTPut:DIGital:SYNC:OUTPut ADOutput | ADINput | AXINput | GSYPll | JRFPll | AXOutput | SYINput | INTClock
        /// OUTPut:DIGital:INTClockfreq
        /// OUTPut:DIGital:SYNC:TYPE WCLock | BCLock
        /// OUTPut:DIGital:AUXiliary AOUTput | AINPut | AINReclock | RGENerator | AUXin
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects source to which the digital audio generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_INT_CLK  (0) - Internal CLK
        /// RSUPV_GEN_SYNC_AUDIO_IN (1) - Audio In
        /// RSUPV_GEN_SYNC_AUX_IN   (2) - Aux In
        /// RSUPV_GEN_SYNC_IN       (3) - Sync In
        /// RSUPV_GEN_SYNC_IN_INV   (4) - Sync In inv
        /// RSUPV_GEN_SYNC_IN_EDAR  (5) - Ext DARS
        /// RSUPV_GEN_SYNC_IN_ECLK  (6) - Ext Clock
        /// RSUPV_GEN_SYNC_IN_EICL  (7) - Ext Inv Clock
        /// RSUPV_GEN_SYNC_IN_HINT  (8) - H INTern
        /// RSUPV_GEN_SYNC_IN_HAUX  (9) - H AUX Input
        /// 
        /// 
        /// Default Value: RSUPV_GEN_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal CLK: The generator is synchronized to the internal clock generator. The clock frequency is determined by the sample frequency setting.
        /// 
        /// (2) Audio In: Synchronization to the digital audio input signal.
        /// 
        /// (3) Aux In: Synchronization to the digital audio signal at the
        /// AUX input XLR socket at the rear of the instrument.
        /// 
        /// (4) Sync In: Synchronization to the word-clock signal at the
        /// SYNC input BNC socket at the rear of the instrument. The generator sync PLL is used.
        /// 
        /// (5) Sync In inv: Synchronization to the inverted word-clock signal at the SYNC input BNC socket at the rear of the
        /// instrument.
        /// 
        /// (6) Ext DARS: Synchronization to a supplied digital audio input signal at the "Sync In" BNC jack. The generator runs at the same sampling rate as the supplied signal. 
        /// 
        /// (7) Ext Clock: Synchronization to a supplied clock signal at the "Sync In" BNC jack. The sampling rate of the generator is determined by the frequency of the supplied clock signal.
        /// 
        /// (8) Ext Inv Clock: Synchronization to the inverted supplied clock signal at the "Sync In" BNC jack. The sampling rate of the generator is determined by the frequency of the supplied clock signal.  
        /// </param>
        /// <param name="Sample_Freq">
        /// This control sets the clock rate of the digital audio signal for the generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SAMPLE_FREQ_64    (0) - 32 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_44    (1) - 44.1 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_48    (2) - 48 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_88    (3) - 88.2 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_96    (4) - 96 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_176   (5) - 176.4 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_192   (6) - 192 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_VAL   (7) - Value
        /// RSUPV_GEN_SAMPLE_FREQ_SYNC  (8) - Sync To Anlr
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_64 (0)
        /// </param>
        /// <param name="Sample_Freq_Value">
        /// This control sets sample frequency value.
        /// 
        /// Valid Range: 30.0e3 to 200.0e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only if 'Sample Frequency' control is set to 'Value'.
        /// </param>
        /// <param name="Sync_Output">
        /// This control selects the source for the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_OUT (0) - Audio Out
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_IN  (1) - Audio In
        /// RSUPV_GEN_SYNC_OUTP_AUX_IN    (2) - Aux In
        /// RSUPV_GEN_SYNC_OUTP_GEN_PLL   (3) - Gen Sync PLL
        /// RSUPV_GEN_SYNC_OUTP_JITT_PLL  (4) - Jitt Ref PLL 
        /// RSUPV_GEN_SYNC_OUTP_AUX       (5) - Aux Out
        /// RSUPV_GEN_SYNC_OUTP_SYNC_IN   (6) - Sync In
        /// RSUPV_GEN_SYNC_OUTP_INT_CLK   (7) - Internal Clock
        /// 
        /// Default Value: RSUPV_GEN_SYNC_OUTP_AUDIO_OUT (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Audio Out: Clock signal of the digital audio generator. Always the same as the clock rate of the digital audio output
        /// on the front panel.
        /// If "Jitter" is set, jitter is applied to this output.
        /// 
        /// (2)Audio In: Clock signal of the selected digital audio input on the front panel.
        /// 
        /// (3) Aux In: Clock signal of the digital audio auxiliary input at the rear of the instrument.
        /// 
        /// (4) Gen Sync PLL: Clock signal at the output of the generator sync PLL. Allows the frequency of a word clock applied at the
        /// sync input to be increased by a factor of 128.
        /// If "Jitter" is set, the set jitter is not applied to this
        /// output.
        /// 
        /// (5) Jitt Ref PLL: Clock signal at the output of the jitter reference PLL. Allows a low-jitter clock to be recovered from the digital audio input signal.
        /// 
        /// (6) Aux Out: Clock signal of the digital audio auxiliary generator. This generator is used e.g. for the frame phase
        /// setting and the reclock function.
        /// 
        /// (7) Sync In: Loop-through option of the digital audio sync input, e.g. for cascading several instruments which
        /// synchronize to the word clock.
        /// 
        /// (8) Internal Clock: Output signal of the internal clock source.
        /// If the digital audio generator is not synchronized to the internal clock, the internal clock is available as an independent clock source and is set using the selection parameter "Int Clk Freq".
        /// 
        /// 
        /// </param>
        /// <param name="Int_Clk_Freq">
        /// This function sets the (word-clock) frequency of the internal clock generator.
        /// 
        /// Valid Range: 1.0e3 to 250.0e3 Hz
        /// 
        /// Default Value: 32.0e3 Hz
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This control is not used if 'Sync To' control is set to 'Internal Clock'
        /// 
        /// (2) This control is used only if 'Sync Output' control is set to 'Internal Clock'
        /// 
        /// 
        /// </param>
        /// <param name="Sync_Out_Type">
        /// This control selects the signal of the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_TYPE_WORD    (0) - Word Clock
        /// RSUPV_GEN_OUTP_TYPE_BIPHASE (1) - Biphase Clock
        /// 
        /// Default Value: RSUPV_GEN_OUTP_TYPE_WORD (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Word Clock: The signal of the digital audio sync output
        /// corresponds to the sampling frequency of the selected source.
        /// 
        /// (2) Biphase Clock The signal of the digital audio sync output
        /// corresponds to the biphase clock, i.e. 128 times the
        /// sampling frequency of the selected source. The biphase clock is often used for direct clocking of the digital audio modules.
        /// 
        /// (3) This control is not used if 'Sync Output' control is set to   'Sync In'.
        /// </param>
        /// <param name="Aux_Output">
        /// This control selects the source for the digital audio auxiliary output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_AUX_OUTP_AUDIO_OUT     (0) - Audio Out
        /// RSUPV_GEN_AUX_OUTP_AUDIO_IN      (1) - Audio In
        /// RSUPV_GEN_AUX_OUTP_AUDIO_RECLOCK (2) - Audio In Reclocked
        /// RSUPV_GEN_AUX_OUTP_AUDIO_REF_GEN (3) - Audio Ref Gen
        /// RSUPV_GEN_AUX_OUTP_INPUT         (4) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_AUX_OUTP_AUDIO_OUT (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Audio Out: The digital audio generator signal at the auxiliary output is identical to the signal at the front output. The signal output level is constant and does not
        /// depend on the selected BAL / UNBAL output level.
        /// The long cable simulator and common-mode superimposition have no effect on this output. If a jitter is set, it will also affect this output.
        /// 
        /// (2) Audio In: Loop-through option of the digital audio signal from the selected input to the digital audio auxiliary
        /// output. The signal output level is constant and does not
        /// depend on the selected input or the pulse amplitude
        /// at the digital input.
        /// 
        /// (3) Audio In Reclocked: The jitter-reduced input signal is output. The audio data content is extracted from the input
        /// signal and output again via the digital audio auxiliary
        /// generator. This generator is controlled using the lowjitter
        /// clock from the jitter reference PLL.
        /// 
        /// (4) Audio Ref Gen: The digital audio auxiliary generator is used as the reference generator for the frame phase setting
        /// of the digital audio generator. If this setting is selected, it is then possible to set a frame phase and select the reference generator data. This setting cannot be selected if the digital generator is synchronized to the sync input.
        /// 
        /// (5) Aux In: Loop-through option of the digital audio auxiliary
        /// input, e.g. for cascading several instruments.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorDigital(int Sync_To, int Sample_Freq, double Sample_Freq_Value, int Sync_Output, double Int_Clk_Freq, int Sync_Out_Type, int Aux_Output)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorDigital(this._handle, Sync_To, Sample_Freq, Sample_Freq_Value, Sync_Output, Int_Clk_Freq, Sync_Out_Type, Aux_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the audio data for reference generator.
        /// 
        /// Notes:
        /// 
        /// (1) This function is valid only if 'Audio Ref Gen' is selected as the 'Aux Output' source.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:REFerence AZERo | AONE
        /// SOURce:DIGital:PHASetorefvar OFF | VALue
        /// SOURce:DIGital:FRAMephase
        /// </summary>
        /// <param name="Ref_Gen_Data">
        /// This control sets the audio data for reference generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_REF_DATA_ZERO (0) - All Zero
        /// RSUPV_GEN_REF_DATA_ONE  (1) - All One
        /// 
        /// Default Value: RSUPV_GEN_REF_DATA_ZERO (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) All Zero: All audio data bits are set to zero.
        /// 
        /// (2) All One: To allow digital audio receivers to be tested, the
        /// audio data bits can all be set to one.
        /// </param>
        /// <param name="Phase_To_Ref">
        /// This control activates or deactivates the Phase to Ref.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PHASE_REF_OFF (0) - Off
        /// RSUPV_GEN_PHASE_REF_VAL (1) - Value
        /// 
        /// Default Value: RSUPV_GEN_PHASE_REF_OFF (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: "Phase To Ref" variation is deactivated. Here, the generator sync PLL is bypassed, which generally results in an improvement of the clock for the digital audio generator.
        /// 
        /// (2) Value: A frame phase shift is activated and an appropriate
        /// setting value can be entered.
        /// </param>
        /// <param name="Frame_Phase_Value">
        /// This control sets the value for the desired frame phase shift.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The value can be entered in various units.
        /// 
        /// (2) The maximum variation range for the shift always corresponds to a phase shift of +/- 180? relative to the frame phase of the reference generator.
        /// 
        /// (3) The generator sync PLL is used for generating the phase shift.
        /// 
        /// (4) This control is used only if 'Phase To Ref' control is set to 'Value.
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frame Phase entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorDigitalAudioRefGen(int Ref_Gen_Data, int Phase_To_Ref, double Frame_Phase_Value, int Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorDigitalAudioRefGen(this._handle, Ref_Gen_Data, Phase_To_Ref, Frame_Phase_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether audio data or impairments are generated by digital generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SRCMode JITTer | COMMon
        /// </summary>
        /// <param name="Source_Mode">
        /// This control selects source mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIG_JITTER (1) - Jitter Only
        /// RSUPV_GEN_DIG_COMMON (2) - Common Only
        /// 
        /// Default Value: RSUPV_GEN_DIG_JITTER (1)
        /// 
        /// Notes:
        /// 
        /// (1) Jitter Only: Jitter is applied to the digital audio signal. Jitter is available as impairment signal.
        /// 
        /// (2) Common Only: An analog common-mode signal is superimposed on the digital audio signal at the BAL output. Common is available as impairment signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorSourceMode(int Source_Mode)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorSourceMode(this._handle, Source_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns digital generator source mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SRCMode?
        /// </summary>
        /// <param name="Source_Mode">
        /// This control returns source mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIG_JITTER (1) - Jitter Only
        /// RSUPV_GEN_DIG_COMMON (2) - Common Only
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorSourceMode(out int Source_Mode)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorSourceMode(this._handle, out Source_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether impairments (jitter or a common-mode signal) are to be added to the output signal of the digital audio generators.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:IMPairment ON | OFF
        /// </summary>
        /// <param name="Add_Impairment">
        /// This control sets whether impairments (jitter or a common-mode signal) are to be added to the output signal of the digital audio generators.
        /// 
        /// Valid Values:
        /// VI_FALSE   (0) - Off
        /// VI_TRUE    (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The impairment signal is deactivated.
        /// 
        /// (2) On: The impairment signal (jitter or common-mode) is
        /// activated. The analog generator is deactivated, since it is
        /// used for generating the impairment signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorAddImpairment(bool Add_Impairment)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorAddImpairment(this._handle, System.Convert.ToUInt16(Add_Impairment));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether impairments (jitter or a common-mode signal) are to be added to the output signal of the digital audio generators.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:IMPairment?
        /// </summary>
        /// <param name="Add_Impairment">
        /// This control gets whether impairments (jitter or a common-mode signal) are to be added to the output signal of the digital audio generators.
        /// 
        /// Valid Values:
        /// VI_FALSE   (0) - Off
        /// VI_TRUE    (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorAddImpairment(out bool Add_Impairment)
        {
            ushort Add_ImpairmentAsUShort;
            int pInvokeResult = PInvoke.GetDigitalGeneratorAddImpairment(this._handle, out Add_ImpairmentAsUShort);
            Add_Impairment = System.Convert.ToBoolean(Add_ImpairmentAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the left and right-hand digital audio channels if 'Audio Data' is selected as the 'Source Mode'.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CHANnel OFF | CH1 | CH2 | CH2Is1 | MULTi
        /// </summary>
        /// <param name="Channel">
        /// This control selects the left and right-hand digital audio channels.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// RSUPV_GEN_CH_MULTI (5) - Multi
        /// 
        /// Default Value: RSUPV_GEN_CH_1 (1)
        /// 
        /// Notes:
        /// 
        /// (1) OFF: Both channels are deactivated. The frequency and level setting of the channels have no effect. An "empty frame" which does not contain any audio data is generated.
        /// 
        /// (2) 1: Only the left-hand channel supplies the generator signal; the right-hand channel is deactivated.
        /// 
        /// (3) 2: Only the right-hand channel supplies the generator signal; the left-hand channel is deactivated.
        /// 
        /// (4) 2 = 1: Both the left and right-hand channel supply the same output signal. If the generator function "Stereo Sine" is selected, both channels may differ with regard to frequency, phase and amplitude.
        /// 
        /// (5) Multi: This option is offered only if the R&amp;S UPP-B4 option (HDMI and digital audio interfaces) for the 8-channel "I2S" generation is installed and enables the free configuration of up to 8 channels in the following parameter fields.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorChannelMode(int Channel)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorChannelMode(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to return how the left and right-hand digital audio channels are configured.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns how the left and right-hand digital audio channels are configured.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// RSUPV_GEN_CH_MULTI (5) - Multi
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorChannelMode(out int Channel)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorChannelMode(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source to which the digital audio generator is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) 'Aux In', 'Sync In' and 'Sync In inv' are available only in UPV.
        /// 
        /// (2) 'Ext DARS', 'Ext Clock', 'Ext Inv Clock', 'H INTern' and 'H AUX input' are available only in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SYNC:TO INTClock | AINPut | AUXinput | SINPut | SINVinput | EDARs | ECLK | EICLk | HINTern | HAUXinput
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects source to which the digital audio generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_INT_CLK  (0) - Internal CLK
        /// RSUPV_GEN_SYNC_AUDIO_IN (1) - Audio In
        /// RSUPV_GEN_SYNC_AUX_IN   (2) - Aux In
        /// RSUPV_GEN_SYNC_IN       (3) - Sync In
        /// RSUPV_GEN_SYNC_IN_INV   (4) - Sync In inv
        /// RSUPV_GEN_SYNC_IN_EDAR  (5) - Ext DARS
        /// RSUPV_GEN_SYNC_IN_ECLK  (6) - Ext Clock
        /// RSUPV_GEN_SYNC_IN_EICL  (7) - Ext Inv Clock
        /// RSUPV_GEN_SYNC_IN_HINT  (8) - Intern
        /// RSUPV_GEN_SYNC_IN_HAUX  (9) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal CLK: The generator is synchronized to the internal clock generator. The clock frequency is determined by the sample frequency setting.
        /// 
        /// (2) Audio In: Synchronization to the digital audio input signal.
        /// 
        /// (3) Aux In: Synchronization to the digital audio signal at the
        /// AUX input XLR socket at the rear of the instrument.
        /// 
        /// (4) Sync In: Synchronization to the word-clock signal at the
        /// SYNC input BNC socket at the rear of the instrument. The generator sync PLL is used.
        /// 
        /// (5) Sync In inv: Synchronization to the inverted word-clock signal at the SYNC input BNC socket at the rear of the
        /// instrument.
        /// 
        /// (6) Ext DARS: Synchronization to a supplied digital audio input signal at the "Sync In" BNC jack. The generator runs at the same sampling rate as the supplied signal. 
        /// 
        /// (7) Ext Clock: Synchronization to a supplied clock signal at the "Sync In" BNC jack. The sampling rate of the generator is determined by the frequency of the supplied clock signal.
        /// 
        /// (8) Ext Inv Clock: Synchronization to the inverted supplied clock signal at the "Sync In" BNC jack. The sampling rate of the generator is determined by the frequency of the supplied clock signal.  
        /// 
        /// (9) Intern, Aux In: for HDMI Generator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorSyncTo(int Sync_To)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorSyncTo(this._handle, Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source to which the digital audio generator is synchronized.
        /// 
        /// Remote-control command(s):
        /// SOURce:SYNC:TO?
        /// </summary>
        /// <param name="Sync_To">
        /// This control returns source to which the digital audio generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_INT_CLK  (0) - Internal CLK
        /// RSUPV_GEN_SYNC_AUDIO_IN (1) - Audio In
        /// RSUPV_GEN_SYNC_AUX_IN   (2) - Aux In
        /// RSUPV_GEN_SYNC_IN       (3) - Sync In
        /// RSUPV_GEN_SYNC_IN_INV   (4) - Sync In inv
        /// RSUPV_GEN_SYNC_IN_EDAR  (5) - Ext DARS
        /// RSUPV_GEN_SYNC_IN_ECLK  (6) - Ext Clock
        /// RSUPV_GEN_SYNC_IN_EICL  (7) - Ext Inv Clock
        /// RSUPV_GEN_SYNC_IN_HINT  (8) - Intern
        /// RSUPV_GEN_SYNC_IN_HAUX  (9) - Aux In
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorSyncTo(out int Sync_To)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorSyncTo(this._handle, out Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to set the clock rate of the digital audio signal for the generator. The sample frequency setting is used as a reference whenever audio data signals are generated. With "Common Only" and "Jitter Only" generation, this setting therefore determines the clock rate of the generated empty frame.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE F32 | F44 | F48 | F88 | F96 | F176 | F192 | VALue | SYNChron
        /// OUTPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control sets the clock rate of the digital audio signal for the generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SAMPLE_FREQ_64    (0) - 32 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_44    (1) - 44.1 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_48    (2) - 48 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_88    (3) - 88.2 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_96    (4) - 96 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_176   (5) - 176.4 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_192   (6) - 192 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_VAL   (7) - Variable Sample Frequency
        /// RSUPV_GEN_SAMPLE_FREQ_SYNC  (8) - Sync To Anlr
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_48 (2)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sampling rate entry.
        /// 
        /// (2) Sync To Anlr: If "Sync To Audio In" is set, the generator can be set to the digital analyzer sampling frequency. The sampling rate of the digital audio analyzer is used for synchronization.
        /// 
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sampling rate value.
        /// 
        /// Valid Range: 30.0e3 to 200.0e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorSampleFrequency(int Sample_Frequency, double Variable_Sample_Frequency)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorSampleFrequency(this._handle, Sample_Frequency, Variable_Sample_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the clock rate of the digital audio signal for the generator.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE?
        /// OUTPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control returns the clock rate of the digital audio signal for the generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SAMPLE_FREQ_64    (0) - 32 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_44    (1) - 44.1 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_48    (2) - 48 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_88    (3) - 88.2 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_96    (4) - 96 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_176   (5) - 176.4 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_192   (6) - 192 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_VAL   (7) - Variable Sample Frequency
        /// RSUPV_GEN_SAMPLE_FREQ_SYNC  (8) - Sync To Anlr
        /// 
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control returns variable sampling rate value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorSampleFrequency(out int Sample_Frequency, out double Variable_Sample_Frequency)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorSampleFrequency(this._handle, out Sample_Frequency, out Variable_Sample_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:SYNC:OUTPut ADOutput | ADINput | AXINput | GSYPll | JRFPll | AXOutput | SYINput | INTClock
        /// </summary>
        /// <param name="Sync_Output">
        /// This control selects the source for the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_OUT (0) - Audio Out
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_IN  (1) - Audio In
        /// RSUPV_GEN_SYNC_OUTP_AUX_IN    (2) - Aux In
        /// RSUPV_GEN_SYNC_OUTP_GEN_PLL   (3) - Gen Sync PLL
        /// RSUPV_GEN_SYNC_OUTP_JITT_PLL  (4) - Jitt Ref PLL 
        /// RSUPV_GEN_SYNC_OUTP_AUX       (5) - Aux Out
        /// RSUPV_GEN_SYNC_OUTP_SYNC_IN   (6) - Sync In
        /// RSUPV_GEN_SYNC_OUTP_INT_CLK   (7) - Internal Clock
        /// 
        /// Default Value: RSUPV_GEN_SYNC_OUTP_AUDIO_OUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Audio Out: Clock signal of the digital audio generator. Always the same as the clock rate of the digital audio output
        /// on the front panel.
        /// If "Jitter" is set, jitter is applied to this output.
        /// 
        /// (2) Audio In: Clock signal of the selected digital audio input on the front panel.
        /// 
        /// (3) Aux In: Clock signal of the digital audio auxiliary input at the rear of the instrument.
        /// 
        /// (4) Gen Sync PLL: Clock signal at the output of the generator sync PLL. Allows the frequency of a word clock applied at the
        /// sync input to be increased by a factor of 128.
        /// If "Jitter" is set, the set jitter is not applied to this
        /// output.
        /// 
        /// (5) Jitt Ref PLL: Clock signal at the output of the jitter reference PLL. Allows a low-jitter clock to be recovered from the digital audio input signal.
        /// 
        /// (6) Aux Out: Clock signal of the digital audio auxiliary generator. This generator is used e.g. for the frame phase
        /// setting and the reclock function.
        /// 
        /// (7) Sync In: Loop-through option of the digital audio sync input, e.g. for cascading several instruments which
        /// synchronize to the word clock.
        /// 
        /// (8) Internal Clock: Output signal of the internal clock source.
        /// If the digital audio generator is not synchronized to the internal clock, the internal clock is available as an independent clock source and is set using the selection parameter "Int Clk Freq".
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorSyncOutput(int Sync_Output)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorSyncOutput(this._handle, Sync_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source for the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:SYNC:OUTPut?
        /// </summary>
        /// <param name="Sync_Output">
        /// This control returns the source for the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_OUT (0) - Audio Out
        /// RSUPV_GEN_SYNC_OUTP_AUDIO_IN  (1) - Audio In
        /// RSUPV_GEN_SYNC_OUTP_AUX_IN    (2) - Aux In
        /// RSUPV_GEN_SYNC_OUTP_GEN_PLL   (3) - Gen Sync PLL
        /// RSUPV_GEN_SYNC_OUTP_JITT_PLL  (4) - Jitt Ref PLL 
        /// RSUPV_GEN_SYNC_OUTP_AUX       (5) - Aux Out
        /// RSUPV_GEN_SYNC_OUTP_SYNC_IN   (6) - Sync In
        /// RSUPV_GEN_SYNC_OUTP_INT_CLK   (7) - Internal Clock
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorSyncOutput(out int Sync_Output)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorSyncOutput(this._handle, out Sync_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the (word-clock) frequency of the internal clock generator if the internal clock generator is used as an independent clock source at the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:INTClockfreq
        /// </summary>
        /// <param name="Internal_Clock_Frequency">
        /// This function sets the (word-clock) frequency of the internal clock generator.
        /// 
        /// Valid Range: 1.0e3 to 250.0e3 Hz
        /// 
        /// Default Value: 32.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorInternalClockFrequency(double Internal_Clock_Frequency)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorInternalClockFrequency(this._handle, Internal_Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the (word-clock) frequency of the internal clock generator if the internal clock generator is used as an independent clock source at the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:INTClockfreq?
        /// </summary>
        /// <param name="Internal_Clock_Frequency">
        /// This function returns the (word-clock) frequency of the internal clock generator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorInternalClockFrequency(out double Internal_Clock_Frequency)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorInternalClockFrequency(this._handle, out Internal_Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the signal of the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:SYNC:TYPE WCLock | BCLock
        /// </summary>
        /// <param name="Sync_Output_Type">
        /// This control selects the signal of the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_TYPE_WORD    (0) - Word Clock
        /// RSUPV_GEN_OUTP_TYPE_BIPHASE (1) - Biphase Clock
        /// 
        /// Default Value: RSUPV_GEN_OUTP_TYPE_WORD (0)
        /// 
        /// Notes:
        /// 
        /// (1) Word Clock: The signal of the digital audio sync output
        /// corresponds to the sampling frequency of the selected source.
        /// 
        /// (2) Biphase Clock The signal of the digital audio sync output
        /// corresponds to the biphase clock, i.e. 128 times the
        /// sampling frequency of the selected source. The biphase clock is often used for direct clocking of the digital audio modules.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorSyncOutType(int Sync_Output_Type)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorSyncOutType(this._handle, Sync_Output_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the signal of the digital audio sync output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:SYNC:TYPE?
        /// </summary>
        /// <param name="Sync_Output_Type">
        /// This control returns the signal of the digital audio sync output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_TYPE_WORD    (0) - Word Clock
        /// RSUPV_GEN_OUTP_TYPE_BIPHASE (1) - Biphase Clock
        /// 
        /// Notes:
        /// 
        /// (1) Word Clock: The signal of the digital audio sync output
        /// corresponds to the sampling frequency of the selected source.
        /// 
        /// (2) Biphase Clock: The signal of the digital audio sync output
        /// corresponds to the biphase clock, i.e. 128 times the
        /// sampling frequency of the selected source. The biphase clock is often used for direct clocking of the digital audio modules.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorSyncOutType(out int Sync_Output_Type)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorSyncOutType(this._handle, out Sync_Output_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the digital audio auxiliary output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:AUXiliary AOUTput | AINPut | AINReclock | RGENerator | AUXin
        /// </summary>
        /// <param name="Aux_Output">
        /// This control selects the source for the digital audio auxiliary output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_AUX_OUTP_AUDIO_OUT     (0) - Audio Out
        /// RSUPV_GEN_AUX_OUTP_AUDIO_IN      (1) - Audio In
        /// RSUPV_GEN_AUX_OUTP_AUDIO_RECLOCK (2) - Audio In Reclocked
        /// RSUPV_GEN_AUX_OUTP_AUDIO_REF_GEN (3) - Audio Ref Gen
        /// RSUPV_GEN_AUX_OUTP_INPUT         (4) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_AUX_OUTP_AUDIO_OUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Audio Out: The digital audio generator signal at the auxiliary output is identical to the signal at the front output. The signal output level is constant and does not
        /// depend on the selected BAL / UNBAL output level.
        /// The long cable simulator and common-mode superimposition have no effect on this output. If a jitter is set, it will also affect this output.
        /// 
        /// (2) Audio In: Loop-through option of the digital audio signal from the selected input to the digital audio auxiliary
        /// output. The signal output level is constant and does not
        /// depend on the selected input or the pulse amplitude
        /// at the digital input.
        /// 
        /// (3) Audio In Reclocked: The jitter-reduced input signal is output. The audio data content is extracted from the input
        /// signal and output again via the digital audio auxiliary
        /// generator. This generator is controlled using the lowjitter
        /// clock from the jitter reference PLL.
        /// 
        /// (4) Audio Ref Gen: The digital audio auxiliary generator is used as the reference generator for the frame phase setting
        /// of the digital audio generator. If this setting is selected, it is then possible to set a frame phase and select the reference generator data. This setting cannot be selected if the digital generator is synchronized to the sync input.
        /// 
        /// (5) Aux In: Loop-through option of the digital audio auxiliary
        /// input, e.g. for cascading several instruments.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorAuxOutput(int Aux_Output)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorAuxOutput(this._handle, Aux_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source for the digital audio auxiliary output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:AUXiliary?
        /// </summary>
        /// <param name="Aux_Output">
        /// This control returns the source for the digital audio auxiliary output.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_AUX_OUTP_AUDIO_OUT     (0) - Audio Out
        /// RSUPV_GEN_AUX_OUTP_AUDIO_IN      (1) - Audio In
        /// RSUPV_GEN_AUX_OUTP_AUDIO_RECLOCK (2) - Audio In Reclocked
        /// RSUPV_GEN_AUX_OUTP_AUDIO_REF_GEN (3) - Audio Ref Gen
        /// RSUPV_GEN_AUX_OUTP_INPUT         (4) - Aux In
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorAuxOutput(out int Aux_Output)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorAuxOutput(this._handle, out Aux_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Wordwidth used by the digital audio generator for the Source Mode "Audio Data".
        /// If the wordwidth is reduced, the values of the audio samples are rounded off to the specified wordwidth. Unused data bits are encoded as zeroes in the digital audio signal.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control sets the audio bits.
        /// 
        /// Valid Range: 8 to 24
        /// 
        /// Default Value: 20
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorAudioBits(int Audio_Bits)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorAudioBits(this._handle, Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the audio bits.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits?
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control returns the audio bits.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorAudioBits(out int Audio_Bits)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorAudioBits(this._handle, out Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the balanced impedance for the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance:BALanced R5 | R15 | R10 | R30 | R200 | R150 | R600 | R25 | R50 | USERdefined
        /// </summary>
        /// <param name="Balanced_Impedance">
        /// This control sets the balanced impedance for the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_BAL_IMP_R5    (0) - 5 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R15   (1) - 15 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R10   (2) - 10 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R30   (3) - 30 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R200  (4) - 200 Ohm 
        /// RSUPV_GEN_OUTP_BAL_IMP_R150  (5) - 150 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R600  (6) - 600 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R25   (7) - 25 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R50   (8) - 50 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_USER  (9) - User Definable 
        /// 
        /// Default Value: RSUPV_GEN_OUTP_BAL_IMP_R5 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorBalancedImpedance(int Balanced_Impedance)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorBalancedImpedance(this._handle, Balanced_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the balanced impedance for the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance:BALanced?
        /// </summary>
        /// <param name="Balanced_Impedance">
        /// This control returns the selected balanced impedance for the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_BAL_IMP_R5    (0) - 5 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R15   (1) - 15 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R10   (2) - 10 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R30   (3) - 30 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R200  (4) - 200 Ohm 
        /// RSUPV_GEN_OUTP_BAL_IMP_R150  (5) - 150 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R600  (6) - 600 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R25   (7) - 25 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R50   (8) - 50 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_USER  (9) - User Definable
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorBalancedImpedance(out int Balanced_Impedance)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorBalancedImpedance(this._handle, out Balanced_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the unbalanced impedance for the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance:UNBalanced R5 | R15 | R10 | R30 | R200 | R150 | R600 | R25 | R50 | USERdefined  
        /// </summary>
        /// <param name="Unbalanced_Impedance">
        /// This control sets the unbalanced impedance for the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_BAL_IMP_R5    (0) - 5 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R15   (1) - 15 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R10   (2) - 10 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R30   (3) - 30 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R200  (4) - 200 Ohm 
        /// RSUPV_GEN_OUTP_BAL_IMP_R150  (5) - 150 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R600  (6) - 600 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R25   (7) - 25 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R50   (8) - 50 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_USER  (9) - User Definable 
        /// 
        /// Default Value: RSUPV_GEN_OUTP_BAL_IMP_R5 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorUnbalancedImpedance(int Unbalanced_Impedance)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorUnbalancedImpedance(this._handle, Unbalanced_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the unbalanced impedance for the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance:UNBalanced?
        /// </summary>
        /// <param name="Unbalanced_Impedance">
        /// This control returns the selected unbalanced impedance for the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_OUTP_BAL_IMP_R5    (0) - 5 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R15   (1) - 15 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R10   (2) - 10 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R30   (3) - 30 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R200  (4) - 200 Ohm 
        /// RSUPV_GEN_OUTP_BAL_IMP_R150  (5) - 150 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R600  (6) - 600 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R25   (7) - 25 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_R50   (8) - 50 Ohm
        /// RSUPV_GEN_OUTP_BAL_IMP_USER  (9) - User Definable
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorUnbalancedImpedance(out int Unbalanced_Impedance)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorUnbalancedImpedance(this._handle, out Unbalanced_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse amplitude of the digital audio signal at the BAL (XLR) output.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SIGNal:BALanced:LEVel
        /// </summary>
        /// <param name="Balanced_Amplitude">
        /// This control sets the pulse amplitude of the digital audio signal at the BAL (XLR) output. The set voltage corresponds to the peak-to-peak value of the pulse amplitude when the output is terminated with the nominal impedance (110 Ohm).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 4.0 V
        /// 
        /// Notes:
        /// 
        /// (1) This voltage is linked to the setting for the UNBAL amplitude and is always 4 times higher than this amplitude.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Balanced Amplitude entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorBalancedAmplitude(double Balanced_Amplitude, int Units)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorBalancedAmplitude(this._handle, Balanced_Amplitude, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse amplitude of the digital audio signal at the BAL (XLR) output.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SIGNal:BALanced:LEVel?
        /// </summary>
        /// <param name="Balanced_Amplitude">
        /// This control returns the pulse amplitude of the digital audio signal at the BAL (XLR) output.
        /// 
        /// Notes:
        /// 
        /// (1) This voltage is linked to the setting for the UNBAL amplitude and is always 4 times higher than this amplitude.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Balanced Amplitude.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorBalancedAmplitude(out double Balanced_Amplitude, out int Units)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorBalancedAmplitude(this._handle, out Balanced_Amplitude, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse amplitude of the digital audio signal at the UNBAL (BNC) output.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SIGNal:LEVel
        /// </summary>
        /// <param name="Unbalanced_Amplitude">
        /// This control sets the pulse amplitude of the digital audio signal at the UNBAL (BNC) output. The set voltage corresponds to the peak-to-peak value of the pulse amplitude when the output is terminated with the nominal impedance (75 Ohm)
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 1.0 V
        /// 
        /// Notes:
        /// 
        /// (1) This voltage is linked to the setting for the BAL amplitude and is always a quarter of this amplitude.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Unbalanced Amplitude entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorUnbalancedAmplitude(double Unbalanced_Amplitude, int Units)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorUnbalancedAmplitude(this._handle, Unbalanced_Amplitude, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse amplitude of the digital audio signal at the UNBAL (BNC) output.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SIGNal:LEVel?
        /// </summary>
        /// <param name="Unbalanced_Amplitude">
        /// This control returns the pulse amplitude of the digital audio signal at the UNBAL (BNC) output. 
        /// 
        /// Notes:
        /// 
        /// (1) This voltage is linked to the setting for the BAL amplitude and is always a quarter of this amplitude.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Unbalaced Amplitude.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorUnbalancedAmplitude(out double Unbalanced_Amplitude, out int Units)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorUnbalancedAmplitude(this._handle, out Unbalanced_Amplitude, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects unbalanced output. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The unbalanced output can be switched so that the digital audio signal of the selected BAL or UNBAL input is output.
        /// 
        /// (2) If the BAL input is selected, the balanced signal is converted into an unbalanced signal.
        /// The signal at the BAL input can then be monitored conveniently e.g. on a connected oscilloscope.
        /// 
        /// (3) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:UNBalanced:OUTPut AOUTput | AINPut
        /// </summary>
        /// <param name="Unbalanced_Output">
        /// This control sets the audio data for reference generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_UNBAL_OUTP_AUDIO_OUT (0) - Audio Out
        /// RSUPV_GEN_UNBAL_OUTP_AUDIO_IN  (1) - Audio In
        /// 
        /// Default Value: RSUPV_GEN_UNBAL_OUTP_AUDIO_OUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Audio Out: The digital audio generator signal is output.
        /// 
        /// (2) Audio In: The digital audio signal from the selected BAL or
        /// UNBAL input is output. It is not possible to output the signal of the optical input in this case. The pulse amplitude setting and the cable simulator do not have any effect on this output.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorUnbalancedOutput(int Unbalanced_Output)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorUnbalancedOutput(this._handle, Unbalanced_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns unbalanced output. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The unbalanced output can be switched so that the digital audio signal of the selected BAL or UNBAL input is output.
        /// 
        /// (2) If the BAL input is selected, the balanced signal is converted into an unbalanced signal.
        /// The signal at the BAL input can then be monitored conveniently e.g. on a connected oscilloscope.
        /// 
        /// (3) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:UNBalanced:OUTPut?
        /// </summary>
        /// <param name="Unbalanced_Output">
        /// This control returns the audio data for reference generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_UNBAL_OUTP_AUDIO_OUT (0) - Audio Out
        /// RSUPV_GEN_UNBAL_OUTP_AUDIO_IN  (1) - Audio In
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorUnbalancedOutput(out int Unbalanced_Output)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorUnbalancedOutput(this._handle, out Unbalanced_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function checks the effect of attenuated input signals
        /// along long cables when tests are performed on digital audio receivers.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:CSIMulator OFF | SIMLong
        /// </summary>
        /// <param name="Cable_Simulation">
        /// This control activates or deactivates cable simulation.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CABLE_SIM_OFF  (0) - Off
        /// RSUPV_GEN_CABLE_SIM_LONG (1) - Long
        /// 
        /// Default Value: RSUPV_GEN_CABLE_SIM_OFF (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) A cable length of approx. 100 m is simulated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorCableSimulation(int Cable_Simulation)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorCableSimulation(this._handle, Cable_Simulation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the effect of attenuated input signals
        /// along long cables when tests are performed on digital audio receivers.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:DIGital:CSIMulator?
        /// </summary>
        /// <param name="Cable_Simulation">
        /// This control returns cable simulation state.
        ///  
        /// Valid Values:
        /// RSUPV_GEN_CABLE_SIM_OFF  (0) - Off
        /// RSUPV_GEN_CABLE_SIM_LONG (1) - Long
        /// 
        /// Notes:
        /// 
        /// (1) A cable length of approx. 100 m is simulated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorCableSimulation(out int Cable_Simulation)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorCableSimulation(this._handle, out Cable_Simulation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures active generator channel.
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Setting of the respective active generator channel for the audio format "PCM 8Ch Lay1" with the "Multi" channel setting.
        /// 
        /// (2) This function is available only for UPP Instrument.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCHannels&lt;1..8&gt; ON|OFF
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gen_Channels">
        /// This control enables or disables active generator channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorChannels(int Meas_Channel, bool Gen_Channels)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorChannels(this._handle, Meas_Channel, System.Convert.ToUInt16(Gen_Channels));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of active generator channel.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCHannels&lt;1..8&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gen_Channels">
        /// This control returns the state of active generator channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorChannels(int Meas_Channel, out bool Gen_Channels)
        {
            ushort Gen_ChannelsAsUShort;
            int pInvokeResult = PInvoke.GetDigitalGeneratorChannels(this._handle, Meas_Channel, out Gen_ChannelsAsUShort);
            Gen_Channels = System.Convert.ToBoolean(Gen_ChannelsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If "Audio Ref Gen" is selected as the "Aux Output" source, this function configures the audio data for this reference generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:REFerence AZERo | AONE
        /// </summary>
        /// <param name="Ref_Generator_Data">
        /// This control sets the audio data for reference generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_REF_DATA_ZERO (0) - All Zero
        /// RSUPV_GEN_REF_DATA_ONE  (1) - All One
        /// 
        /// Default Value: RSUPV_GEN_REF_DATA_ZERO (0)
        /// 
        /// Notes:
        /// 
        /// (1) All Zero: All audio data bits are set to zero.
        /// 
        /// (2) All One: To allow digital audio receivers to be tested, the
        /// audio data bits can all be set to one.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorRefGeneratorData(int Ref_Generator_Data)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorRefGeneratorData(this._handle, Ref_Generator_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If "Audio Ref Gen" is selected as the "Aux Output" source, this function returns the audio data for this reference generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:REFerence?
        /// </summary>
        /// <param name="Ref_Generator_Data">
        /// This control returns the audio data for reference generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_REF_DATA_ZERO (0) - All Zero
        /// RSUPV_GEN_REF_DATA_ONE  (1) - All One
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorRefGeneratorData(out int Ref_Generator_Data)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorRefGeneratorData(this._handle, out Ref_Generator_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If "Audio Ref Gen" is selected as the "Aux Output" source, it is then possible to vary the frame phase offset of the digital audio signal between the front output and the digital audio AUX output at the rear of the instrument.
        /// 
        /// The phase is shifted internally using the generator sync PLL.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:PHASetorefvar OFF | VALue
        /// </summary>
        /// <param name="Phase_To_Ref">
        /// This control activates or deactivates the Phase to Ref.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PHASE_REF_OFF (0) - Off
        /// RSUPV_GEN_PHASE_REF_VAL (1) - Value
        /// 
        /// Default Value: RSUPV_GEN_PHASE_REF_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: "Phase To Ref" variation is deactivated. Here, the generator sync PLL is bypassed, which generally results in an improvement of the clock for the digital audio generator.
        /// 
        /// (2) Value: A frame phase shift is activated and an appropriate
        /// setting value can be entered.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorPhaseToRef(int Phase_To_Ref)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorPhaseToRef(this._handle, Phase_To_Ref);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Phase to Ref state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:PHASetorefvar?
        /// </summary>
        /// <param name="Phase_To_Ref">
        /// This control returns the Phase to Ref state.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PHASE_REF_OFF (0) - Off
        /// RSUPV_GEN_PHASE_REF_VAL (1) - Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorPhaseToRef(out int Phase_To_Ref)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorPhaseToRef(this._handle, out Phase_To_Ref);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets value for the desired frame phase shift.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:FRAMephase
        /// </summary>
        /// <param name="Frame_Phase">
        /// This control sets the value for the desired frame phase shift.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The value can be entered in various units.
        /// 
        /// (2) The maximum variation range for the shift always corresponds to a phase shift of +/- 180? relative to the frame phase of the reference generator.
        /// 
        /// (3) The generator sync PLL is used for generating the phase shift.
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frame Phase entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalGeneratorFramePhase(double Frame_Phase, int Units)
        {
            int pInvokeResult = PInvoke.SetDigitalGeneratorFramePhase(this._handle, Frame_Phase, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns value for the desired frame phase shift.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:FRAMephase?
        /// </summary>
        /// <param name="Frame_Phase">
        /// This control returns the value for the desired frame phase shift.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Frame Phase.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalGeneratorFramePhase(out double Frame_Phase, out int Units)
        {
            int pInvokeResult = PInvoke.GetDigitalGeneratorFramePhase(this._handle, out Frame_Phase, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures I2S board generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SYNC:TO INTclock | EXTMasterclock | EXTWordclock
        /// OUTPut:WORDlength W16 | W24 | W32
        /// OUTPut:SAMPle:MODE F08 | F11 | F16 | F22 | F32 | F44 | F48 | F88 | F96 | F176 | F192 | F384 | VALue
        /// OUTPut:SAMPle:FREQuency
        /// OUTPut:AUDiobits
        /// OUTPut:FORMat SI2S | USERdefined
        /// OUTPut:FSHape SQUpuls | BITPulse
        /// OUTPut:POLarity LFTL | LFTH | POS | NEG
        /// OUTPut:WRDOffset
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects the source to which the I2S generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SYNC_INT_CLK  (0) - Intern
        /// RSUPV_GEN_I2S_SYNC_EXT_MCLK (1) - Extern Masterclk
        /// RSUPV_GEN_I2S_SYNC_EXT_WCLK (2) - Extern Wordclk
        /// 
        /// Default Value: RSUPV_GEN_I2S_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Intern CLK: The generator uses the internal clock.
        /// 
        /// (2) Extern Masterclk: Synchronization to the applied master clock signal at the rear TX CLK IN connector.
        /// 
        /// (3) Extern Wordclk: Synchronization to the applied word clock signal at the rear TX CLK IN connector.
        /// </param>
        /// <param name="Word_Length">
        /// This control selects the word length of a data frame for each channel.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_WLENGTH_16 (0) - 16 bit
        /// RSUPV_GEN_I2S_WLENGTH_24 (1) - 24 bit
        /// RSUPV_GEN_I2S_WLENGTH_64 (2) - 32 bit
        /// 
        /// Default Value: RSUPV_GEN_I2S_WLENGTH_16 (0)
        /// </param>
        /// <param name="Sample_Frequency">
        /// This control sets the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_48 (6)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sampling rate entry.
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sampling rate value.
        /// 
        /// Valid Range: 6.75e3 to 410e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// </param>
        /// <param name="MClk_Ratio">
        /// This control selects the ratio between MCLK and FSYNC.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_MCLK_RATIO_64   (0) - 64
        /// RSUPV_GEN_I2S_MCLK_RATIO_96   (1) - 96
        /// RSUPV_GEN_I2S_MCLK_RATIO_128  (2) - 128
        /// RSUPV_GEN_I2S_MCLK_RATIO_192  (3) - 192
        /// RSUPV_GEN_I2S_MCLK_RATIO_256  (4) - 256
        /// RSUPV_GEN_I2S_MCLK_RATIO_384  (5) - 384
        /// RSUPV_GEN_I2S_MCLK_RATIO_512  (6) - 512
        /// 
        /// Default Value: RSUPV_GEN_I2S_MCLK_RATIO_128  (2)
        /// 
        /// Notes:
        /// 
        /// (1) With word length 16 bits these values are avaible: 64, 128, 256, 512.
        /// 
        /// (2) With word length 24 bits these values are avaible: 96, 192, 384.
        /// 
        /// (3) With word length 32 bits these values are avaible: 128, 256, 512.
        /// 
        /// (4) The value range is limited by word length and sampling frequency.
        /// 
        /// Word Length 16 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 24 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    192, 384
        /// &gt;108 kHz to 216 kHz    192
        /// 
        /// Word Length 32 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// </param>
        /// <param name="Audio_Bits">
        /// This control sets the audio bits.
        /// 
        /// Valid Range: 8 to Word Length
        /// 
        /// Default Value: 16
        /// </param>
        /// <param name="Format">
        /// This control selects the I2S generator function.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FORMAT_SI2S  (0) - Standard I2S
        /// RSUPV_GEN_I2S_FORMAT_USER  (1) - User Definable
        /// 
        /// Default Value: RSUPV_GEN_I2S_FORMAT_SI2S  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Standard I2S: The I2S generator transmits in the standard I2S format. The following parameters are assigned a fixed default:
        /// Fsync Shape:    Square Pulse
        /// Fsync Polarity: Left(1) = Low
        /// Word Offset:    -1
        /// 
        /// (2) User Definable: I2S generator transmits in I2S-like format. The following format-influencing parameters are additionally available:
        /// Fsync Shape
        /// Fsync Polarity
        /// Word Offset
        /// </param>
        /// <param name="Fsync_Shape">
        /// This control selects the FSYNC signal form.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_SQUARE  (0) - Square Pulse
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_BIT     (1) - Bit Pulse
        /// 
        /// Default Value: RSUPV_GEN_I2S_FSYNC_SHAPE_SQUARE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Square Pulse: The FSYNC signal is transmitted as a symmetrical rectangle.
        /// 
        /// (2) Bit Pulse: The FSYNC signal is transmitted as a bit pulse.
        /// </param>
        /// <param name="Fsync_Polarity">
        /// This control selects the FSYNC signal polarity.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTL  (0) - Left (1) = Low
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTH  (1) - Left (1) = High
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_POS   (2) - Positive
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_NEG   (3) - Negative
        /// 
        /// Default Value: RSUPV_GEN_I2S_FSYNC_POLARITY_LFTL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) If Fsync Shape is set to Square Pulse, the following selection is available: Left (1) = Low, Left (1) = High.
        /// 
        /// (2) If Fsync Shape is set to to Bit Pulse, the following selection is available: Positive, Negative.
        /// 
        /// (3) Left (1) = Low: While the left channel (channel 1) is being sent, a low level is applied at the FSYNC signal at a word offset of 0.
        /// 
        /// (4) Left (1) = High: While the left channel (channel 1) is being sent, a high level is applied at the FSYNC signal at a word offset of 0.
        /// 
        /// (5) Positive: At a Word Offset of 0, a positive pulse marks the beginning of the left data word.
        /// 
        /// (6) Negative: At a Word Offset of 0, a negative pulse marks the beginning of the left data word.
        /// </param>
        /// <param name="Word_Offset">
        /// This control sets the the number of SCK clock cycles by which the Fsync signal transmission is delayed relative to the audio data.
        /// 
        /// Valid Values:
        /// -"Word Length" to +"Word Length"-1
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorI2S(int Sync_To, int Word_Length, int Sample_Frequency, double Variable_Sample_Frequency, int MClk_Ratio, int Audio_Bits, int Format, int Fsync_Shape, int Fsync_Polarity, int Word_Offset)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorI2S(this._handle, Sync_To, Word_Length, Sample_Frequency, Variable_Sample_Frequency, MClk_Ratio, Audio_Bits, Format, Fsync_Shape, Fsync_Polarity, Word_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source to which the I2S generator is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SYNC:TO INTClock | EXTMasterclock | EXTWordclock
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects the source to which the I2S generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SYNC_INT_CLK  (0) - Intern
        /// RSUPV_GEN_I2S_SYNC_EXT_MCLK (1) - Extern Masterclk
        /// RSUPV_GEN_I2S_SYNC_EXT_WCLK (2) - Extern Wordclk
        /// 
        /// Default Value: RSUPV_GEN_I2S_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Intern CLK: The generator uses the internal clock.
        /// 
        /// (2) Extern Masterclk: Synchronization to the applied master clock signal at the rear TX CLK IN connector.
        /// 
        /// (3) Extern Wordclk: Synchronization to the applied word clock signal at the rear TX CLK IN connector.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorSyncTo(int Sync_To)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorSyncTo(this._handle, Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source to which the I2S generator is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIGital:SYNC:TO?
        /// </summary>
        /// <param name="Sync_To">
        /// This control returns the source to which the I2S generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SYNC_INT_CLK  (0) - Intern
        /// RSUPV_GEN_I2S_SYNC_EXT_MCLK (1) - Extern Masterclk
        /// RSUPV_GEN_I2S_SYNC_EXT_WCLK (2) - Extern Wordclk
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorSyncTo(out int Sync_To)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorSyncTo(this._handle, out Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the word length of a data frame for each channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:WORDlength W16 | W24 | W32
        /// </summary>
        /// <param name="Word_Length">
        /// This control selects the word length of a data frame for each channel.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_WLENGTH_16 (0) - 16 bit
        /// RSUPV_GEN_I2S_WLENGTH_24 (1) - 24 bit
        /// RSUPV_GEN_I2S_WLENGTH_64 (2) - 32 bit
        /// 
        /// Default Value: RSUPV_GEN_I2S_WLENGTH_16 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorWordLength(int Word_Length)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorWordLength(this._handle, Word_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the word length of a data frame for each channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:WORDlength?
        /// </summary>
        /// <param name="Word_Length">
        /// This control returns the word length of a data frame for each channel.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_WLENGTH_16 (0) - 16 bit
        /// RSUPV_GEN_I2S_WLENGTH_24 (1) - 24 bit
        /// RSUPV_GEN_I2S_WLENGTH_64 (2) - 32 bit
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorWordLength(out int Word_Length)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorWordLength(this._handle, out Word_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to set the sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) The sampling frequency corresponds to the frequency of the FSYNC signal. All frequency information of generated audio data are with reference to this setting. If the I2S generator is operated with external wordclock synchronization and the frequency of the external clock signal does not correspond to the set sampling frequency, the I2S generator generates audio data with an incorrect frequency. Even with external masterclock synchronization, the external clock signal must correspond to the set sampling frequency multiplied by the selected MClk ratio. Otherwise, the I2S generator also generates audio data with an incorrect frequency.
        /// 
        /// (3) Sampling frequency 384 kHz is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE F08 | F11 | F16 | F22 | F32 | F44 | F48 | F88 | F96 | F176 | F192 | F384 | VALue
        /// OUTPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control sets the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_48 (6)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sampling rate entry.
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sampling rate value.
        /// 
        /// Valid Range: 6.75e3 to 410e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorSampleFrequency(int Sample_Frequency, double Variable_Sample_Frequency)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorSampleFrequency(this._handle, Sample_Frequency, Variable_Sample_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the bit clock frequency.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLK:FREQuency? 
        /// </summary>
        /// <param name="BClk_Freq">
        /// This control returns the bit clock frequency.
        /// 
        /// Valid Range: 216 to 12.80e+3 kHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorBClkFrequency(out double BClk_Freq)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorBClkFrequency(this._handle, out BClk_Freq);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE?
        /// OUTPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control gets the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_GEN_I2S_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control gets variable sampling rate value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorSampleFrequency(out int Sample_Frequency, out double Variable_Sample_Frequency)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorSampleFrequency(this._handle, out Sample_Frequency, out Variable_Sample_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ratio between MCLK and FSYNC.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCLKratio M64 | M96 | M128 | M192 | M256 | M384 | M512
        /// </summary>
        /// <param name="MClk_Ratio">
        /// This control selects the ratio between MCLK and FSYNC.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_MCLK_RATIO_64   (0) - 64
        /// RSUPV_GEN_I2S_MCLK_RATIO_96   (1) - 96
        /// RSUPV_GEN_I2S_MCLK_RATIO_128  (2) - 128
        /// RSUPV_GEN_I2S_MCLK_RATIO_192  (3) - 192
        /// RSUPV_GEN_I2S_MCLK_RATIO_256  (4) - 256
        /// RSUPV_GEN_I2S_MCLK_RATIO_384  (5) - 384
        /// RSUPV_GEN_I2S_MCLK_RATIO_512  (6) - 512
        /// 
        /// Default Value: RSUPV_GEN_I2S_MCLK_RATIO_128  (2)
        /// 
        /// Notes:
        /// 
        /// (1) With word length 16 bits these values are avaible: 64, 128, 256, 512.
        /// 
        /// (2) With word length 24 bits these values are avaible: 96, 192, 384.
        /// 
        /// (3) With word length 32 bits these values are avaible: 128, 256, 512.
        /// 
        /// (4) The value range is limited by word length and sampling frequency.
        /// 
        /// Word Length 16 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 24 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    192, 384
        /// &gt;108 kHz to 216 kHz    192
        /// 
        /// Word Length 32 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorMClkRatio(int MClk_Ratio)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorMClkRatio(this._handle, MClk_Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ratio between MCLK and FSYNC.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCLKratio?
        /// </summary>
        /// <param name="MClk_Ratio">
        /// This control returns the ratio between MCLK and FSYNC.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_MCLK_RATIO_64   (0) - 64
        /// RSUPV_GEN_I2S_MCLK_RATIO_96   (1) - 96
        /// RSUPV_GEN_I2S_MCLK_RATIO_128  (2) - 128
        /// RSUPV_GEN_I2S_MCLK_RATIO_192  (3) - 192
        /// RSUPV_GEN_I2S_MCLK_RATIO_256  (4) - 256
        /// RSUPV_GEN_I2S_MCLK_RATIO_384  (5) - 384
        /// RSUPV_GEN_I2S_MCLK_RATIO_512  (6) - 512
        /// 
        /// Notes:
        /// 
        /// (1) With word length 16 bits these values are avaible: 64, 128, 256, 512.
        /// 
        /// (2) With word length 24 bits these values are avaible: 96, 192, 384.
        /// 
        /// (3) With word length 32 bits these values are avaible: 128, 256, 512.
        /// 
        /// (4) The value range is limited by word length and sampling frequency.
        /// 
        /// Word Length 16 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Intern:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 24 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    192, 384
        /// &gt;108 kHz to 216 kHz    192
        /// 
        /// Word Length 32 bit, Sync To Extern Masterclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// 
        /// Word Length 16 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    64, 128, 256, 512
        /// &gt;108 kHz to 216 kHz    64, 128, 256
        /// &gt;216 kHz to 410 kHz    64, 128
        /// 
        /// Word Length 24 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    96, 192, 384
        /// &gt;108 kHz to 216 kHz    96, 192
        /// 
        /// Word Length 32 bit, Sync To Extern Wordclk:
        /// Sampling frequency     Selectable MClk ratio
        /// 6.75 kHz to 108 kHz    128, 256, 512
        /// &gt;108 kHz to 216 kHz    128, 256
        /// &gt;216 kHz to 410 kHz    128
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorMClkRatio(out int MClk_Ratio)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorMClkRatio(this._handle, out MClk_Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Resolution of audio data within a frame.
        /// If the wordwidth is reduced, the values of the audio samples are rounded off to the specified wordwidth. Unused data bits are encoded as zeroes in the digital audio signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control sets the audio bits.
        /// 
        /// Valid Range: 8 to Word Length
        /// 
        /// Default Value: 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorAudioBits(int Audio_Bits)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorAudioBits(this._handle, Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the audio bits.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits?
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control returns the audio bits.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorAudioBits(out int Audio_Bits)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorAudioBits(this._handle, out Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the I2S generator function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FORMat SI2S | USERdefined
        /// </summary>
        /// <param name="Format">
        /// This control selects the I2S generator function.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FORMAT_SI2S  (0) - Standard I2S
        /// RSUPV_GEN_I2S_FORMAT_USER  (1) - User Definable
        /// 
        /// Default Value: RSUPV_GEN_I2S_FORMAT_SI2S  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Standard I2S: The I2S generator transmits in the standard I2S format. The following parameters are assigned a fixed default:
        /// Fsync Shape:    Square Pulse
        /// Fsync Polarity: Left(1) = Low
        /// Word Offset:    -1
        /// 
        /// (2) User Definable: I2S generator transmits in I2S-like format. The following format-influencing parameters are additionally available:
        /// Fsync Shape
        /// Fsync Polarity
        /// Word Offset
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorFormat(int Format)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorFormat(this._handle, Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the I2S generator function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:VIDeo:FORMat?
        /// </summary>
        /// <param name="Format">
        /// This control returns the I2S generator function.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FORMAT_SI2S  (0) - Standard I2S
        /// RSUPV_GEN_I2S_FORMAT_USER  (1) - User Definable
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorFormat(out int Format)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorFormat(this._handle, out Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the FSYNC signal form.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) This function is available only when function Set I2S Generator Format is set to User Definable.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FSHape SQUpuls | BITPulse
        /// </summary>
        /// <param name="Fsync_Shape">
        /// This control selects the FSYNC signal form.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_SQUARE  (0) - Square Pulse
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_BIT     (1) - Bit Pulse
        /// 
        /// Default Value: RSUPV_GEN_I2S_FSYNC_SHAPE_SQUARE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Square Pulse: The FSYNC signal is transmitted as a symmetrical rectangle.
        /// 
        /// (2) Bit Pulse: The FSYNC signal is transmitted as a bit pulse.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorFsyncShape(int Fsync_Shape)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorFsyncShape(this._handle, Fsync_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the FSYNC signal form.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FSHape?
        /// </summary>
        /// <param name="Fsync_Shape">
        /// This control returns the FSYNC signal form.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_SQUARE  (0) - Square Pulse
        /// RSUPV_GEN_I2S_FSYNC_SHAPE_BIT     (1) - Bit Pulse
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorFsyncShape(out int Fsync_Shape)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorFsyncShape(this._handle, out Fsync_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the FSYNC signal polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) This function is available only when function Set I2S Generator Format is set to User Definable.
        /// 
        /// (3) If Fsync Shape is set to Square Pulse, the following selection is available: LFTL, LFTH.
        /// 
        /// (4) If Fsync Shape is set to to Bit Pulse, the following selection is available: POS, NEG
        /// 
        /// Remote-control command(s):
        /// OUTPut:POLarity LFTL | LFTH | POS | NEG
        /// </summary>
        /// <param name="Fsync_Polarity">
        /// This control selects the FSYNC signal polarity.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTL  (0) - Left (1) = Low
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTH  (1) - Left (1) = High
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_POS   (2) - Positive
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_NEG   (3) - Negative
        /// 
        /// Default Value: RSUPV_GEN_I2S_FSYNC_POLARITY_LFTL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) If Fsync Shape is set to Square Pulse, the following selection is available: Left (1) = Low, Left (1) = High.
        /// 
        /// (2) If Fsync Shape is set to to Bit Pulse, the following selection is available: Positive, Negative.
        /// 
        /// (3) Left (1) = Low: While the left channel (channel 1) is being sent, a low level is applied at the FSYNC signal at a word offset of 0.
        /// 
        /// (4) Left (1) = High: While the left channel (channel 1) is being sent, a high level is applied at the FSYNC signal at a word offset of 0.
        /// 
        /// (5) Positive: At a Word Offset of 0, a positive pulse marks the beginning of the left data word.
        /// 
        /// (6) Negative: At a Word Offset of 0, a negative pulse marks the beginning of the left data word.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorFsyncPolarity(int Fsync_Polarity)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorFsyncPolarity(this._handle, Fsync_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the FSYNC signal polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:POLarity?
        /// </summary>
        /// <param name="Fsync_Polarity">
        /// This control returns the FSYNC signal polarity.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTL  (0) - Left (1) = Low
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_LFTH  (1) - Left (1) = High
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_POS   (2) - Positive
        /// RSUPV_GEN_I2S_FSYNC_POLARITY_NEG   (3) - Negative
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorFsyncPolarity(out int Fsync_Polarity)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorFsyncPolarity(this._handle, out Fsync_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the the number of SCK clock cycles by which the Fsync signal transmission is delayed relative to the audio data.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) This function is available only when function Set I2S Generator Format is set to User Definable.
        /// 
        /// Remote-control command(s):
        /// OUTPut:WRDOffset &lt;n&gt;
        /// </summary>
        /// <param name="Word_Offset">
        /// This control sets the the number of SCK clock cycles by which the Fsync signal transmission is delayed relative to the audio data.
        /// 
        /// Valid Values:
        /// -"Word Length" to +"Word Length"-1
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SGeneratorWordOffset(int Word_Offset)
        {
            int pInvokeResult = PInvoke.SetI2SGeneratorWordOffset(this._handle, Word_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the the number of SCK clock cycles by which the Fsync signal transmission is delayed relative to the audio data.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:WRDOffset?
        /// </summary>
        /// <param name="Word_Offset">
        /// This control gets the the number of SCK clock cycles by which the Fsync signal transmission is delayed relative to the audio data.
        /// 
        /// Valid Values:
        /// -"Word Length" to +"Word Length"-1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SGeneratorWordOffset(out int Word_Offset)
        {
            int pInvokeResult = PInvoke.GetI2SGeneratorWordOffset(this._handle, out Word_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures clock and mixed sample frequency of USI generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CLOCk GATed | CONTinous
        /// OUTPut:MSAMplefrequency ON | OFF
        /// OUTPut:RATio
        /// </summary>
        /// <param name="Clock">
        /// This control selects continuous clock or gated clock operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// 
        /// Default Value: RSUPV_CLOCK_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous: Prerequisite for the continuous clock mode is a continuous clock for the analyzer. The clock source may be internal or external. If synchronization is external, several types of synchronization are available for selection.
        /// 
        /// (2) Gated: The gated clock mode must be selected if the externally supplied bit clock (BClk) and FrameSync (Fsync) are discontinuous or have such a large jitter that the internal PLL can no longer follow this clock. In this operating mode, synchronisation is limited to the external FrameSync &amp; bit clock (Ext Fsync&amp;BClk) option. The audio signal generated cannot be monitored.
        /// </param>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control enables or disables use of mixed sampling frequency. Used to produce data streams of varying sampling rates in both generator channels.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Ratio">
        /// This control selects down-sampling factor for 2nd generator channel with regard to the sampling rate.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// 
        /// Default Value: 2
        /// 
        /// Note(s):
        /// 
        /// (1) This control is valid only if Mixed Sampling Frequency = On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorClockAndFrequency(int Clock, bool Mixed_Sampling_Frequency, int Ratio)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorClockAndFrequency(this._handle, Clock, System.Convert.ToUInt16(Mixed_Sampling_Frequency), Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures generator frame parameters.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SPFRame
        /// OUTPut:NOSLots
        /// </summary>
        /// <param name="Samples">
        /// This control defines the number of samples of a generator channel per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Slots">
        /// This control selects number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorFrame(int Samples, int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorFrame(this._handle, Samples, Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines which signal is output on the individual slots of the selected data line. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:TXData&lt;1...4&gt;
        /// </summary>
        /// <param name="Data_Line">
        /// This control selects data line.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Signal_Type">
        /// Defines which signal is output on the individual slots of the selected data line.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorTxData(int Data_Line, string Signal_Type)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorTxData(this._handle, Data_Line, Signal_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source to which the USI dual channel generator is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:SYNC:TO ICLock | EMASterclock | EFSYnc | EFAMon | EFBClk
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects the source to which the USI dual channel generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_SYNC_INT_CLK  (0) - Internal Clock
        /// RSUPV_DUAL_SYNC_EXT_MCLK (1) - Ext Masterclk
        /// RSUPV_DUAL_SYNC_EXT_FSYN (2) - Ext Fsync
        /// RSUPV_DUAL_SYNC_EXT_FAM  (3) - Ext Fsync (AudMod)
        /// RSUPV_DUAL_SYNC_EXT_FBCL (4) - Ext Fsync &amp; Bclk
        /// 
        /// Default Value: RSUPV_DUAL_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Intern CLK: The generator uses the internal clock.
        /// 
        /// (2) Ext Masterclk: Synchronization to the externally supplied 
        /// master clock signal at the rear TX MCLK IN connector.
        /// 
        /// (3) Ext Fsync: Synchronises to the external FrameSync signal (TX_FSYNC_IN). The generator signal cannot be audio-monitored. A master clock signal is additionally generated and output.
        /// 
        /// (4) Ext Fsync (AudMon): Synchronises to the external FrameSync (TX_FSYNC_IN) signal. The generator signal can be audio-monitored. No master clock signal is ouptut.
        /// 
        /// (5) Ext Fsync&amp;BClk: Synchronises to the external FrameSync (TX_FSYNC_IN) and bit clock (TX_BCLK_IN) signals.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSyncTo(int Sync_To)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSyncTo(this._handle, Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures slot layout. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FBIT MSB | LSB
        /// OUTPut:SLTLength
        /// OUTPut:AUDiobits
        /// OUTPut:LBITs
        /// </summary>
        /// <param name="First_Bit">
        /// This control defines the sequence in which the data bits are transmitted. 
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// 
        /// Default Value: RSUPV_DUAL_BIT_MSB (0)
        /// 
        /// Note(s):
        /// 
        /// (1) MSB: The most significant bit is transmitted first.
        /// 
        /// (2) LSB: The least significant bit is transmitted first.
        /// </param>
        /// <param name="Slot_Length">
        /// This control sets slot length of a slot including gaps ( 0 bits). 
        /// 
        /// Valid Values:
        /// 8 to 256
        /// 
        /// Default Value: 32
        /// </param>
        /// <param name="Audio_Bits">
        /// This control sets slot length of the audio data within a slot (sub-frame). Unused data bits are coded as zeros in the digital audio signal.
        /// 
        /// Valid Range: 8 to Slot Length (max 32)
        /// 
        /// Default Value: 16
        /// </param>
        /// <param name="Lead_Bits">
        /// This control defines the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// If LSB is selected as first bit the lead bits setting is automatically corrected if the audio bits setting is changed so that the MSB is transmitted in the same position. This has the advantage that the resolution of the signal transmitted is changed but not the amplitude if the audio bits are changed.
        /// 
        /// Valid Range: 0 to Slot Length - Audio Bits
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorSlot(int First_Bit, int Slot_Length, int Audio_Bits, int Lead_Bits)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorSlot(this._handle, First_Bit, Slot_Length, Audio_Bits, Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to set the sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) All frequency specifications of the audio data transmitted refer to this setting. If the USI generator is operated with external synchronisation and the frequency of the external clock signal does not correspond to the set frequency of the Fsync signal, the generator generates signals with the wrong frequency.
        /// For data formats with one sample per frame, the sample frequency corresponds to the FSync signal frequency. In the case of several audio data samples from one source within a frame, the frequency of the FSync signal results from the sample frequency divided by the samples/frame factor.
        /// 
        /// (2) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE F08 | F11 | F16 | F22 | F32 | F44 | F48 | F88 | F96 | F176 | F192 | F384 | VALue
        /// OUTPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control sets the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_48 (6)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sampling rate entry.
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sampling rate value.
        /// 
        /// All frequency specifications of the audio data transmitted refer to this setting. If the USI generator is operated with external synchronisation and the frequency of the external clock signal does not correspond to the set frequency of the Fsync signal, the generator generates signals with the wrong frequency.
        /// For data formats with one sample per frame, the sample frequency corresponds to the FSync signal frequency. In the case of several audio data samples from one source within a frame, the frequency of the FSync signal results from the sample frequency divided by the samples/frame factor.
        /// 
        /// Valid Range: 8.4375E+2 Hz to 400E+3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Variable Sample Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSampleFrequency(int Sample_Frequency, double Variable_Sample_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSampleFrequency(this._handle, Sample_Frequency, Variable_Sample_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures Frame Synchronization parameters. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FWIDth ONEBit | ONESlot | SQUare | VALue
        /// OUTPut:FWIDth:VALue
        /// OUTPut:FOFFset
        /// OUTPut:FSLope RISing | FALLing
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control selects width of the FSYNC pulse.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_SLOT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) 1 bit: The FSYNC pulse is one data bit in length (BClk period).
        /// 
        /// (2) 1 slot: The FSYNC pulse is the length of an audio channel (= slot length).
        /// 
        /// (3) Square: The FSYNC pulse has the shape of a symmetrical rectangle. If the number of the slot?s bit clock (BClk) cycles is odd the high phase is one cycle longer than the low phase (if Fsync slope = rising)
        /// 
        /// (4) Value: The length of the FSYNC pulse corresponds to the numeric value in data bits (BClk periods).
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control sets variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <param name="Fsync_Offset">
        /// This control determines the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="Fsync_Slope">
        /// This control selects polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorFsync(int Fsync_Width, int Variable_Fsync_Width, int Fsync_Offset, int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorFsync(this._handle, Fsync_Width, Variable_Fsync_Width, Fsync_Offset, Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures slot clock parameters. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCWidth ONEBit | SQUare | VALue
        /// OUTPut:SLCWidth:VALue
        /// OUTPut:SLCOffset
        /// OUTPut:SLCSlope RISing | FALLing
        /// </summary>
        /// <param name="SlClk_Width">
        /// This control selects slot clock pulse width.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_BIT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) 1 bit: The SlClk pulse is one data bit in length (BClk period).
        /// 
        /// (2) Square: The SlClk pulse has the shape of a symmetrical rectangle. If the number of the slot?s bit clock (BClk) cycles is odd the high phase is one cycle longer than the low phase (with SlClk slope = rising).
        /// 
        /// (3) Value: The length of the SlClk pulse corresponds to the numeric value in data bits (BClk periods) 
        /// </param>
        /// <param name="Variable_SlClk_Width">
        /// This control sets variable slot clock pulse width.
        /// 
        /// Valid Range: 1 to Slot Length-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if SlClk Width = Value
        /// </param>
        /// <param name="SlClk_Offset">
        /// This control determines the slot clock (SlClk) offset relative to the start of the slot. 
        /// 
        /// Valid Range: -Slot Length ... + Slot Length-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="SlClk_Slope">
        /// This control selects slot clock (SlClk) pulse polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorSlClk(int SlClk_Width, int Variable_SlClk_Width, int SlClk_Offset, int SlClk_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorSlClk(this._handle, SlClk_Width, Variable_SlClk_Width, SlClk_Offset, SlClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures bit clock and master clock jitter.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITFrequency
        /// OUTPut:BCLock:JITAmplitude
        /// OUTPut:MCLock:JITFrequency
        /// OUTPut:MCLock:JITAmplitude
        /// </summary>
        /// <param name="BClk_Jitter_Frequency">
        /// This control sets jitter oscillator frequency. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// </param>
        /// <param name="BClk_Jitter_Amplitude">
        /// This control sets jitter oscillator's peak amplitude. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// 
        /// Default Value: 0.0 Ul
        /// 
        /// </param>
        /// <param name="MClk_Jitter_Frequency">
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. The jitter oscillator frequency is set with this parameter.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <param name="MClk_Jitter_Amplitude">
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. This parameter determines the jitter oscillator peak amplitude.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// 
        /// Default Value: 0.0 Ul
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIGeneratorJitter(double BClk_Jitter_Frequency, double BClk_Jitter_Amplitude, double MClk_Jitter_Frequency, double MClk_Jitter_Amplitude)
        {
            int pInvokeResult = PInvoke.ConfigureUSIGeneratorJitter(this._handle, BClk_Jitter_Frequency, BClk_Jitter_Amplitude, MClk_Jitter_Frequency, MClk_Jitter_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Using this function triggers renewed synchronisation of the generator. If this is synchronised externally, this function must be called once after applying the external clock signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:RESYnc ONCE
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int USIGeneratorResync()
        {
            int pInvokeResult = PInvoke.USIGeneratorResync(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects continuous clock or gated clock operating mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CLOCk GATed | CONTinous
        /// </summary>
        /// <param name="Clock">
        /// This control selects continuous clock or gated clock operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// 
        /// Default Value: RSUPV_CLOCK_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous: Prerequisite for the continuous clock mode is a continuous clock for the generator. The clock source may be internal or external. If synchronization is external, several types of synchronization are available for selection.
        /// 
        /// (2) Gated: The gated clock operating mode must be selected if the externally supplied bit clock (BClk) and the externally supplied word clock (Fsync) are discontinuous or have such a large jitter that the internal PLL can no longer follow this clock. The synchronisation type is limited to the "external word clock and bit clock" (Ext Fsync&amp;BClk) mode. Audio monitoring of the audio signal generated is not possible.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorClock(int Clock)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorClock(this._handle, Clock);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries clock operating mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CLOCk?
        /// </summary>
        /// <param name="Clock">
        /// This control returns clock operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorClock(out int Clock)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorClock(this._handle, out Clock);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables use of mixed sampling frequency. Used to produce data streams of varying sampling rates in both generator channels. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MSAMplefrequency ON | OFF
        /// </summary>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control enables or disables use of mixed sampling frequency. Used to produce data streams of varying sampling rates in both generator channels.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorMixedSamplingFrequencyState(bool Mixed_Sampling_Frequency)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorMixedSamplingFrequencyState(this._handle, System.Convert.ToUInt16(Mixed_Sampling_Frequency));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries state of mixed sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MSAMplefrequency?
        /// </summary>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control returns the state of mixed sampling frequency.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorMixedSamplingFrequencyState(out bool Mixed_Sampling_Frequency)
        {
            ushort Mixed_Sampling_FrequencyAsUShort;
            int pInvokeResult = PInvoke.GetUSIGeneratorMixedSamplingFrequencyState(this._handle, out Mixed_Sampling_FrequencyAsUShort);
            Mixed_Sampling_Frequency = System.Convert.ToBoolean(Mixed_Sampling_FrequencyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects down-sampling factor for 2nd generator channel with regard to the sampling rate.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:RATio
        /// </summary>
        /// <param name="Ratio">
        /// This control selects down-sampling factor for 2nd generator channel with regard to the sampling rate.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorRatio(int Ratio)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorRatio(this._handle, Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries down-sampling factor for 2nd generator channel with regard to the sampling rate.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:RATio?
        /// </summary>
        /// <param name="Ratio">
        /// This control returns down-sampling factor for 2nd generator channel with regard to the sampling rate.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorRatio(out int Ratio)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorRatio(this._handle, out Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the number of samples of a generator channel per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SPFRame
        /// </summary>
        /// <param name="Samples">
        /// This control defines the number of samples of a generator channel per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSamplesPerFrame(int Samples)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSamplesPerFrame(this._handle, Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of samples of a generator channel per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SPFRame?
        /// </summary>
        /// <param name="Samples">
        /// This control returns the number of samples of a generator channel per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSamplesPerFrame(out int Samples)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSamplesPerFrame(this._handle, out Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects number of slots per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:NOSLots
        /// </summary>
        /// <param name="Number_Of_Slots">
        /// This control selects number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorNumberOfSlots(int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorNumberOfSlots(this._handle, Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries number of slots per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:NOSLots?
        /// </summary>
        /// <param name="Number_Of_Slots">
        /// This control returns number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorNumberOfSlots(out int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorNumberOfSlots(this._handle, out Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries which signal is output on the individual slots of the selected data line.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:TXData&lt;1...4&gt;?
        /// </summary>
        /// <param name="Data_Line">
        /// This control selects data line.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// This control defines size of 'Signal Type' array.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Signal_Type">
        /// Returns which signal is output on the individual slots of the selected data line.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorTxData(int Data_Line, int Array_Size, System.Text.StringBuilder Signal_Type)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorTxData(this._handle, Data_Line, Array_Size, Signal_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the source to which the USI dual channel generator is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:SYNC:TO?
        /// </summary>
        /// <param name="Sync_To">
        /// This control returns the source to which the USI dual channel generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_SYNC_INT_CLK  (0) - Internal Clock
        /// RSUPV_DUAL_SYNC_EXT_MCLK (1) - Ext Masterclk
        /// RSUPV_DUAL_SYNC_EXT_FSYN (2) - Ext Fsync
        /// RSUPV_DUAL_SYNC_EXT_FAM  (3) - Ext Fsync (AudMod)
        /// RSUPV_DUAL_SYNC_EXT_FBCL (4) - Ext Fsync &amp; Bclk
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSyncTo(out int Sync_To)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSyncTo(this._handle, out Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the sequence in which the data bits are transmitted.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FBIT MSB | LSB
        /// </summary>
        /// <param name="First_Bit">
        /// This control defines the sequence in which the data bits are transmitted. 
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// 
        /// Default Value: RSUPV_DUAL_BIT_MSB (0)
        /// 
        /// Note(s):
        /// 
        /// (1) MSB: The most significant bit is transmitted first.
        /// 
        /// (2) LSB: The least significant bit is transmitted first.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorFirstBit(int First_Bit)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorFirstBit(this._handle, First_Bit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function the sequence in which the data bits are transmitted.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FBIT?
        /// </summary>
        /// <param name="First_Bit">
        /// This control returns the sequence in which the data bits are transmitted.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorFirstBit(out int First_Bit)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorFirstBit(this._handle, out First_Bit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets slot length of a slot including gaps (0 bits).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLTLength
        /// </summary>
        /// <param name="Slot_Length">
        /// This control sets slot length of a slot including gaps (0 bits). 
        /// 
        /// Valid Values:
        /// 8 to 256
        /// 
        /// Default Value: 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSlotLength(int Slot_Length)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSlotLength(this._handle, Slot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot length of a slot including gaps (0 bits).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLTLength?
        /// </summary>
        /// <param name="Slot_Length">
        /// This control returns slot length of a slot including gaps ( 0 bits).
        /// 
        /// Valid Values:
        /// 8 to 256
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSlotLength(out int Slot_Length)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSlotLength(this._handle, out Slot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets slot length of the audio data within a slot (sub-frame). Unused data bits are coded as zeros in the digital audio signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control sets slot length of the audio data within a slot (sub-frame). Unused data bits are coded as zeros in the digital audio signal.
        /// 
        /// Valid Range: 8 to Slot Length (max 32)
        /// 
        /// Default Value: 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorAudioBits(int Audio_Bits)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorAudioBits(this._handle, Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot length of the audio data within a slot (sub-frame).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:AUDiobits?
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control returns slot length of the audio data within a slot (sub-frame).
        /// 
        /// Valid Range: 8 to 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorAudioBits(out int Audio_Bits)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorAudioBits(this._handle, out Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// If LSB is selected as first bit the lead bits setting is automatically corrected if the audio bits setting is changed so that the MSB is transmitted in the same position. This has the advantage that the resolution of the signal transmitted is changed but not the amplitude if the audio bits are changed.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LBITs
        /// </summary>
        /// <param name="Lead_Bits">
        /// This control defines the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// If LSB is selected as first bit the lead bits setting is automatically corrected if the audio bits setting is changed so that the MSB is transmitted in the same position. This has the advantage that the resolution of the signal transmitted is changed but not the amplitude if the audio bits are changed.
        /// 
        /// Valid Range: 0 to Slot Length - Audio Bits
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorLeadBits(int Lead_Bits)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorLeadBits(this._handle, Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LBITs?
        /// </summary>
        /// <param name="Lead_Bits">
        /// This control returns the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// Valid Range: 0 to Slot Length - Audio Bits
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorLeadBits(out int Lead_Bits)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorLeadBits(this._handle, out Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to query the sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SAMPle:MODE?
        /// OUTPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control returns the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control returns variable sampling rate value.
        /// 
        /// Valid Range: 8.4375E+2 Hz to 400E+3 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Variable Sample Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSampleFrequency(out int Sample_Frequency, out double Variable_Sample_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSampleFrequency(this._handle, out Sample_Frequency, out Variable_Sample_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries Frame Sync frequency which corresponds to the sampling frequncy divided by the samples/frame factor. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FSYNc:FREQuency?
        /// </summary>
        /// <param name="Fsync_Frequency">
        /// This control returns Frame Sync frequency which corresponds to the sampling frequncy divided by the samples/frame factor. Value is in kHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorFsyncFrequency(out double Fsync_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorFsyncFrequency(this._handle, out Fsync_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries bit clock frequency. Is calculated from the product of channel length * no of slots * sample freq / samples/frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLk:FREQuency?
        /// </summary>
        /// <param name="BClk_Frequency">
        /// This control returns bit clock frequency. Is calculated from the product of channel length * no of slots * sample freq / samples/frame. Value is in kHz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorBClkFrequency(out double BClk_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorBClkFrequency(this._handle, out BClk_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects width of the FSYNC pulse
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FWIDth ONEBit | ONESlot | SQUare | VALue
        /// OUTPut:FWIDth:VALue
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control selects width of the FSYNC pulse.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_SLOT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) 1 bit: The FSYNC pulse is one data bit in length (BClk period).
        /// 
        /// (2) 1 slot: The FSYNC pulse is the length of an audio channel (= slot length).
        /// 
        /// (3) Square: The FSYNC pulse has the shape of a symmetrical rectangle. If the number of the slot?s bit clock (BClk) cycles is odd the high phase is one cycle longer than the low phase (if Fsync slope = rising)
        /// 
        /// (4) Value: The length of the FSYNC pulse corresponds to the numeric value in data bits (BClk periods).
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control sets variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorFsyncWidth(int Fsync_Width, int Variable_Fsync_Width)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorFsyncWidth(this._handle, Fsync_Width, Variable_Fsync_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries width of the FSYNC pulse
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FWIDth?
        /// OUTPut:FWIDth:VALue?
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control returns width of the FSYNC pulse.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control returns variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorFsyncWidth(out int Fsync_Width, out int Variable_Fsync_Width)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorFsyncWidth(this._handle, out Fsync_Width, out Variable_Fsync_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the offset of the Fsync pulse relative to the reference point (start of the first slot).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FOFFset
        /// </summary>
        /// <param name="Fsync_Offset">
        /// This control determines the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorFsyncOffset(int Fsync_Offset)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorFsyncOffset(this._handle, Fsync_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset of the Fsync pulse relative to the reference point (start of the first slot).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FOFFset?
        /// </summary>
        /// <param name="Fsync_Offset">
        /// This control queries the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorFsyncOffset(out int Fsync_Offset)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorFsyncOffset(this._handle, out Fsync_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects polarity of the Fsync pulse.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FSLope RISing | FALLing
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control selects polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorFsyncSlope(int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorFsyncSlope(this._handle, Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries polarity of the Fsync pulse.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:FSLope?
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control returns polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorFsyncSlope(out int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorFsyncSlope(this._handle, out Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects bit clock polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BSLope RISing | FALLing
        /// </summary>
        /// <param name="BClk_Slope">
        /// This control selects bit clock polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Rising: The TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1, TX_DATA2, TX_DATA3 and TX_DATA4 signals are sampled with a rising bit clock edge (relative to TX_BCLK_IN in slave mode or TX_BCLK_OUT in master operation and with internal synchronisation).
        /// In case of external synchronisation the TX_FSYNC_IN signal is always sampled with the reverse bit clock edge (TX_BCLK_IN). In this case with the falling edge of the external bit clock signal.
        /// 
        /// (2) Falling: The TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1, TX_DATA2, TX_DATA3 and TX_DATA4 signals are sampled with a falling bit clock edge (relative to TX_BCLK_IN in slave mode or TX_BCLK_OUT in master operation and with internal synchronisation).
        /// In case of external synchronisation, the TX_FSYNC_IN signal is always with the reverse bit clock edge (TX_BCLK_IN). In this case with the rising edge of the external bit clock signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorBClkSlope(int BClk_Slope)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorBClkSlope(this._handle, BClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries bit clock polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BSLope?
        /// </summary>
        /// <param name="BClk_Slope">
        /// This control returns bit clock polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorBClkSlope(out int BClk_Slope)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorBClkSlope(this._handle, out BClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects slot clock pulse width.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCWidth ONEBit | SQUare | VALue
        /// OUTPut:SLCWidth:VALue
        /// </summary>
        /// <param name="SlClk_Width">
        /// This control selects slot clock pulse width.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_BIT (0)
        /// 
        /// Note(s):
        /// 
        /// (1) 1 bit: The SlClk pulse is one data bit in length (BClk period).
        /// 
        /// (2) Square: The SlClk pulse has the shape of a symmetrical rectangle. If the number of the slot?s bit clock (BClk) cycles is odd the high phase is one cycle longer than the low phase (with SlClk slope = rising).
        /// 
        /// (3) Value: The length of the SlClk pulse corresponds to the numeric value in data bits (BClk periods) 
        /// </param>
        /// <param name="Variable_SlClk_Width">
        /// This control sets variable slot clock pulse width.
        /// 
        /// Valid Range: 1 to Slot Length-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if SlClk Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSlClkWidth(int SlClk_Width, int Variable_SlClk_Width)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSlClkWidth(this._handle, SlClk_Width, Variable_SlClk_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot clock pulse width.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCWidth?
        /// OUTPut:SLCWidth:VALue?
        /// </summary>
        /// <param name="SlClk_Width">
        /// This control returns slot clock pulse width.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// </param>
        /// <param name="Variable_SlClk_Width">
        /// This control returns variable slot clock pulse width.
        /// 
        /// Valid Range: 1 to Slot Length-1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if SlClk Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSlClkWidth(out int SlClk_Width, out int Variable_SlClk_Width)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSlClkWidth(this._handle, out SlClk_Width, out Variable_SlClk_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the slot clock (SlClk) offset relative to the start of the slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCOffset
        /// </summary>
        /// <param name="SlClk_Offset">
        /// This control determines the slot clock (SlClk) offset relative to the start of the slot.
        /// 
        /// Valid Range: -Slot Length ... + Slot Length-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSlClkOffset(int SlClk_Offset)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSlClkOffset(this._handle, SlClk_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the slot clock (SlClk) offset relative to the start of the slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCOffset?
        /// </summary>
        /// <param name="SlClk_Offset">
        /// This control returns the slot clock (SlClk) offset relative to the start of the slot. 
        /// 
        /// Valid Range: -Slot Length ... + Slot Length-1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSlClkOffset(out int SlClk_Offset)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSlClkOffset(this._handle, out SlClk_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects slot clock (SlClk) pulse polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCSlope RISing | FALLing
        /// </summary>
        /// <param name="SlClk_Slope">
        /// This control selects slot clock (SlClk) pulse polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorSlClkSlope(int SlClk_Slope)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorSlClkSlope(this._handle, SlClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot clock (SlClk) pulse polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:SLCSlope?
        /// </summary>
        /// <param name="SlClk_Slope">
        /// This control returns slot clock (SlClk) pulse polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorSlClkSlope(out int SlClk_Slope)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorSlClkSlope(this._handle, out SlClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MRATio
        /// </summary>
        /// <param name="Ratio">
        /// This control defines relationship between the master clock (MCLK) and the FrameSync (FSYNC). 
        /// 
        /// Valid Values:
        /// 16 to 768
        /// 
        /// Default Value: 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorMClkRatio(int Ratio)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorMClkRatio(this._handle, Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MRATio?
        /// </summary>
        /// <param name="Ratio">
        /// This control returns relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Valid Values:
        /// 16 to 768
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorMClkRatio(out int Ratio)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorMClkRatio(this._handle, out Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets jitter oscillator frequency. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITFrequency
        /// </summary>
        /// <param name="BClk_Jitter_Frequency">
        /// This control sets jitter oscillator frequency. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorBClkJitterFrequency(double BClk_Jitter_Frequency)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorBClkJitterFrequency(this._handle, BClk_Jitter_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries jitter oscillator frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITFrequency?
        /// </summary>
        /// <param name="BClk_Jitter_Frequency">
        /// This control returns jitter oscillator frequency.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorBClkJitterFrequency(out double BClk_Jitter_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorBClkJitterFrequency(this._handle, out BClk_Jitter_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets jitter oscillator's peak amplitude. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITAmplitude
        /// </summary>
        /// <param name="BClk_Jitter_Amplitude">
        /// This control sets jitter oscillator's peak amplitude. The generator output signals (TX_BCLK_OUT, TX_FSYNC_OUT, TX_SLCLK_OUT, TX_DATA1 to 4) can be jittered sinusoidally.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// 
        /// Default Value: 0.0 Ul
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorBClkJitterAmplitude(double BClk_Jitter_Amplitude)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorBClkJitterAmplitude(this._handle, BClk_Jitter_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries jitter oscillator's peak amplitude.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITAmplitude?
        /// </summary>
        /// <param name="BClk_Jitter_Amplitude">
        /// This control returns jitter oscillator's peak amplitude.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorBClkJitterAmplitude(out double BClk_Jitter_Amplitude)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorBClkJitterAmplitude(this._handle, out BClk_Jitter_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. The jitter oscillator frequency is set with this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCLock:JITFrequency
        /// </summary>
        /// <param name="MClk_Jitter_Frequency">
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. The jitter oscillator frequency is set with this parameter.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorMClkJitterFrequency(double MClk_Jitter_Frequency)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorMClkJitterFrequency(this._handle, MClk_Jitter_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries jitter oscillator frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCLock:JITFrequency?
        /// </summary>
        /// <param name="MClk_Jitter_Frequency">
        /// This control returns jitter oscillator frequency.
        /// 
        /// Valid Range:
        /// 100.0e-3 to 110.0e6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorMClkJitterFrequency(out double MClk_Jitter_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorMClkJitterFrequency(this._handle, out MClk_Jitter_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. This function determines the jitter oscillator peak amplitude.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCLock:JITAmplitude
        /// </summary>
        /// <param name="MClk_Jitter_Amplitude">
        /// The TX_MCLK_OUT generator signal can be jittered sinusoidally. This parameter determines the jitter oscillator peak amplitude.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// 
        /// Default Value: 0.0 Ul
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorMClkJitterAmplitude(double MClk_Jitter_Amplitude)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorMClkJitterAmplitude(this._handle, MClk_Jitter_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries jitter oscillator's peak amplitude.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:BCLock:JITAmplitude?
        /// </summary>
        /// <param name="MClk_Jitter_Amplitude">
        /// This control returns jitter oscillator's peak amplitude.
        /// 
        /// Valid Range:
        /// 0.0 to 2.5 Ul
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorMClkJitterAmplitude(out double MClk_Jitter_Amplitude)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorMClkJitterAmplitude(this._handle, out MClk_Jitter_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the generator logic voltage. Changing the voltage level causes the sample to be reloaded. The sample can be attached and disconnected and put back into operation during operation with this mechanism.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LOGVoltage MV0900 | MV1200 | MV1500 | MV1800 | MV2500 | MV3300
        /// 
        /// </summary>
        /// <param name="Logic_Voltage">
        /// This control sets the generator logic voltage. Changing the voltage level causes the sample to be reloaded. The sample can be attached and disconnected and put back into operation during operation with this mechanism.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_VOLTAGE_0V9 (0) - 0.9V
        /// RSUPV_VAL_VOLTAGE_1V2 (1) - 1.2V
        /// RSUPV_VAL_VOLTAGE_1V8 (2) - 1.8V
        /// RSUPV_VAL_VOLTAGE_2V5 (3) - 2.5V
        /// RSUPV_VAL_VOLTAGE_3V3 (4) - 3.3V
        /// 
        /// Default Value: RSUPV_VAL_VOLTAGE_3V3 (4)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorLogicVoltage(int Logic_Voltage)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorLogicVoltage(this._handle, Logic_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the generator logic voltage.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:LOGVoltage?
        /// </summary>
        /// <param name="Logic_Voltage">
        /// This control returns the generator logic voltage.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_VOLTAGE_0V9 (0) - 0.9V
        /// RSUPV_VAL_VOLTAGE_1V2 (1) - 1.2V
        /// RSUPV_VAL_VOLTAGE_1V8 (2) - 1.8V
        /// RSUPV_VAL_VOLTAGE_2V5 (3) - 2.5V
        /// RSUPV_VAL_VOLTAGE_3V3 (4) - 3.3V
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorLogicVoltage(out int Logic_Voltage)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorLogicVoltage(this._handle, out Logic_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets generator data coding regulation. A Law and micro Law quantification characteristics are available for telephony applications.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CODing NONE | ALAW | ULAW
        /// </summary>
        /// <param name="Coding">
        /// This control sets generator data coding regulation. A Law and micro Law quantification characteristics are available for telephony applications.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_CODING_NONE (0) - None
        /// RSUPV_VAL_CODING_ALAW (1) - A-Law
        /// RSUPV_VAL_CODING_ULAW (2) - u-Law
        /// 
        /// Default Value: RSUPV_VAL_CODING_NONE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIGeneratorCoding(int Coding)
        {
            int pInvokeResult = PInvoke.SetUSIGeneratorCoding(this._handle, Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries generator data coding regulation.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// OUTPut:CODing?
        /// </summary>
        /// <param name="Coding">
        /// This control returns generator data coding regulation.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_CODING_NONE (0) - None
        /// RSUPV_VAL_CODING_ALAW (1) - A-Law
        /// RSUPV_VAL_CODING_ULAW (2) - u-Law
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIGeneratorCoding(out int Coding)
        {
            int pInvokeResult = PInvoke.GetUSIGeneratorCoding(this._handle, out Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the HDMI generator audio parameters. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:AUDio:FORMat 
        /// OUTPut:CHANnel
        /// SOURce:SYNC:TO
        /// OUTPut:SAMPle:MODE
        /// OUTPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Audio_Format">
        /// Select the HDMI layout of the supplied audio data.
        /// 
        /// Valid Values:
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0) - PCM Lay 0
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L1 (1) - PCM Lay 1
        /// RSUPV_HDMI_AUDIO_FORMAT_DD     (2) - DD
        /// RSUPV_HDMI_AUDIO_FORMAT_DDP    (3) - DDP
        /// RSUPV_HDMI_AUDIO_FORMAT_DTS    (4) - DTS
        /// RSUPV_HDMI_AUDIO_FORMAT_DTHD   (5) - DTHD
        /// RSUPV_HDMI_AUDIO_FORMAT_DTSHD  (6) - DTSHd
        /// RSUPV_HDMI_AUDIO_FORMAT_DHDM   (7) - DHDMaster
        /// RSUPV_HDMI_AUDIO_FORMAT_DSD    (8) - DSD
        /// 
        /// Default Value: RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) PCM Lay 0 - 2 channels with PCM data or compressed audio.
        /// 
        /// (2) PCM Lay 1 - 8 channels with PCM data.
        /// </param>
        /// <param name="Channel">
        /// This control selects the left and right-hand digital audio channels.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CH_OFF   (0) - Off
        /// RSUPV_GEN_CH_1     (1) - 1
        /// RSUPV_GEN_CH_2     (2) - 2
        /// RSUPV_GEN_CH_21    (3) - 2 = 1
        /// RSUPV_GEN_CH_MULTI (5) - Multi
        /// 
        /// Default Value: RSUPV_GEN_CH_1 (1)
        /// 
        /// Notes:
        /// 
        /// (1) OFF: All channels are switched off. The frequency and level setting of the channels have no effect. Zero samples are being generated. 
        /// 
        /// (2) 1: Only the left-hand channel supplies the generator signal; the right-hand channel is deactivated.
        /// 
        /// (3) 2: Only the right-hand channel supplies the generator signal; the left-hand channel is deactivated.
        /// 
        /// (4) 2 = 1: Both the left and right-hand channel supply the same output signal. If the generator function "Stereo Sine" is selected, both channels may differ with regard to frequency, phase and amplitude.
        /// 
        /// (5) Multi: This option is offered only if the R&amp;S UPP-B4 option (HDMI and digital audio interfaces) for the 8-channel "I2S" generation is installed and enables the free configuration of up to 8 channels in the following parameter fields.
        /// 
        /// </param>
        /// <param name="Sync_To">
        /// This control selects source to which the digital audio generator is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SYNC_IN_HINT  (8) - Intern
        /// RSUPV_GEN_SYNC_IN_HAUX  (9) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_SYNC_IN_HINT (8)
        /// 
        /// Notes:
        /// 
        /// (1)  "Intern" -  All audio clocks are generated internally. The selection of the sampling rate is not affected by external signals.
        /// 
        /// (2) "Aux In"  -The audio master clock is determined by the audio signal supplied at the AUX IN socket, regardless of whether the sampling rate is supported by the video format selected in the HDMI generator or not.
        /// </param>
        /// <param name="Sample_Frequency">
        /// This control sets the clock rate of the digital audio signal for the generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SAMPLE_FREQ_64    (0) - 32 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_44    (1) - 44.1 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_48    (2) - 48 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_88    (3) - 88.2 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_96    (4) - 96 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_176   (5) - 176.4 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_192   (6) - 192 kHz
        /// RSUPV_GEN_SAMPLE_FREQ_VAL   (7) - Variable Sample Frequency
        /// RSUPV_GEN_SAMPLE_FREQ_SYNC  (8) - Sync To Anlr
        /// 
        /// Default Value: RSUPV_GEN_SAMPLE_FREQ_48 (2)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sampling rate entry.
        /// 
        /// (2) Sync To Anlr: If "Sync To Audio In" is set, the generator can be set to the digital analyzer sampling frequency. The sampling rate of the digital audio analyzer is used for synchronization.
        /// 
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sampling rate value.
        /// 
        /// Valid Range: 30.0e3 to 200.0e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureHDMIGeneratorAudio(int Audio_Format, int Channel, int Sync_To, int Sample_Frequency, double Variable_Sample_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureHDMIGeneratorAudio(this._handle, Audio_Format, Channel, Sync_To, Sample_Frequency, Variable_Sample_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the HDMI generator video parameters. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:SOURce INTern | AXINput
        /// SOURce:HDMI:VIDeo:RESolution
        /// SOURce:HDMI:VIDeo:COLor:DEPTh
        /// SOURce:HDMI:VIDeo:FREQuency
        /// </summary>
        /// <param name="Source">
        /// Selects the video source. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_INTERN  (0) - Intern
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_AUX_IN  (1) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_HDMI_VIDEO_SOURCE_INTERN (0)
        /// 
        /// Note(s):
        /// 
        /// (1) "Intern" -  The video data are internally generated. The test signal is selected via the "Pattern" parameter field.
        /// The "Internal" selection in conjunction with "Pattern" = "Lip Sync" automatically provides the "Lip Sync" generator function. The trigger pattern used for this measuring function must be generated internally.
        /// 
        /// (2) "Aux In" - The AUX IN socket can be used to supply externally generated video data, combined with the internally generated audio signals and output via the SOURCE socket.
        /// </param>
        /// <param name="Format_Resolution">
        /// Selects the horizontal and vertical resolution as well as the aspect ratio of the created video format according to the CEA-861 standard.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P640x480_4x3  (0)  - 640x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_4x3  (1)  - 720x576p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_16x9 (2)  - 720x576p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_4x3  (3)  - 720x576i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_16x9 (4)  - 720x576i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_4x3  (5)  - 720x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_16x9 (6)  - 720x480p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_4x3  (7)  - 720x480i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_16x9 (8)  - 720x480i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1280x720_16x9 (9) -  1280x720p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1920x1080_16x9 (10) - 1920x1080p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I1920x1080_16x9 (11) - 1920x1080i 16:9
        /// 
        /// 
        /// Default Value: RSUPV_GEN_HDMI_FORMAT_RESOL_P640x480_4x3 (0)
        /// 
        /// </param>
        /// <param name="Format_Frequency">
        /// Selection of the vertical video frequency. Corresponds to the VSYNC frequency. The values available for selection are oriented to the previously selected resolution according to CEA-861.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_23  (0)  - 23.98 V
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_24  (1)  - 24.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_25  (2)  - 25.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_29  (3)  - 29.89 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_30  (4)  - 30.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_50  (5)  - 50.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_59  (6)  - 59.94 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_60  (7)  - 60.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_100 (8)  - 100.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_119 (9)  - 119.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_120 (10) - 120 Hz
        /// 
        /// 
        /// Default Value: RSUPV_GEN_HDMI_FORMAT_FREQ_23 (0)
        /// 
        /// </param>
        /// <param name="Color_Depth">
        /// Selection of color depth of the picture data in bit.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_08 (0) - 08
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_10 (1) - 10
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_12 (2) - 12
        /// 
        /// Default Value: RSUPV_GEN_HDMI_COLOR_DEPTH_08 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureHDMIGeneratorVideo(int Source, int Format_Resolution, int Format_Frequency, int Color_Depth)
        {
            int pInvokeResult = PInvoke.ConfigureHDMIGeneratorVideo(this._handle, Source, Format_Resolution, Format_Frequency, Color_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the video identification code of the generated video signal according to CEA-861. The ID code is copied to the AVI Info Frame of the HDMI generator signal during the format selection.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:FORMat?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Format No control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Format_No">
        /// This control returns the Video identification code of the generated video signal according to CEA-861.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoFormatNo(int Buffer_Size, System.Text.StringBuilder Format_No)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoFormatNo(this._handle, Buffer_Size, Format_No);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects  the color depth of the picture data in bit.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:COLor:DEPTh
        /// </summary>
        /// <param name="Color_Depth">
        /// Selection of color depth of the picture data in bit.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_08 (0) - 08
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_10 (1) - 10
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_12 (2) - 12
        /// 
        /// Default Value: RSUPV_GEN_HDMI_COLOR_DEPTH_08 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorVideoColorDepth(int Color_Depth)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorVideoColorDepth(this._handle, Color_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the color depth of the picture data in bit.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:COLor:DEPTh?
        /// </summary>
        /// <param name="Color_Depth">
        /// This control returns the Color depth of the supplied video format.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_08 (0) - 08
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_10 (1) - 10
        /// RSUPV_GEN_HDMI_COLOR_DEPTH_12 (2) - 12
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoColorDepth(out int Color_Depth)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoColorDepth(this._handle, out Color_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects generated test pattern.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:CONTent
        /// </summary>
        /// <param name="Content">
        /// Selects generated test pattern.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_MONOCHROME (0) - Monochrome
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_LIPSYNC    (1) - Lip Sync
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_BERT       (2) - BERT
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_PATTERN    (3) - Pattern
        /// 
        /// Default Value: RSUPV_GEN_HDMI_VIDEO_CONTENT_MONOCHROME (0)
        /// 
        /// Note(s):
        /// 
        /// (1) "Monochrome"  - A monochrome picture content with selectable color depth is being generated.
        /// 
        /// (2) "Lip Sync"  - Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements). The "Lip Sync" selection in conjunction with "Source" = "Internal" restricts the availability of the generator functions to the "Lip Sync"
        /// function and adjusts it. A selectable trigger pattern with defined time reference to the audio data is being generated to detect latencies of picture and sound.
        /// 
        /// (3) "BERT" - Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements). Generation of bit patterns for measuring the bit error rate of the video data of an HDMI transmission path. The analyzer measuring function "BERT" requires the settings "Source" = "Intern" and "Pattern" =
        /// "BERT" in the generator, otherwise a corresponding message appears. "Pattern" Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements). Generation of test patterns.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorVideoContent(int Content)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorVideoContent(this._handle, Content);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns generated test pattern.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:CONTent?
        /// </summary>
        /// <param name="Content">
        /// Returns test pattern content.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_MONOCHROME (0) - Monochrome
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_LIPSYNC    (1) - Lip Sync
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_BERT       (2) - BERT
        /// RSUPV_GEN_HDMI_VIDEO_CONTENT_PATTERN    (3) - Pattern
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoContent(out int Content)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoContent(this._handle, out Content);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:COLor:STRing?
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Color String control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Color_String">
        /// This control gets the hexadecimal format the image of the binary data structure.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoColorString(int Buffer_Size, System.Text.StringBuilder Color_String)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoColorString(this._handle, Buffer_Size, Color_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The query retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:AVI:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the AVI control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="AVI">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoAVI(int Buffer_Size, System.Text.StringBuilder AVI)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoAVI(this._handle, Buffer_Size, AVI);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The query retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:SPD:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the SPD control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="SPD">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoSPD(int Buffer_Size, System.Text.StringBuilder SPD)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoSPD(this._handle, Buffer_Size, SPD);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The query retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:EEDid:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the E-EDID control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="E_EDID">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoEEDID(int Buffer_Size, System.Text.StringBuilder E_EDID)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoEEDID(this._handle, Buffer_Size, E_EDID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The query retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:CEC:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the E-EDID control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="CEC">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoCEC(int Buffer_Size, System.Text.StringBuilder CEC)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoCEC(this._handle, Buffer_Size, CEC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the horizontal and vertical resolution as well as the aspect ratio of the created video format according to the CEA-861 standard.
        /// 
        /// Note(s):
        /// 
        /// (1) Depending on the selected resolution, one or several VSYNC frequencies can be selected in the following parameter field The resulting video identification code according to CEA-861 is shown in the "Format No" field.
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:RESolution
        /// </summary>
        /// <param name="Format_Resolution">
        /// Selects the horizontal and vertical resolution as well as the aspect ratio of the created video format according to the CEA-861 standard.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P640x480_4x3  (0)  - 640x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_4x3  (1)  - 720x576p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_16x9 (2)  - 720x576p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_4x3  (3)  - 720x576i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_16x9 (4)  - 720x576i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_4x3  (5)  - 720x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_16x9 (6)  - 720x480p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_4x3  (7)  - 720x480i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_16x9 (8)  - 720x480i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1280x720_16x9 (9) -  1280x720p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1920x1080_16x9 (10) - 1920x1080p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I1920x1080_16x9 (11) - 1920x1080i 16:9
        /// 
        /// 
        /// Default Value: RSUPV_GEN_HDMI_FORMAT_RESOL_P640x480_4x3 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorVideoFormatResolution(int Format_Resolution)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorVideoFormatResolution(this._handle, Format_Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the horizontal and vertical resolution.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:RESolution?
        /// </summary>
        /// <param name="Format_Resolution">
        /// Returns the horizontal and vertical resolution.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P640x480_4x3  (0)  - 640x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_4x3  (1)  - 720x576p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x576_16x9 (2)  - 720x576p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_4x3  (3)  - 720x576i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x576_16x9 (4)  - 720x576i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_4x3  (5)  - 720x480p 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P720x480_16x9 (6)  - 720x480p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_4x3  (7)  - 720x480i 4:3
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I720x480_16x9 (8)  - 720x480i 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1280x720_16x9 (9) -  1280x720p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_P1920x1080_16x9 (10) - 1920x1080p 16:9
        /// RSUPV_GEN_HDMI_FORMAT_RESOL_I1920x1080_16x9 (11) - 1920x1080i 16:9
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoFormatResolution(out int Format_Resolution)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoFormatResolution(this._handle, out Format_Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the vertical video frequency. Corresponds to the VSYNC frequency. The values available for selection are oriented to the previously selected resolution according to CEA-861.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:FREQuency HZ23 | HZ24 | HZ25 | HZ29 | HZ30 | HZ50 | HZ59 | HZ60 | HZ100 | HZ119 | HZ120
        /// </summary>
        /// <param name="Format_Frequency">
        /// Selection of the vertical video frequency. Corresponds to the VSYNC frequency. The values available for selection are oriented to the previously selected resolution according to CEA-861.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_23  (0)  - 23.98 V
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_24  (1)  - 24.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_25  (2)  - 25.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_29  (3)  - 29.89 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_30  (4)  - 30.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_50  (5)  - 50.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_59  (6)  - 59.94 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_60  (7)  - 60.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_100 (8)  - 100.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_119 (9)  - 119.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_120 (10) - 120 Hz
        /// 
        /// 
        /// Default Value: RSUPV_GEN_HDMI_FORMAT_FREQ_23 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorVideoFormatFrequency(int Format_Frequency)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorVideoFormatFrequency(this._handle, Format_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the vertical video frequency. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:FREQuency?
        /// 
        /// </summary>
        /// <param name="Format_Frequency">
        /// Returns the vertical video frequency. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_23  (0)  - 23.98 V
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_24  (1)  - 24.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_25  (2)  - 25.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_29  (3)  - 29.89 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_30  (4)  - 30.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_50  (5)  - 50.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_59  (6)  - 59.94 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_60  (7)  - 60.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_100 (8)  - 100.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_119 (9)  - 119.0 Hz
        /// RSUPV_GEN_HDMI_FORMAT_FREQ_120 (10) - 120 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoFormatFrequency(out int Format_Frequency)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoFormatFrequency(this._handle, out Format_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the video source. 
        /// 
        /// Note(s):
        /// 
        /// (1) In the HDMI generator, the video data and test patterns
        /// can be generated either internally or supplied via the AUX IN socket, combined with the audio signals and output at the SOURCE socket. In this mode, all info frames are also copied to the SOURCE socket, with the exception of the internally generated audio info frames.
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:SOURce INTern | AXINput
        /// </summary>
        /// <param name="Source">
        /// Selects the video source. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_INTERN  (0) - Intern
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_AUX_IN  (1) - Aux In
        /// 
        /// Default Value: RSUPV_GEN_HDMI_VIDEO_SOURCE_INTERN (0)
        /// 
        /// Note(s):
        /// 
        /// (1) "Intern" -  The video data are internally generated. The test signal is selected via the "Pattern" parameter field.
        /// The "Internal" selection in conjunction with "Pattern" = "Lip Sync" automatically provides the "Lip Sync" generator function. The trigger pattern used for this measuring function must be generated internally.
        /// 
        /// (2) "Aux In" - The AUX IN socket can be used to supply externally generated video data, combined with the internally generated audio signals and output via the SOURCE socket.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorVideoSource(int Source)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorVideoSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the video source. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:VIDeo:SOURce?
        /// </summary>
        /// <param name="Source">
        /// Returns the video source. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_INTERN  (0) - Intern
        /// RSUPV_GEN_HDMI_VIDEO_SOURCE_AUX_IN  (1) - Aux In
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorVideoSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorVideoSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the HDMI layout of the supplied audio data.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:AUDio:FORMat PCM2ch | PCM8ch | DD | DDP | DTS | DTHD | DTSHd | DHDMaster | DSD
        /// </summary>
        /// <param name="Audio_Format">
        /// Select the HDMI layout of the supplied audio data.
        /// 
        /// Valid Values:
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0) - PCM Lay 0
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L1 (1) - PCM Lay 1
        /// RSUPV_HDMI_AUDIO_FORMAT_DD     (2) - Dolby Digital
        /// RSUPV_HDMI_AUDIO_FORMAT_DDP    (3) - Dolby Digital Plus
        /// RSUPV_HDMI_AUDIO_FORMAT_DTS    (4) - DTS
        /// RSUPV_HDMI_AUDIO_FORMAT_DTHD   (5) - DTHD
        /// RSUPV_HDMI_AUDIO_FORMAT_DTSHD  (6) - DTS HD
        /// RSUPV_HDMI_AUDIO_FORMAT_DHDM   (7) - DTS Master
        /// 
        /// Default Value: RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) PCM Lay 0 - 2 channels with PCM data or compressed audio.
        /// 
        /// (2) PCM Lay 1 - 8 channels with PCM data.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorAudioFormat(int Audio_Format)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorAudioFormat(this._handle, Audio_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the HDMI layout of the supplied audio data.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:AUDio:FORMat?
        /// </summary>
        /// <param name="Audio_Format">
        /// Returns the HDMI layout of the supplied audio data.
        /// 
        /// Valid Values:
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0) - PCM Lay 0
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L1 (1) - PCM Lay 1
        /// RSUPV_HDMI_AUDIO_FORMAT_DD     (2) - Dolby Digital
        /// RSUPV_HDMI_AUDIO_FORMAT_DDP    (3) - Dolby Digital Plus
        /// RSUPV_HDMI_AUDIO_FORMAT_DTS    (4) - DTS
        /// RSUPV_HDMI_AUDIO_FORMAT_DTHD   (5) - DTHD
        /// RSUPV_HDMI_AUDIO_FORMAT_DTSHD  (6) - DTS HD
        /// RSUPV_HDMI_AUDIO_FORMAT_DHDM   (7) - DTS Master
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorAudioFormat(out int Audio_Format)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorAudioFormat(this._handle, out Audio_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// With installed R&amp;S UPP-B4 option (HDMI and digital audio interfaces), the audio return channel of the HDMI analyzer can be supplied either via direct looping of the audio signal
        /// present at the Sink socket or optionally through the SPDIF output of the digital audio generator.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:SARC LOOPback | DAGen
        /// </summary>
        /// <param name="Sink_ARC">
        /// Select the signal of the digital audio generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_AUDIO_SINK_ARC_LOOPBACK (0) - HDMI Sink Loopback
        /// RSUPV_GEN_HDMI_AUDIO_SINK_ARC_DAGEN    (1) - Dig Aud Gen
        /// 
        /// 
        /// Default Value: RSUPV_GEN_HDMI_AUDIO_SINK_ARC_LOOPBACK (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "Loopback" - The supplied audio signal at the Sink socket is returned via the ARC.
        /// 
        /// (2) "Dig Aud Gen" - The signal of the digital audio generator is returned via the ARC.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorAudioSinkARC(int Sink_ARC)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorAudioSinkARC(this._handle, Sink_ARC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the signal of the digital audio generator.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:SARC?
        /// </summary>
        /// <param name="Sink_ARC">
        /// Returns the signal of the digital audio generator.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_HDMI_AUDIO_SINK_ARC_LOOPBACK (0) - HDMI Sink Loopback
        /// RSUPV_GEN_HDMI_AUDIO_SINK_ARC_DAGEN    (1) - Dig Aud Gen
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "Loopback" - The supplied audio signal at the Sink socket is returned via the ARC.
        /// 
        /// (2) "Dig Aud Gen" - The signal of the digital audio generator is returned via the ARC.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorAudioSinkARC(out int Sink_ARC)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorAudioSinkARC(this._handle, out Sink_ARC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The query retrieves in the hexadecimal format the image of the binary data structure.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        ///  
        /// (2) Returns a dialog in which the content of the current Audio Info Frame of the generator is shown. The data structure of this Info Frame is specified in the CEA-861 standard document.
        /// 
        /// Remote-control command(s):
        /// SOURce:HDMI:AUDio:INFoframe:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Audio Info Frame control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Audio_Info_Frame">
        /// This control returns the Video identification code of the supplied video signal according to CEA-861. The ID code
        /// is extracted directly from the AVI Info Frame of the connected HDMI source.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorAudioInfoFrame(int Buffer_Size, System.Text.StringBuilder Audio_Info_Frame)
        {
            int pInvokeResult = PInvoke.GetHDMIGeneratorAudioInfoFrame(this._handle, Buffer_Size, Audio_Info_Frame);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures active generator channel.
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Setting of the respective active generator channel for the audio format "PCM 8Ch Lay1" with the "Multi" channel setting.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCHannels&lt;1..8&gt; ON|OFF
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gen_Channels">
        /// This control enables or disables active generator channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIGeneratorChannelsMode(int Meas_Channel, bool Gen_Channels)
        {
            int pInvokeResult = PInvoke.SetHDMIGeneratorChannelsMode(this._handle, Meas_Channel, System.Convert.ToUInt16(Gen_Channels));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of active generator channel.
        /// 
        /// Remote-control command(s):
        /// OUTPut:MCHannels&lt;1..8&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gen_Channels">
        /// This control returns the state of active generator channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIGeneratorChannelsMode(int Meas_Channel, out bool Gen_Channels)
        {
            ushort Gen_ChannelsAsUShort;
            int pInvokeResult = PInvoke.GetHDMIGeneratorChannelsMode(this._handle, Meas_Channel, out Gen_ChannelsAsUShort);
            Gen_Channels = System.Convert.ToBoolean(Gen_ChannelsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets reference value for the relative voltage and frequency units.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:REFerence
        /// SOURce:FREQuency:REFerence
        /// </summary>
        /// <param name="Ref_Voltage">
        /// This control sets reference value for the relative voltage units.
        /// 
        /// Valid Range: 10.0e-9 to 100.0 FS
        /// 
        /// Default Value: 1.0 FS
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) If the reference level is changed, all voltage settings linked to the reference value also change. The relative voltage of the generator signal remains unchanged.
        /// </param>
        /// <param name="Voltage_Units">
        /// This control sets the units of Ref Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <param name="Ref_Frequency">
        /// This control sets reference value for the relative frequency units.
        /// 
        /// Valid Range: 1.0e-3 to 1.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) If the reference frequency is changed, all frequency settings linked to the reference value also change. The relative frequency of the generator signal remains unchanged.
        /// 
        /// </param>
        /// <param name="Frequency_Units">
        /// This control sets the units of Ref Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorReference(double Ref_Voltage, int Voltage_Units, double Ref_Frequency, int Frequency_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorReference(this._handle, Ref_Voltage, Voltage_Units, Ref_Frequency, Frequency_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets reference value for the relative voltage units. If the reference level is changed, all voltage settings linked to the reference value also change. The relative voltage of the generator signal remains unchanged.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:REFerence
        /// </summary>
        /// <param name="Ref_Voltage">
        /// This control sets reference value for the relative voltage units.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 1.0 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Ref Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRefVoltage(double Ref_Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorRefVoltage(this._handle, Ref_Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns reference value for the relative voltage units.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:REFerence?
        /// </summary>
        /// <param name="Ref_Voltage">
        /// This control returns reference value for the relative voltage units.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Ref Voltage.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRefVoltage(out double Ref_Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorRefVoltage(this._handle, out Ref_Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets reference value for the relative frequency units. If the reference frequency is changed, all frequency settings linked to the reference value also change. The relative frequency of the generator signal remains unchanged.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:REFerence
        /// </summary>
        /// <param name="Ref_Frequency">
        /// This control sets reference value for the relative frequency units.
        /// 
        /// Valid Range: 1.0e-3 to 1.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Ref Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRefFrequency(double Ref_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorRefFrequency(this._handle, Ref_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns reference value for the relative frequency units.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:REFerence?
        /// </summary>
        /// <param name="Ref_Frequency">
        /// This control returns reference value for the relative frequency units.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Ref Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRefFrequency(out double Ref_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorRefFrequency(this._handle, out Ref_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets frequency.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency&lt;1..17&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control selects channel or sinewave.
        /// 
        /// Valid Range: 1 to 17
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency">
        /// This control sets frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFrequency(int Channel, double Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorFrequency(this._handle, Channel, Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns frequency.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency&lt;1..17&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects channel or sinewave.
        /// 
        /// Valid Range: 1 to 17
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency">
        /// This control returns frequency.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFrequency(int Channel, out double Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorFrequency(this._handle, Channel, out Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets generator voltage of selected sinewave number or channel.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage&lt;1..17&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control selects channel or sinewave.
        /// 
        /// Valid Range: 1 to 17
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Voltage">
        /// This control sets generator voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorVoltage(int Channel, double Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorVoltage(this._handle, Channel, Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns generator voltage of selected sinewave or channel. 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage&lt;1..17&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects channel or sinewave.
        /// 
        /// Valid Range: 1 to 17
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Voltage">
        /// This control returns generator voltage.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Voltage.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorVoltage(int Channel, out double Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorVoltage(this._handle, Channel, out Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Used to set the level of the overall signal.
        /// 
        /// Notes:
        /// 
        /// (1) The maximum value depends on the set DC offset.
        /// 
        /// (2) In the analog generator, the maximum total voltage also depends on the settings for Output Type and Max Voltage in the Generator Config.
        /// 
        /// (3) The peak value and RMS are interlinked by means of the crest factor. If the noise is defined in the time domain, the selected distribution function for amplitude determines the crest factor.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:TOTal
        /// </summary>
        /// <param name="Voltage_Value">
        /// This control sets voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Voltage Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorTotalVoltage(double Voltage_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorTotalVoltage(this._handle, Voltage_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns total (peak) voltage.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:TOTal?
        /// </summary>
        /// <param name="Voltage_Value">
        /// This control returns voltage peak.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Voltage Value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorTotalVoltage(out double Voltage_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorTotalVoltage(this._handle, out Voltage_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RMS of the multi-sinewave signal (only in the analog generator).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RMS
        /// </summary>
        /// <param name="Voltage_RMS">
        /// This control sets the RMS of the multi-sinewave signal (only in the analog generator).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The peak value and RMS are interlinked by means of the crest factor. 
        /// 
        /// (2) If the noise is defined in the time domain, the selected distribution function for amplitude determines the crest factor.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Voltage RMS entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorVoltageRMS(double Voltage_RMS, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorVoltageRMS(this._handle, Voltage_RMS, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RMS of the multi-sinewave signal (only in the analog generator).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RMS?
        /// </summary>
        /// <param name="Voltage_RMS">
        /// This control returns the RMS of the multi-sinewave signal (only in the analog generator).
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The peak value and RMS are interlinked by means of the crest factor. 
        /// 
        /// (2) If the noise is defined in the time domain, the selected distribution function for amplitude determines the crest factor.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Voltage RMS.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorVoltageRMS(out double Voltage_RMS, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorVoltageRMS(this._handle, out Voltage_RMS, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The ratio of peak value to RMS (crest factor) of the signal can be influenced using the phase of the individual sinewave lines. 
        /// 
        /// Notes:
        /// 
        /// (1) This setting is only possible if the R&amp;S UPV-B6 option is installed. If this option is not installed, the crest factor is minimized.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CREStfactor:MODE MINimized | VALue | DPHase
        /// </summary>
        /// <param name="Crest_Factor">
        /// This control selects Crest Factor mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CR_FACTOR_OPT       (0) - Optimized
        /// RSUPV_GEN_CR_FACTOR_VAL       (1) - Value
        /// RSUPV_GEN_CR_FACTOR_DEF_PHASE (2) - Define Phase
        /// 
        /// Default Value: RSUPV_GEN_CR_FACTOR_OPT (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Optimized: The ratio of peak value to RMS of the signal is
        /// minimized.
        /// 
        /// (2) Value: The ratio of peak value to RMS of the signal is
        /// adjusted such that the ratio is as close to the preset value as possible. The result depends on the number, frequency and level of the individual lines of the multi-sinewave.
        /// 
        /// (3) Define Phase: The start phase of each sinewave line can be
        /// defined.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorCrestFactor(int Crest_Factor)
        {
            int pInvokeResult = PInvoke.SetGeneratorCrestFactor(this._handle, Crest_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns ratio of peak value to RMS (crest factor).
        /// 
        /// Notes:
        /// 
        /// (1) This setting is only possible is the R&amp;S UPV-B6 option is installed. If this option is not installed, the crest factor is minimized.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CREStfactor:MODE?
        /// </summary>
        /// <param name="Crest_Factor">
        /// This control returns Crest Factor mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_CR_FACTOR_OPT       (0) - Optimized
        /// RSUPV_GEN_CR_FACTOR_VAL       (1) - Value
        /// RSUPV_GEN_CR_FACTOR_DEF_PHASE (2) - Define Phase
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorCrestFactor(out int Crest_Factor)
        {
            int pInvokeResult = PInvoke.GetGeneratorCrestFactor(this._handle, out Crest_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the ratio of peak value to RMS of the signal. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is only possible if the R&amp;S UPV-B6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CREStfactor
        /// </summary>
        /// <param name="Crest_Factor">
        /// This control sets crest factor value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) The result depends on the number, frequency and level of the individual lines of the multi-sinewave.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorCrestFactorValue(double Crest_Factor)
        {
            int pInvokeResult = PInvoke.SetGeneratorCrestFactorValue(this._handle, Crest_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ratio of peak value to RMS of the signal. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is only possible if the R&amp;S UPV-B6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CREStfactor?
        /// </summary>
        /// <param name="Crest_Factor">
        /// This control returns crest factor value.
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) The result depends on the number, frequency and level of the individual lines of the multi-sinewave.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorCrestFactorValue(out double Crest_Factor)
        {
            int pInvokeResult = PInvoke.GetGeneratorCrestFactorValue(this._handle, out Crest_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates DC offset function. 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet:STATe ON | OFF
        /// </summary>
        /// <param name="DC_Offset">
        /// This control activates/deactivates DC offset function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDCOffset(bool DC_Offset)
        {
            int pInvokeResult = PInvoke.SetGeneratorDCOffset(this._handle, System.Convert.ToUInt16(DC_Offset));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns DC offset function state. 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet:STATe?
        /// </summary>
        /// <param name="DC_Offset">
        /// This control returns DC offset function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDCOffset(out bool DC_Offset)
        {
            ushort DC_OffsetAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorDCOffset(this._handle, out DC_OffsetAsUShort);
            DC_Offset = System.Convert.ToBoolean(DC_OffsetAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reduces the maximum possible AC voltage by setting DC offset value. A DC offset is superimposed on the generator signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet
        /// </summary>
        /// <param name="DC_Offset">
        /// This control sets DC offset on the generator signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Max Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDCOffsetValue(double DC_Offset, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorDCOffsetValue(this._handle, DC_Offset, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns DC offset value. A DC offset is superimposed on the generator signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet?
        /// </summary>
        /// <param name="DC_Offset">
        /// This control returns DC offset on the generator signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of DC Offset.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDCOffsetValue(out double DC_Offset, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorDCOffsetValue(this._handle, out DC_Offset, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reduces the maximum possible AC voltage by setting DC offset value. A DC offset is superimposed on the generator signal.
        /// 
        /// Note(s):
        /// 
        /// (1) Offset Ch1 - Common DC Offset for channel 1 and channel 2, if "Track" DC Offset was selected. DC Offset for channel 1, if "Split" DC Offset was selected.
        /// 
        /// (2) Offset Ch2 - DC Offset for channel 2, if "Split" DC Offset was selected.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet&lt;1..2&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control sets DC offset on the generator signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Max Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDCOffsetChannelValue(int Channel, double DC_Offset, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorDCOffsetChannelValue(this._handle, Channel, DC_Offset, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns DC offset value. A DC offset is superimposed on the generator signal.
        /// 
        /// Note(s):
        /// 
        /// (1) Offset Ch1 - Common DC Offset for channel 1 and channel 2, if "Track" DC Offset was selected. DC Offset for channel 1, if "Split" DC Offset was selected.
        /// 
        /// (2) Offset Ch2 - DC Offset for channel 2, if "Split" DC Offset was selected.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet&lt;1..2&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control returns DC offset on the generator signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of DC Offset.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDCOffsetChannelValue(int Channel, out double DC_Offset, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorDCOffsetChannelValue(this._handle, Channel, out DC_Offset, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The DC Offset can be selected for both channels together (Track) or separately from each other (Split).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet:CHANnels TRACk | SPLit
        /// </summary>
        /// <param name="DC_Offset">
        /// This control selects the DC Offset coupling.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_GEN_STEREO_FILTER_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDCOffsetCoupling(int DC_Offset)
        {
            int pInvokeResult = PInvoke.SetGeneratorDCOffsetCoupling(this._handle, DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DC Offset coupling.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:OFFSet:CHANnels?
        /// </summary>
        /// <param name="DC_Offset">
        /// This control returns the DC Offset coupling.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDCOffsetCoupling(out int DC_Offset)
        {
            int pInvokeResult = PInvoke.GetGeneratorDCOffsetCoupling(this._handle, out DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates and configures or deactivates the generator sweep system.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:CONTrol OFF | ASWeep | ALISt | MSWeep | MLISt
        /// </summary>
        /// <param name="Sweep_Ctrl">
        /// This control selects the generator sweep system.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_OFF        (0) - Off
        /// RSUPV_GEN_SWEEP_AUTO_SWEEP (1) - Auto Sweep
        /// RSUPV_GEN_SWEEP_AUTO_LIST  (2) - Auto List
        /// RSUPV_GEN_SWEEP_MAN_SWEEP  (3) - Manual Sweep
        /// RSUPV_GEN_SWEEP_MAN_LIST   (4) - Manual List
        /// 
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_OFF (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: The generator sweep system is deactivated; no
        /// additional parameter fields are displayed. If the analyzer sweep system is also deactivated, the START, SINGLE and STOP/CONT keys affect the measurement system:
        /// - START starts a continuous measurement
        /// - SINGLE starts a single measurement or causes an already started continuous measurement to be continued as a single measurement
        /// - STOP/CONT stops an active measurement or starts a stopped or completed measurement as a continuous measurement
        /// 
        /// (2) Auto Sweep: The generator sweep system is activated; the sweep stepping is performed automatically; the sweep axis
        /// is calculated from the start value, stop value and
        /// step size or point number. The stepping condition (fixed time grid or synchronized to the analyzer) is determined in the
        /// "Next Step" parameter field. 
        /// 
        /// (3) Auto List: The generator sweep system is activated; the sweep stepping is performed automatically; the sweep axis
        /// is determined from the predefined list of sweep points (usually loaded as a file). The stepping condition (fixed time grid or
        /// synchronized to the analyzer) is determined in the "Next Step" parameter field.
        /// 
        /// (4) Manual Sweep: The generator sweep system is activated; the sweep stepping is performed manually; the sweep axis is
        /// calculated from the start value, stop value and step size or point number.
        /// 
        /// (5) Manual List: The generator sweep system is activated; the sweep stepping is performed manually; the sweep axis is
        /// determined from the predefined list of sweep points (usually loaded as a file).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepCtrl(int Sweep_Ctrl)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepCtrl(this._handle, Sweep_Ctrl);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generator sweep system.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:CONTrol?
        /// </summary>
        /// <param name="Sweep_Ctrl">
        /// This control returns the generator sweep system.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_OFF        (0) - Off
        /// RSUPV_GEN_SWEEP_AUTO_SWEEP (1) - Auto Sweep
        /// RSUPV_GEN_SWEEP_AUTO_LIST  (2) - Auto List
        /// RSUPV_GEN_SWEEP_MAN_SWEEP  (3) - Manual Sweep
        /// RSUPV_GEN_SWEEP_MAN_LIST   (4) - Manual List
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: The generator sweep system is deactivated; no
        /// additional parameter fields are displayed. If the analyzer sweep system is also deactivated, the START, SINGLE and STOP/CONT keys affect the measurement system:
        /// - START starts a continuous measurement
        /// - SINGLE starts a single measurement or causes an already started continuous measurement to be continued as a single measurement
        /// - STOP/CONT stops an active measurement or starts a stopped or completed measurement as a continuous measurement
        /// 
        /// (2) Auto Sweep: The generator sweep system is activated; the sweep stepping is performed automatically; the sweep axis
        /// is calculated from the start value, stop value and
        /// step size or point number. The stepping condition (fixed time grid or synchronized to the analyzer) is determined in the
        /// "Next Step" parameter field. 
        /// 
        /// (3) Auto List: The generator sweep system is activated; the sweep stepping is performed automatically; the sweep axis
        /// is determined from the predefined list of sweep points (usually loaded as a file). The stepping condition (fixed time grid or
        /// synchronized to the analyzer) is determined in the "Next Step" parameter field.
        /// 
        /// (4) Manual Sweep: The generator sweep system is activated; the sweep stepping is performed manually; the sweep axis is
        /// calculated from the start value, stop value and step size or point number.
        /// 
        /// (5) Manual List: The generator sweep system is activated; the sweep stepping is performed manually; the sweep axis is
        /// determined from the predefined list of sweep points (usually loaded as a file).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepCtrl(out int Sweep_Ctrl)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepCtrl(this._handle, out Sweep_Ctrl);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep stepping.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for automatic sweeps.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:NEXTstep ASYNc | DWELl | LIST
        /// </summary>
        /// <param name="Next_Step">
        /// This control selects the sweep stepping.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_NSTEP_ANLR_SYNC  (0) - Anlr Sync
        /// RSUPV_GEN_SWEEP_NSTEP_DWELL_VAL  (1) - Dwell Value
        /// RSUPV_GEN_SWEEP_NSTEP_DWELL_FILE (2) - Dwell File
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_NSTEP_ANLR_SYNC (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Anlr Sync: The sweep stepping is synchronized to the analyzer,i.e. a new sweep point is set automatically when all
        /// measurements activated in the analyzer have been completed. This setting should be selected whenever the internal analyzer is used for sweeping. It ensures that a measurement value is determined for every sweep point with minimum sweep time.
        /// 
        /// If one or more measurement values cannot be determined for a particular sweep point (e.g. the selected level range of the analyzer is too low or the signal supplies a level which is too high), the measurement values concerned are marked as invalid ("NAN") and the next sweep point is set.
        /// 
        /// 
        /// (2) Dwell Value: The sweep stepping is time-controlled in constant intervals, i.e. a new sweep point is set automatically
        /// if the preset time has expired, irrespective of whether the measurements activated in the analyzer have been completed. A new measurement is started at the same time.
        /// This setting should only be selected if the internal analyzer is not used or the measurement values are not required. It ensures that the sweep stepping is performed in a fixed time grid.
        /// 
        /// If the selected dwell time is too short thus preventing one or more measurement values from being determined, the measurement values concerned are marked as invalid ("NAN").
        /// 
        /// 
        /// (3) Dwell File: The sweep stepping is time-controlled in individually set intervals, i.e. a new sweep point is set
        /// automatically if the associated time has expired,
        /// irrespective of whether the measurements activated in the analyzer have been completed. A new measurement is started at the same time. This setting should only be selected if the internal analyzer is not used or the measurement values are
        /// not required. It allows a different dwell time to be specified for each sweep point.
        /// 
        /// If the dwell-time list is shorter than the sweep list or the length of the sweep axis, the last dwell time in the list is applicable for all remaining sweep points.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepNextStep(int Next_Step)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepNextStep(this._handle, Next_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sweep stepping.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for automatic sweeps.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:NEXTstep?
        /// </summary>
        /// <param name="Next_Step">
        /// This control returns the sweep stepping.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_NSTEP_ANLR_SYNC  (0) - Anlr Sync
        /// RSUPV_GEN_SWEEP_NSTEP_DWELL_VAL  (1) - Dwell Value
        /// RSUPV_GEN_SWEEP_NSTEP_DWELL_FILE (2) - Dwell File
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Anlr Sync: The sweep stepping is synchronized to the analyzer,i.e. a new sweep point is set automatically when all
        /// measurements activated in the analyzer have been completed. This setting should be selected whenever the internal analyzer is used for sweeping. It ensures that a measurement value is determined for every sweep point with minimum sweep time.
        /// 
        /// If one or more measurement values cannot be determined for a particular sweep point (e.g. the selected level range of the analyzer is too low or the signal supplies a level which is too high), the measurement values concerned are marked as invalid ("NAN") and the next sweep point is set.
        /// 
        /// 
        /// (2) Dwell Value: The sweep stepping is time-controlled in constant intervals, i.e. a new sweep point is set automatically
        /// if the preset time has expired, irrespective of whether the measurements activated in the analyzer have been completed. A new measurement is started at the same time.
        /// This setting should only be selected if the internal analyzer is not used or the measurement values are not required. It ensures that the sweep stepping is performed in a fixed time grid.
        /// 
        /// If the selected dwell time is too short thus preventing one or more measurement values from being determined, the measurement values concerned are marked as invalid ("NAN").
        /// 
        /// 
        /// (3) Dwell File: The sweep stepping is time-controlled in individually set intervals, i.e. a new sweep point is set
        /// automatically if the associated time has expired,
        /// irrespective of whether the measurements activated in the analyzer have been completed. A new measurement is started at the same time. This setting should only be selected if the internal analyzer is not used or the measurement values are
        /// not required. It allows a different dwell time to be specified for each sweep point.
        /// 
        /// If the dwell-time list is shorter than the sweep list or the length of the sweep axis, the last dwell time in the list is applicable for all remaining sweep points.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepNextStep(out int Next_Step)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepNextStep(this._handle, out Next_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the dwell time value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:DWELl
        /// </summary>
        /// <param name="Dwell">
        /// This control sets the dwell time value.
        /// 
        /// Valid Range: 10e-3.0 to 1.0e3 s
        /// 
        /// Default Value: 0.1 s
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This setting should only be selected if the internal
        /// analyzer is not used or the measurement values are not required. It ensures that the sweep stepping is performed in a fixed time grid.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Dwell entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepDwellTime(double Dwell, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepDwellTime(this._handle, Dwell, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the dwell time value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:DWELl?
        /// </summary>
        /// <param name="Dwell">
        /// This control returns the dwell time value.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Dwell time.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepDwellTime(out double Dwell, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepDwellTime(this._handle, out Dwell, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the file containing the list of dwell times.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:DWELl 'filename'
        /// </summary>
        /// <param name="Dwell_File">
        /// This control selects the file containing the list of dwell times.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This setting should only be selected if the internal
        /// analyzer is not used or the measurement values are not required. It allows a different dwell time to be specified for each sweep point.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepDwellFile(string Dwell_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepDwellFile(this._handle, Dwell_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep parameter (with one-dimensional sweeps) or the first sweep parameter (with two-dimensional sweeps).
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) Only visible for activated generator sweep system.
        /// 
        /// (2) It is also possible to plot a measurement value on the X-axis (e.g. the measured RMS in the case of external measurement value triggering). In such cases, the sweep axis (sweep X-axis) and the graphical X-axis are not necessarily identical.
        /// 
        /// (3) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:XAXis VOLTage | FREQuency | ONTIme | INTervall | PHASe | OFF
        /// </summary>
        /// <param name="X_Axis">
        /// This control selects the sweep parameter (with one-dimensional sweeps) or the first sweep parameter (with two-dimensional sweeps).
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Voltage: Used to activate a level sweep. Which signal
        /// parameter is actually swept (e.g. the level of a single
        /// sinewave line or the total level of a multi-tone signal)
        /// depends on the respective generator function.
        /// 
        /// (2) Frequency: Used to activate a frequency sweep. Not possible for noise signals and multi-tone signals. Which signal parameter is actually swept (e.g. the frequency of a
        /// single sinewave line or the center frequency of a two-tone signal) depends on the respective generator function.
        /// 
        /// (3) On Time: Used to activate a burst-duration sweep. Only with
        /// burst signals. The ON-time of the burst signal is swept, i.e. the time during which the high level of the burst is output.
        /// 
        /// (4) Interval: Used to activate a burst-interval sweep. Only with burst signals. The interval length of the burst signal is swept.
        /// 
        /// (5) Phase: Used to activate a phase sweep. Only possible for
        /// stereo signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepXAxis(int X_Axis)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepXAxis(this._handle, X_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sweep parameter (with one-dimensional sweeps) or the first sweep parameter (with two-dimensional sweeps).
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) Only visible for activated generator sweep system.
        /// 
        /// (2) It is also possible to plot a measurement value on the X-axis (e.g. the measured RMS in the case of external measurement value triggering). In such cases, the sweep axis (sweep X-axis) and the graphical X-axis are not necessarily identical.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:XAXis?
        /// </summary>
        /// <param name="X_Axis">
        /// This control returns the sweep parameter (with one-dimensional sweeps) or the first sweep parameter (with two-dimensional sweeps).
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Notes:
        /// 
        /// (1) Voltage: Used to activate a level sweep. Which signal
        /// parameter is actually swept (e.g. the level of a single
        /// sinewave line or the total level of a multi-tone signal)
        /// depends on the respective generator function.
        /// 
        /// (2) Frequency: Used to activate a frequency sweep. Not possible for noise signals and multi-tone signals. Which signal parameter is actually swept (e.g. the frequency of a
        /// single sinewave line or the center frequency of a two-tone signal) depends on the respective generator function.
        /// 
        /// (3) On Time: Used to activate a burst-duration sweep. Only with
        /// burst signals. The ON-time of the burst signal is swept, i.e. the time during which the high level of the burst is output.
        /// 
        /// (4) Interval: Used to activate a burst-interval sweep. Only with burst signals. The interval length of the burst signal is swept.
        /// 
        /// (5) Phase: Used to activate a phase sweep. Only possible for
        /// stereo signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepXAxis(out int X_Axis)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepXAxis(this._handle, out X_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the second sweep parameter for the 
        /// two-dimensional sweep. Used both to activate and to deactivate the two-dimensional sweep. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system.
        /// 
        /// (2) With some generator functions (e.g. DC, DIM), it is possible to sweep one parameter only. The "Z Axis" parameter field (and therefore a two-dimensional sweep) is not available in this case.
        /// 
        /// (3) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:ZAXis OFF | VOLTage | FREQuency | ONTIme | INTervall | PHASe
        /// </summary>
        /// <param name="Z_Axis">
        /// This control selects the second sweep parameter for the two-dimensional sweep. Used both to activate and to deactivate the two-dimensional sweep.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_OFF (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: Used to deactivate the two-dimensional sweep (switch-over to a one-dimensional sweep).
        /// 
        /// (2) Voltage: Used to activate the two-dimensional sweep and
        /// select the level variation as the second sweep parameter. Which signal parameter is actually swept (the level of a single sinewave line or the total level of a multi-tone signal) depends on the respective generator function.
        /// 
        /// (3) Frequency: Used to activate the two-dimensional sweep and
        /// select the frequency variation as the second sweep parameter. Not possible for noise signals and multitone signals. Which signal parameter is actually swept (the frequency of a single sinewave line or the center frequency of a two-tone signal) depends on the respective generator function.
        /// 
        /// (4) On Time: Used to activate the two-dimensional sweep and
        /// select the burst-duration variation as the second sweep parameter. Only with burst signals. The ON-time of the burst signal is swept, i.e. the time during which the high level of the burst is output.
        /// 
        /// (5) Interval: Used to activate the two-dimensional sweep and
        /// select the burst-interval variation as the second sweep parameter. Only with burst signals. The interval length of the burst signal is swept.
        /// 
        /// (6) Phase: Used to activate a two-dimensional sweep and select phase variation as the second sweep parameter. Only possible for stereo signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepZAxis(int Z_Axis)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepZAxis(this._handle, Z_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the second sweep parameter for the 
        /// two-dimensional sweep. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system.
        /// 
        /// (2) With some generator functions (e.g. DC, DIM), it is possible to sweep one parameter only. The "Z Axis" parameter field (and therefore a two-dimensional sweep) is not available in this case.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:ZAXis?
        /// </summary>
        /// <param name="Z_Axis">
        /// This control returns the second sweep parameter for the two-dimensional sweep.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: Used to deactivate the two-dimensional sweep (switch-over to a one-dimensional sweep).
        /// 
        /// (2) Voltage: Used to activate the two-dimensional sweep and
        /// select the level variation as the second sweep parameter. Which signal parameter is actually swept (the level of a single sinewave line or the total level of a multi-tone signal) depends on the respective generator function.
        /// 
        /// (3) Frequency: Used to activate the two-dimensional sweep and
        /// select the frequency variation as the second sweep parameter. Not possible for noise signals and multitone signals. Which signal parameter is actually swept (the frequency of a single sinewave line or the center frequency of a two-tone signal) depends on the respective generator function.
        /// 
        /// (4) On Time: Used to activate the two-dimensional sweep and
        /// select the burst-duration variation as the second sweep parameter. Only with burst signals. The ON-time of the burst signal is swept, i.e. the time during which the high level of the burst is output.
        /// 
        /// (5) Interval: Used to activate the two-dimensional sweep and
        /// select the burst-interval variation as the second sweep parameter. Only with burst signals. The interval length of the burst signal is swept.
        /// 
        /// (6) Phase: Used to activate a two-dimensional sweep and select phase variation as the second sweep parameter. Only possible for stereo signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepZAxis(out int Z_Axis)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepZAxis(this._handle, out Z_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sweeps halt with the halt value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:VOLTage:HALT STARt | VALue | MUTE
        /// SOURce:SWEep:FREQuency:HALT STARt | VALue | MUTE
        /// SOURce:SWEep:PHASe:HALT STARt | VALue | MUTE
        /// SOURce:SWEep:ONTime:HALT STARt | VALue | MUTE
        /// SOURce:SWEep:INTerval:HALT STARt | VALue | MUTE
        /// SOURce:SWEep:VOLTage:HALT:VALue &lt;value&gt;
        /// SOURce:SWEep:FREQuency:HALT:VALue &lt;value&gt;
        /// SOURce:SWEep:PHASe:HALT:VALue &lt;value&gt;
        /// SOURce:SWEep:ONTime:HALT:VALue &lt;value&gt;
        /// SOURce:SWEep:INTerval:HALT:VALue &lt;value&gt;
        /// </summary>
        /// <param name="Axis">
        /// This control selects the second sweep parameter for the two-dimensional sweep. Used both to activate and to deactivate the two-dimensional sweep.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_OFF (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Off: Used to deactivate the two-dimensional sweep (switch-over to a one-dimensional sweep).
        /// 
        /// (2) Voltage: Used to activate the two-dimensional sweep and
        /// select the level variation as the second sweep parameter. Which signal parameter is actually swept (the level of a single sinewave line or the total level of a multi-tone signal) depends on the respective generator function.
        /// 
        /// (3) Frequency: Used to activate the two-dimensional sweep and
        /// select the frequency variation as the second sweep parameter. Not possible for noise signals and multitone signals. Which signal parameter is actually swept (the frequency of a single sinewave line or the center frequency of a two-tone signal) depends on the respective generator function.
        /// 
        /// (4) On Time: Used to activate the two-dimensional sweep and
        /// select the burst-duration variation as the second sweep parameter. Only with burst signals. The ON-time of the burst signal is swept, i.e. the time during which the high level of the burst is output.
        /// 
        /// (5) Interval: Used to activate the two-dimensional sweep and
        /// select the burst-interval variation as the second sweep parameter. Only with burst signals. The interval length of the burst signal is swept.
        /// 
        /// (6) Phase: Used to activate a two-dimensional sweep and select phase variation as the second sweep parameter. Only possible for stereo signal.
        /// </param>
        /// <param name="Halt">
        /// This control selects the sweeps halt
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_START (0) - Start
        /// RSUPV_GEN_SWEEP_VALUE (1) - Value
        /// RSUPV_GEN_SWEEP_MUTE  (2) - Mute
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_START (0)
        /// </param>
        /// <param name="Halt_Value">
        /// This control sets the halt value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the unit for the halt value. 
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepHalt(int Axis, int Halt, double Halt_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepHalt(this._handle, Axis, Halt, Halt_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sweeps halt with the halt value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:VOLTage:HALT?
        /// SOURce:SWEep:FREQuency:HALT? 
        /// SOURce:SWEep:PHASe:HALT? 
        /// SOURce:SWEep:ONTime:HALT?
        /// SOURce:SWEep:INTerval:HALT?
        /// 
        /// SOURce:SWEep:VOLTage:HALT:VALue?
        /// SOURce:SWEep:FREQuency:HALT:VALue?
        /// SOURce:SWEep:PHASe:HALT:VALue?
        /// SOURce:SWEep:ONTime:HALT:VALue?
        /// SOURce:SWEep:INTerval:HALT:VALue?
        /// </summary>
        /// <param name="Axis">
        /// This control returns the second sweep parameter for the two-dimensional sweep. Used both to activate and to deactivate the two-dimensional sweep.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_OFF      (0) - Off
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// </param>
        /// <param name="Halt">
        /// This control returns the sweeps halt.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_START (0) - Start
        /// RSUPV_GEN_SWEEP_VALUE (1) - Value
        /// RSUPV_GEN_SWEEP_MUTE  (2) - Mute
        /// </param>
        /// <param name="Halt_Value">
        /// This control returns the halt value.
        /// </param>
        /// <param name="Units">
        /// This control returns the unit for the halt value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepHalt(int Axis, out int Halt, out double Halt_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepHalt(this._handle, Axis, out Halt, out Halt_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the spacing type (logarithmic or linear).
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) A maximum of 1024 points are available for each sweep axis which means that each axis can be divided into max. 1023 (linear or logarithmic) equidistant steps.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// SOURce:SWEep:VOLTage:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// SOURce:SWEep:ONTime:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// SOURce:SWEep:INTerval:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// SOURce:SWEep:PHASe:SPACing LINPoints | LINSteps
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Spacing">
        /// This control selects the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axes. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_SPAC_LIN_POINT (0) - Lin Points
        /// RSUPV_GEN_SWEEP_SPAC_LIN_STEP  (1) - Lin Steps
        /// RSUPV_GEN_SWEEP_SPAC_LOG_POINT (2) - Log Points
        /// RSUPV_GEN_SWEEP_SPAC_LOG_STEP  (3) - Log Steps
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_SPAC_LIN_POINT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. 
        /// 
        /// (2) It is set separately for each sweep parameter.
        /// 
        /// (3) Log Points: Should be selected if equidistant, logarithmic
        /// spacing of all points is required.
        /// 
        /// (4) For Phase Sweep only Linear Points and Steps are available.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepSpacing(int Axis, int Spacing)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepSpacing(this._handle, Axis, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the spacing type (logarithmic or linear).
        /// 
        /// Notes:
        /// 
        /// (1) A maximum of 1024 points are available for each sweep axis which means that each axis can be divided into max. 1023 (linear or logarithmic) equidistant steps.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:SPACing?
        /// SOURce:SWEep:VOLTage:SPACing?
        /// SOURce:SWEep:ONTime:SPACing?
        /// SOURce:SWEep:INTerval:SPACing?
        /// SOURce:SWEep:PHASe:SPACing?
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Spacing">
        /// This control returns the sweep range spacing.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_SPAC_LIN_POINT (0) - Lin Points
        /// RSUPV_GEN_SWEEP_SPAC_LIN_STEP  (1) - Lin Steps
        /// RSUPV_GEN_SWEEP_SPAC_LOG_POINT (2) - Log Points
        /// RSUPV_GEN_SWEEP_SPAC_LOG_STEP  (3) - Log Steps
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepSpacing(int Axis, out int Spacing)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepSpacing(this._handle, Axis, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start value for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STARt
        /// SOURce:SWEep:VOLTage:STARt
        /// SOURce:SWEep:ONTime:STARt
        /// SOURce:SWEep:INTerval:STARt
        /// SOURce:SWEep:PHASe:STARt
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Start">
        /// This control sets the start value for the sweep parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If the start value is less than the stop value, an upward sweep is performed, otherwise a downward sweep will be performed.
        /// If a start value identical to the stop value is entered, the stop value is automatically loaded with the old start value. In this way, it is possible to change the sweep direction by entering just one value.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Start entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepStart(int Axis, double Start, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepStart(this._handle, Axis, Start, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start value for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STARt?
        /// SOURce:SWEep:VOLTage:STARt?
        /// SOURce:SWEep:ONTime:STARt?
        /// SOURce:SWEep:INTerval:STARt?
        /// SOURce:SWEep:PHASe:STARt?
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Start">
        /// This control returns the start value for the sweep parameter.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Start.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepStart(int Axis, out double Start, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepStart(this._handle, Axis, out Start, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop value for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STOP
        /// SOURce:SWEep:VOLTage:STOP
        /// SOURce:SWEep:ONTime:STOP
        /// SOURce:SWEep:INTerval:STOP
        /// SOURce:SWEep:PHASe:STOP
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Stop">
        /// This control sets the stop value for the sweep parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Stop entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepStop(int Axis, double Stop, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepStop(this._handle, Axis, Stop, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop value for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system. It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STOP?
        /// SOURce:SWEep:VOLTage:STOP?
        /// SOURce:SWEep:ONTime:STOP?
        /// SOURce:SWEep:INTerval:STOP?
        /// SOURce:SWEep:PHASe:STOP?
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Stop">
        /// This control returns the stop value for the sweep parameter.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Stop.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepStop(int Axis, out double Stop, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepStop(this._handle, Axis, out Stop, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of sweep points for the sweep parameter
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system if "Lin Points" or "Log Points" is set for "Spacing". It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:POINts
        /// SOURce:SWEep:VOLTage:POINts
        /// SOURce:SWEep:ONTime:POINts
        /// SOURce:SWEep:INTerval:POINts
        /// SOURce:SWEep:PHASe:POINts
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Points">
        /// This control sets the number of sweep points for the sweep parameter.
        /// 
        /// Valid Range: 2 to 1024
        /// 
        /// Default Value: 30
        /// 
        /// Notes:
        /// 
        /// (1) The sweep range is divided into "Points - 1" (linear or logarithmic) equidistant steps. At least 2 points (start and stop value) are required.
        /// 
        /// (2) A maximum of 1024 points can be selected for each sweep
        /// parameter.
        /// 
        /// (3) If the Z-axis contains more than 20 points, only the last 20 scans are available as the data set (for saving and rescaling the graph). If a two-dimensional sweep is to be saved as a complete trace data set, the number of points on the Z-axis must not exceed 20.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepPoints(int Axis, int Points)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepPoints(this._handle, Axis, Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of sweep points for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system if "Lin Points" or "Log Points" is set for "Spacing". It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:POINts?
        /// SOURce:SWEep:VOLTage:POINts?
        /// SOURce:SWEep:ONTime:POINts?
        /// SOURce:SWEep:INTerval:POINts?
        /// SOURce:SWEep:PHASe:POINts?
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Points">
        /// This control returns the number of sweep points for the sweep parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepPoints(int Axis, out int Points)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepPoints(this._handle, Axis, out Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the (linear or logarithmic) step size for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system if "Lin Steps" or "Log Steps" is set for "Spacing". It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STEP
        /// SOURce:SWEep:VOLTage:STEP
        /// SOURce:SWEep:ONTime:STEP
        /// SOURce:SWEep:INTerval:STEP
        /// SOURce:SWEep:PHASe:STEP
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Steps">
        /// This control sets the (linear or logarithmic) step size for the sweep parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) With linear step, the size of the step must always be entered, i.e. the numeric value is positive even if the start value is greater than the stop value. The physical unit is the same as that used when specifying "Start" and "Stop".
        /// 
        /// (2) With logarithmic step, the factor must be entered by which each sweep point is to be multiplied in order to move to the next sweep point. The logarithmic step size of level sweeps can also be specified in dB. Swapping the start and stop value (reversal of the sweep direction), therefore produces the reciprocal value and changes the sign of the dB value. The closer the numeric value is to 1.0 or 0 dB, the more sweep steps will be performed.
        /// 
        /// (3) Since the last step of the sweep is automatically adapted
        /// such that it corresponds exactly to the stop value, it may deviate by max. 50 % from the selected step size. If this is to be avoided, either the start / stop value must be corrected accordingly or the sweep spacing must be set using the "Points" parameter.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Steps entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSweepSteps(int Axis, double Steps, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSweepSteps(this._handle, Axis, Steps, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the (linear or logarithmic) step size for the sweep parameter.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator sweep system if "Lin Steps" or "Log Steps" is set for "Spacing". It is set separately for each sweep parameter.
        /// 
        /// (2) Axes 'On Time' and 'Interval' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:SWEep:FREQuency:STEP?
        /// SOURce:SWEep:VOLTage:STEP?
        /// SOURce:SWEep:ONTime:STEP?
        /// SOURce:SWEep:INTerval:STEP?
        /// SOURce:SWEep:PHASe:STEP?
        /// </summary>
        /// <param name="Axis">
        /// This control selects the sweep parameter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SWEEP_AXIS_VOLT     (1) - Voltage
        /// RSUPV_GEN_SWEEP_AXIS_FREQ     (2) - Frequency
        /// RSUPV_GEN_SWEEP_AXIS_ON_TIME  (3) - On Time
        /// RSUPV_GEN_SWEEP_AXIS_INTERVAL (4) - Interval
        /// RSUPV_GEN_SWEEP_AXIS_PHASE    (5) - Phase
        /// 
        /// Default Value: RSUPV_GEN_SWEEP_AXIS_VOLT (1)
        /// 
        /// Notes:
        /// 
        /// (1) It can be selected separately for each sweep parameter (i.e. X and Z-axis).
        /// </param>
        /// <param name="Steps">
        /// This control sets the (linear or logarithmic) step size for the sweep parameter.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Steps.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSweepSteps(int Axis, out double Steps, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSweepSteps(this._handle, Axis, out Steps, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the file name for the list of the level sweep parameter (level sweep list). 
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator list sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VOLTage 'filename'
        /// </summary>
        /// <param name="Volt_File">
        /// This control selects the file name for the list of the level sweep parameter (level sweep list).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Which signal parameter is actually swept (the level of a single sinewave line or the total level of a multi-tone signal) depends on the selected generator function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorTotVoltFile(string Volt_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorTotVoltFile(this._handle, Volt_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function the file name for the list of the frequency sweep
        /// parameter (frequency sweep list).
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator list sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:FREQuency 'filename'
        /// </summary>
        /// <param name="Freq_File">
        /// This control selects the file name for the list of the frequency sweep parameter (frequency sweep list).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Which signal parameter is actually swept (the frequency of a single sinewave line or the center frequency of a two-tone signal) depends on the selected generator function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFreqFile(string Freq_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorFreqFile(this._handle, Freq_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the file name for the phase sweep list.
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator list sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:PHASe 'filename'
        /// </summary>
        /// <param name="Phase_File">
        /// This control sets the file name for the phase sweep list.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPhaseFile(string Phase_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorPhaseFile(this._handle, Phase_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the file name for the list of the  burst-duration sweep (burst-duration sweep list).
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator list sweep in the generator functions "Burst" and "Sine? Burst".
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:ONTime 'filename'
        /// </summary>
        /// <param name="On_Time_File">
        /// This control selects the file name for the list of the burst-duration sweep (burst-duration sweep list).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorOnTimeFile(string On_Time_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorOnTimeFile(this._handle, On_Time_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the file name for the list of the burst-interval sweep (burst-interval sweep list).
        /// 
        /// Notes:
        /// 
        /// (1) Only visible for activated generator list sweep in the generator functions "Burst" and "Sine? Burst".
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:INTerval 'filename'
        /// </summary>
        /// <param name="Interval_File">
        /// This control selects the file name for the list of the burst-interval sweep (burst-interval sweep list).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorIntervalFile(string Interval_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorIntervalFile(this._handle, Interval_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter which can be set up in the analyzer and generator.
        /// 
        /// Notes:
        /// 
        /// (1) It is not possible to use a filter if the low-distortion oscillator is activated.
        /// 
        /// Remote-control command(s):
        /// SOURce:FILTer OFF | UFIL1 | UFIL2 | UFIL3 | UFIL4 | UFIL5 | UFIL6 | UFIL7 | UFIL8 | UFIL9 | AWE | CARM | CCIU | CCIR | CCIT | CMES | DCN | DEMP17 | DEMP5015 | DEMP50 | DEMP75 | IECT | JITT | URUM | WRUM | PEMP17 | PEMP5015 | PEMP50 | PEMP75 | HP22 | HP400 | LP22 | LP30 | LP80 | AES17 | CWE
        /// 
        /// </summary>
        /// <param name="Filter">
        /// This control selects generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN      (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP5015 (26) - Preemph 50/15
        /// RSUPV_GEN_FILTER_PEMP50   (27) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (28) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (29) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (30) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (31) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (32) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (33) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// Default Value: RSUPV_GEN_FILTER_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is filtered in the time domain.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFilter(int Filter)
        {
            int pInvokeResult = PInvoke.SetGeneratorFilter(this._handle, Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the filter which can be set up in the analyzer and generator.
        /// 
        /// Remote-control command(s):
        /// SOURce:FILTer?
        /// </summary>
        /// <param name="Filter">
        /// This control returns generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN DC   (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP50   (26) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (27) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (28) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (29) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (30) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (31) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (32) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFilter(out int Filter)
        {
            int pInvokeResult = PInvoke.GetGeneratorFilter(this._handle, out Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates equalizer function.
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is precorrected in the frequency domain.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:EQUalize:STATe ON | OFF
        /// </summary>
        /// <param name="Equalizer">
        /// This control activates/deactivates equalizer function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorEqualizer(bool Equalizer)
        {
            int pInvokeResult = PInvoke.SetGeneratorEqualizer(this._handle, System.Convert.ToUInt16(Equalizer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns equalizer function state
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is precorrected in the frequency domain.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:EQUalize:STATe?
        /// </summary>
        /// <param name="Equalizer">
        /// This control returns equalizer function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorEqualizer(out bool Equalizer)
        {
            ushort EqualizerAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorEqualizer(this._handle, out EqualizerAsUShort);
            Equalizer = System.Convert.ToBoolean(EqualizerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the precorrector file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:OEQualize 'filename'
        /// </summary>
        /// <param name="Equalizer_File">
        /// This control selects the precorrector file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorEqualizerFile(string Equalizer_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorEqualizerFile(this._handle, Equalizer_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The equalizer can be selected for both channels together (Track) or separately from each other (Split).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:EQUalize:CHANnels TRACk | SPLit
        /// </summary>
        /// <param name="Equalizer">
        /// This control selects the Equalizer coupling.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_GEN_STEREO_FILTER_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorEqualizerCoupling(int Equalizer)
        {
            int pInvokeResult = PInvoke.SetGeneratorEqualizerCoupling(this._handle, Equalizer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Equalizer coupling.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:EQUalize:CHANnels?
        /// </summary>
        /// <param name="Equalizer">
        /// This control returns the Equalizer coupling.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorEqualizerCoupling(out int Equalizer)
        {
            int pInvokeResult = PInvoke.GetGeneratorEqualizerCoupling(this._handle, out Equalizer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects generator function.
        /// 
        /// Note(s):
        /// 
        /// (1) Functions 'Sine^2 Burst', 'DIM', 'Modulation', 'Play+Anlr', 'Square' and 'Chirp' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion[:SHAPe] SINusoid | STEReo | MULTisine | BURSt | S2Pulse | MDISt | DFD | DIM | RANDom | ARBitrary | POLarity | MODulation | DC | PLAY | PLYAnlr | SQUare | CHIRp | UNIVersal | LIPSync
        /// </summary>
        /// <param name="Generator_Function">
        /// This control selects generator function.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FUNC_SINE        (0)  - Sine
        /// RSUPV_GEN_FUNC_STEREO_SINE (1)  - Stereo Sine
        /// RSUPV_GEN_FUNC_MULTISINE   (2)  - Multisine
        /// RSUPV_GEN_FUNC_SINE_BURST  (3)  - Sine Burst
        /// RSUPV_GEN_FUNC_SINE2_BURST (4)  - Sine^2 Burst
        /// RSUPV_GEN_FUNC_MOD_DIST    (5)  - Mod Dist
        /// RSUPV_GEN_FUNC_DFD         (6)  - DFD
        /// RSUPV_GEN_FUNC_DIM         (7)  - DIM
        /// RSUPV_GEN_FUNC_RANDOM      (8)  - Random
        /// RSUPV_GEN_FUNC_ARB         (9)  - Arbitrary
        /// RSUPV_GEN_FUNC_POLARITY    (10) - Polarity
        /// RSUPV_GEN_FUNC_MODULATION  (11) - Modulation
        /// RSUPV_GEN_FUNC_DC          (12) - DC (Direct-Current Voltage)
        /// RSUPV_GEN_FUNC_PLAY        (13) - Play
        /// RSUPV_GEN_FUNC_PLYA        (14) - Play+Anlr
        /// RSUPV_GEN_FUNC_SQUARE      (16) - Square
        /// RSUPV_GEN_FUNC_CHIRP       (15) - Chirp
        /// RSUPV_GEN_FUNC_UNIVERSAL   (17) - Universal
        /// RSUPV_GEN_FUNC_LIPSYNC     (18) - Lip Sync
        /// 
        /// Default Value: RSUPV_GEN_FUNC_SINE (0)
        /// 
        /// Notes:
        /// 
        /// (1) Sine: The generator generates a sinewave signal. Frequency and level are the same for both channels.
        /// 
        /// (2) Stereo Sine: The generator generates set freely and
        /// separately required for this function.
        /// 
        /// (3) Multisine: The generator generates a multi-tone signal with up to 17 sinewave tones. The frequency and level
        /// (and also the phase with the R&amp;S UPV-B6 option) can be freely selected for each tone. Without the R&amp;S UPV-B6 option, the phase is optimized in such a way that the ratio of peak value to RMS is as low as possible, which is often desired in the case of noise-like signals. Owing to the absence of associated
        /// windowing, linking the frequency spacing of the multi-sinewave to the resolution of the FFT allows extremely fast frequency response measurement.
        /// 
        /// (4) Sine Burst:The generator generates a sinewave signal, the amplitude of which changes periodically between high level (Voltage) during the burst duration (On Time) and low level (Low Level) during the burst pause. The "Interval" parameter field is used to set the repetition rate of the burst. The following always applies: Burst pause = Burst period (Interval) - Burst duration (On Time). Low Level can be set as a fixed value or as a ratio relative to the burst level.
        /// 
        /// (5) Sine^2 Burst:The generator generates a sine^2 signal, the amplitude of which is periodically activated (during the burst duration, i.e. On Time) and deactivated. The pulse can be inverted by entering a negative voltage.
        /// The "Interval" parameter field is used to set the repetition rate of the burst. The following always applies: Burst pause = Burst period (Interval) - Burst duration (On Time).
        /// The burst starts after generator settings have been changed or a measurement has been started. The "Burst On Delay" parameter is used to set a defined delay time.
        /// 
        /// (6) Mod Dist: The generator generates a test signal for the intermodulation measurement in accordance with SMPTE
        /// and for the modulation factor analysis in accordance with IEC 268-3. The signal consists of two sinewaves: a low-frequency noise signal and a high-frequency useful signal. The level of the noise signal is 1 to 10 times higher than that of the useful signal.
        /// 
        /// (7) DFD:The generator generates a test signal for the intermodulation measurement using the differential-tone
        /// method in accordance with IEC 118 or 268.
        /// 
        /// (8) DIM: The generator generates a test signal for measuring the Dynamic InterModulation distortions in accordance with IEC 268-3. The R&amp;S UPV-B3 option is required to generate this signal. A high-frequency sinewave is superimposed on a low-frequency squarewave signal. The squarewave
        /// signal is limited with respect to bandwidth using a first-order filter. The amplitude of the squarewave signal is 4 times higher than that of the sinewave signal.
        /// 
        /// (9) Random: The generator generates a noise signal, the characteristics of which can be defined in either the time or
        /// frequency domain:Time domain - Selectable distribution function for amplitude. Frequency domain - Several thousand equidistant sinewave lines in a selectable frequency domain
        /// 
        /// (10) Arbitrary: The generator generates a freely definable curve shape which is read out from a file as a sequence of
        /// samples. The maximum length is 16384 samples. When output, the curve is repeated continuously in an unbroken sequence. The individual samples are output at the sampling rate selected in the generator.
        /// 
        /// (11) Polarity: The generator generates a test signal for the polarity measurement. This measurement is used to check
        /// the polarity of the input signal transmitted by the DUT.
        /// 
        /// (12) DC (Direct-Current Voltage): The generator generates a DC voltage signal. Unlike the DC offset, it is possible to sweep this DC voltage.
        /// 
        /// (13) Modulation: The generator generates a sinewave signal which can be modulated with respect to frequency or
        /// amplitude according to a sinusoidal function.
        /// 
        /// (14) Play: The generator enables any WAV file to be replayed.
        /// 
        /// (15) Play+Anlr: Using this function, you can play back any WAV file, and optionally superimpose on it a signal looped back from the analyzer.
        /// 
        /// (16) Square: The generator produces a square wave signal. The frequency and the level are the same for both
        /// channels.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFunction(int Generator_Function)
        {
            int pInvokeResult = PInvoke.SetGeneratorFunction(this._handle, Generator_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns generator function.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion[:SHAPe]?
        /// </summary>
        /// <param name="Generator_Function">
        /// This control returns generator function.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FUNC_SINE        (0)  - Sine
        /// RSUPV_GEN_FUNC_STEREO_SINE (1)  - Stereo Sine
        /// RSUPV_GEN_FUNC_MULTISINE   (2)  - Multisine
        /// RSUPV_GEN_FUNC_SINE_BURST  (3)  - Sine Burst
        /// RSUPV_GEN_FUNC_SINE2_BURST (4)  - Sine^2 Burst
        /// RSUPV_GEN_FUNC_MOD_DIST    (5)  - Mod Dist
        /// RSUPV_GEN_FUNC_DFD         (6)  - DFD
        /// RSUPV_GEN_FUNC_DIM         (7)  - DIM
        /// RSUPV_GEN_FUNC_RANDOM      (8)  - Random
        /// RSUPV_GEN_FUNC_ARB         (9)  - Arbitrary
        /// RSUPV_GEN_FUNC_POLARITY    (10) - Polarity
        /// RSUPV_GEN_FUNC_MODULATION  (11) - Modulation
        /// RSUPV_GEN_FUNC_DC          (12) - DC (Direct-Current Voltage)
        /// RSUPV_GEN_FUNC_PLAY        (13) - Play
        /// RSUPV_GEN_FUNC_PLYA        (14) - Play+Anlr
        /// RSUPV_GEN_FUNC_SQUARE      (16) - Square
        /// RSUPV_GEN_FUNC_CHIRP       (15) - Chirp
        /// RSUPV_GEN_FUNC_UNIVERSAL   (17) - Universal
        /// RSUPV_GEN_FUNC_LIPSYNC     (18) - Lip Sync
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFunction(out int Generator_Function)
        {
            int pInvokeResult = PInvoke.GetGeneratorFunction(this._handle, out Generator_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In the analog generator, the very low-noise and low-distortion
        /// generator (R&amp;S UPV-B1 option) can be used to generate a sinewave signal instead of the universal generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOWDistortion ON | OFF
        /// </summary>
        /// <param name="Low_Distortion">
        /// This control activates/deactivates the low-distortion generator.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) If the low-distortion generator is activated then DC Offset is not possible.
        /// 
        /// (2) This parameter does not appear in the digital generator.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineLowDistortion(bool Low_Distortion)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineLowDistortion(this._handle, System.Convert.ToUInt16(Low_Distortion));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the low-distortion generator state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOWDistortion?
        /// </summary>
        /// <param name="Low_Distortion">
        /// This control returns the low-distortion generator state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) If the low-distortion generator is activated then DC Offset is not possible.
        /// 
        /// (2) This parameter does not appear in the digital generator.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineLowDistortion(out bool Low_Distortion)
        {
            ushort Low_DistortionAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorSineLowDistortion(this._handle, out Low_DistortionAsUShort);
            Low_Distortion = System.Convert.ToBoolean(Low_DistortionAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the frequency and phase setting for Channel 1 and 2. 
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:SELect FQPH | FQFQ
        /// </summary>
        /// <param name="Frequency_Mode">
        /// This control determines the frequency and phase setting for Channel 1 and 2. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FREQ_FQPH (0) - F&amp;Ph
        /// RSUPV_GEN_STEREO_FREQ_FQFQ (1) - Ch1&amp;2
        /// 
        /// Default Value: RSUPV_GEN_STEREO_FREQ_FQPH (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) F&amp;Ph: Channel 1 and 2 have the same frequency but the
        /// phase between the two channels can be selected. With the frequency sweep, the phase between the two channels remains constant.
        /// 
        /// (2) Ch1&amp;2: The frequency can be entered separately for
        /// Channel 1 and 2. There is no fixed phase relationship between the channels. With the frequency sweep, the frequency of Channel 1 is swept but Channel 2 remains unchanged.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoFrequencyMode(int Frequency_Mode)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoFrequencyMode(this._handle, Frequency_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency and phase setting for Channel 1 and 2. 
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:SELect?
        /// </summary>
        /// <param name="Frequency_Mode">
        /// This control returns the frequency and phase setting for Channel 1 and 2. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FREQ_FQPH (0) - F&amp;Ph
        /// RSUPV_GEN_STEREO_FREQ_FQFQ (1) - Ch1&amp;2
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) F&amp;Ph: Channel 1 and 2 have the same frequency but the
        /// phase between the two channels can be selected. With the frequency sweep, the phase between the two channels remains constant.
        /// 
        /// (2) Ch1&amp;2: The frequency can be entered separately for
        /// Channel 1 and 2. There is no fixed phase relationship between the channels. With the frequency sweep, the frequency of Channel 1 is swept but Channel 2 remains unchanged.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoFrequencyMode(out int Frequency_Mode)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoFrequencyMode(this._handle, out Frequency_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the level setting for Channel 1 and 2. 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:SELect VLRT | VLVL
        /// </summary>
        /// <param name="Voltage_Mode">
        /// This control determines the level setting for Channel 1 and 2. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_VOLT_VLRT (0) - Ch2/1
        /// RSUPV_GEN_STEREO_VOLT_VLVL (1) - Ch1&amp;2
        /// 
        /// Default Value: RSUPV_GEN_STEREO_VOLT_VLRT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Ch2/1: The levels of Channel 1 and 2 have a fixed ratio
        /// relative to each other. With the level sweep, this ratio remains constant.
        /// 
        /// (2) Ch1&amp;2: The level can be set separately for Channel 1 and 2.
        /// With the level sweep, the level of Channel 1 is swept but Channel 2 remains unchanged.
        /// 
        /// (3) The maximum value depends on the set DC offset. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoVoltageMode(int Voltage_Mode)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoVoltageMode(this._handle, Voltage_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level setting for Channel 1 and 2. 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:SELect?
        /// </summary>
        /// <param name="Voltage_Mode">
        /// This control returns the level setting for Channel 1 and 2. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_VOLT_VLRT (0) - Ch2/1
        /// RSUPV_GEN_STEREO_VOLT_VLVL (1) - Ch1&amp;2
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Ch2/1: The levels of Channel 1 and 2 have a fixed ratio
        /// relative to each other. With the level sweep, this ratio remains constant.
        /// 
        /// (2) Ch1&amp;2: The level can be set separately for Channel 1 and 2.
        /// With the level sweep, the level of Channel 1 is swept but Channel 2 remains unchanged.
        /// 
        /// (3) The maximum value depends on the set DC offset. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoVoltageMode(out int Voltage_Mode)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoVoltageMode(this._handle, out Voltage_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets frequency of Channel 2 (Freq Mode Ch1&amp;2).
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:CH2Stereo
        /// </summary>
        /// <param name="Frequency_Ch2">
        /// This control sets frequency of Channel 2 (Freq Mode Ch1&amp;2).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frequency Ch2 entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoFrequencyCh2(double Frequency_Ch2, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoFrequencyCh2(this._handle, Frequency_Ch2, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns frequency of Channel 2 (Freq Mode Ch1&amp;2).
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:CH2Stereo?
        /// </summary>
        /// <param name="Frequency_Ch2">
        /// This control returns frequency of Channel 2 (Freq Mode Ch1&amp;2).
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Frequency Ch2.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoFrequencyCh2(out double Frequency_Ch2, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoFrequencyCh2(this._handle, out Frequency_Ch2, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets level of Channel 2 (Volt Mode Ch1&amp;2).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CH2Stereo
        /// </summary>
        /// <param name="Voltage_Ch2">
        /// This control sets level of Channel 2 (Volt Mode Ch1&amp;2).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Voltage Ch2 entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoVoltageCh2(double Voltage_Ch2, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoVoltageCh2(this._handle, Voltage_Ch2, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns level of Channel 2 (Volt Mode Ch1&amp;2).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:CH2Stereo?
        /// </summary>
        /// <param name="Voltage_Ch2">
        /// This control returns level of Channel 2 (Volt Mode Ch1&amp;2).
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Voltage Ch2.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoVoltageCh2(out double Voltage_Ch2, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoVoltageCh2(this._handle, out Voltage_Ch2, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the channel filter. The filter can be selected for both channels together (Track) or separately from each other (Split).
        /// 
        /// Remote-control command(s):
        /// SOURce:FILTer:CHANnels TRACk | SPLit
        /// </summary>
        /// <param name="Filter">
        /// This control selects the channel filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_GEN_STEREO_FILTER_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoChannelFilterCoupling(int Filter)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoChannelFilterCoupling(this._handle, Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel filter type.
        /// 
        /// Remote-control command(s):
        /// SOURce:FILTer:CHANnels?
        /// </summary>
        /// <param name="Filter">
        /// This control returns the channel filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_STEREO_FILTER_TRACK (0) - Track
        /// RSUPV_GEN_STEREO_FILTER_SPLIT (1) - Split
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoChannelFilterCoupling(out int Filter)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoChannelFilterCoupling(this._handle, out Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter which can be set up in the analyzer and generator.
        /// 
        /// Notes:
        /// 
        /// (1) Common filter for channel 1 and channel 2, if "Track" filter was selected. Filter for channel 1, if "Split" filter was selected. The generator signal is filtered in the time domain. One of the user-definable filters in the Filter Panel or a weighting filter can be selected. All level settings apply to the unfiltered signal
        /// 
        /// (2) It is not possible to use a filter if the low-distortion oscillator is activated.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:STEReo2:FILTer OFF | UFIL1 | UFIL2 | UFIL3 | UFIL4 | UFIL5 | UFIL6 | UFIL7 | UFIL8 | UFIL9 | AWE | CARM | CCIU | CCIR | CCIT | CMES | DCN | DEMP17 | DEMP5015 | DEMP50 | DEMP75 | IECT | JITT | URUM | WRUM | PEMP17 | PEMP5015 | PEMP50 | PEMP75 | HP22 | HP400 | LP22 | LP30 | LP80 | AES17 | CWE
        /// 
        /// </summary>
        /// <param name="Filter">
        /// This control selects generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN      (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP5015 (26) - Preemph 50/15
        /// RSUPV_GEN_FILTER_PEMP50   (27) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (28) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (29) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (30) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (31) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (32) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (33) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// Default Value: RSUPV_GEN_FILTER_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is filtered in the time domain.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoChannelFilter(int Filter)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoChannelFilter(this._handle, Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the filter which can be set up in the analyzer and generator.
        /// 
        /// Remote-control command(s):
        /// SOURce:STEReo2:FILTer?
        /// </summary>
        /// <param name="Filter">
        /// This control returns generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN DC   (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP50   (26) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (27) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (28) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (29) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (30) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (31) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (32) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoChannelFilter(out int Filter)
        {
            int pInvokeResult = PInvoke.GetGeneratorStereoChannelFilter(this._handle, out Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates equalizer function.
        /// 
        /// Notes:
        /// 
        /// (1) Equalizer for channel 2 if "Split" equalizeris active.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:STEReo2:EQUalize ON | OFF
        /// </summary>
        /// <param name="Equalizer">
        /// This control activates/deactivates equalizer function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoEqualizer(bool Equalizer)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoEqualizer(this._handle, System.Convert.ToUInt16(Equalizer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns equalizer function state.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:STEReo2:EQUalize?
        /// </summary>
        /// <param name="Equalizer">
        /// This control returns equalizer function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStereoEqualizer(out bool Equalizer)
        {
            ushort EqualizerAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorStereoEqualizer(this._handle, out EqualizerAsUShort);
            Equalizer = System.Convert.ToBoolean(EqualizerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the equalizer file.
        /// 
        /// Note(s):
        /// 
        /// (1) The generator signal is precorrected in the frequency domain using the file selected in the "Equal File/Equal File Ch1" parameter field.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:STEReo2:OEQualize 'filename'
        /// </summary>
        /// <param name="Equal_File">
        /// This control selects the equalizer file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStereoEqualizerFile(string Equal_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorStereoEqualizerFile(this._handle, Equal_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of sinewave tones of the multi-sinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:MULTisine:COUNt
        /// </summary>
        /// <param name="No_of_Sine">
        /// This control sets the number of sinewave tones of the multi-sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultisineNoOfSine(int No_of_Sine)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultisineNoOfSine(this._handle, No_of_Sine);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of sinewave tones of the multi-sinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:MULTisine:COUNt?
        /// </summary>
        /// <param name="No_of_Sine">
        /// This control returns the number of sinewave tones of the multi-sinewave signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultisineNoOfSine(out int No_of_Sine)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultisineNoOfSine(this._handle, out No_of_Sine);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start phase of sinewave number of the multisinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:PHASe&lt;i&gt;
        /// </summary>
        /// <param name="Number">
        /// This control sets the sinewave number of the multi-sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Phase_No_i">
        /// This control sets the start phase of sinewave number of the multisinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Phase No i entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_RAD (41) - RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultisinePhaseNoi(int Number, double Phase_No_i, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultisinePhaseNoi(this._handle, Number, Phase_No_i, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start phase of sinewave number of the multisinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:PHASe&lt;i&gt;?
        /// </summary>
        /// <param name="Number">
        /// This control sets the sinewave number of the multi-sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Phase_No_i">
        /// This control returns the start phase of sinewave number of the multisinewave signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Phase No i.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultisinePhaseNoi(int Number, out double Phase_No_i, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultisinePhaseNoi(this._handle, Number, out Phase_No_i, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a gain factor which can be used to vary the total level of the multi-sinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:TOTal:GAIN DB
        /// </summary>
        /// <param name="Total_Gain">
        /// This control sets a gain factor which can be used to vary the total level of the multi-sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The maximum value depends on the set DC offset.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultisineTotalGain(double Total_Gain)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultisineTotalGain(this._handle, Total_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a gain factor which can be used to vary the total level of the multi-sinewave signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:TOTal:GAIN?
        /// </summary>
        /// <param name="Total_Gain">
        /// This control returns a gain factor which can be used to vary the total level of the multi-sinewave signal.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The maximum value depends on the set DC offset.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultisineTotalGain(out double Total_Gain)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultisineTotalGain(this._handle, out Total_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level of the sinewave during the burst pause. 
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only in Sine Burst mode.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:LOWLevel
        /// </summary>
        /// <param name="Low_Level">
        /// This control sets the level of the sinewave during the burst pause. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) Low Level cannot be higher than the Voltage; if Voltage is reduced (also during a sweep), Low Level may also be reduced. Low Level can also be set as a fixed ratio relative to Voltage; the units %on, dBon and (in the analog generator only) V/on are available for this purpose.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Low Level entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineBurstLowLevel(double Low_Level, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineBurstLowLevel(this._handle, Low_Level, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level of the sinewave during the burst pause. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:LOWLevel?
        /// </summary>
        /// <param name="Low_Level">
        /// This control returns the level of the sinewave during the burst pause. 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Low Level.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineBurstLowLevel(out double Low_Level, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineBurstLowLevel(this._handle, out Low_Level, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the burst duration.
        /// 
        /// Remote-control command(s):
        /// SOURce:ONTime
        /// </summary>
        /// <param name="On_Time">
        /// This control sets the burst duration.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes: 
        /// 
        /// (1) Entered as a fixed time or as a number of periods (cycles) of the sinewave frequency. On Time is always less than Interval; if increased, Interval may also be increased.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of On Time entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineBurstOnTime(double On_Time, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineBurstOnTime(this._handle, On_Time, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the burst duration.
        /// 
        /// Remote-control command(s):
        /// SOURce:ONTime?
        /// </summary>
        /// <param name="On_Time">
        /// This control returns the burst duration.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of On Time.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineBurstOnTime(out double On_Time, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineBurstOnTime(this._handle, out On_Time, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the repetition rate of the burst signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:INTerval
        /// </summary>
        /// <param name="Interval">
        /// This control sets the repetition rate of the burst signal.
        /// 
        /// Valid Range:  max 60 s
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Entered as a fixed time or as a number of periods (cycles) of the sinewave frequency.
        /// 
        /// (2) Interval is always greater than or equal to On Time.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Interval entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineBurstInterval(double Interval, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineBurstInterval(this._handle, Interval, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the repetition rate of the burst signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:INTerval?
        /// </summary>
        /// <param name="Interval">
        /// This control returns the repetition rate of the burst signal.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Interval.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineBurstInterval(out double Interval, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineBurstInterval(this._handle, out Interval, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the delay time which must expire (after generator settings have been changed or a measurement has been started) before the generator can start the burst with the high level (Voltage).
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:ONTime:DELay
        /// </summary>
        /// <param name="Burst_on_Delay">
        /// This control sets the delay time which must expire (after generator settings have been changed or a measurement has been started) before the generator can start the burst with the high level (Voltage). During this time, the signal is output with the low level (Low Level).
        /// 
        /// Valid Range: 0.0 to 60.0 s
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Burst on Delay entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineBurstOnDelay(double Burst_on_Delay, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineBurstOnDelay(this._handle, Burst_on_Delay, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the delay time which must expire (after generator settings have been changed or a measurement has been started) before the generator can start the burst with the high level (Voltage).
        /// 
        /// Remote-control command(s):
        /// SOURce:ONTime:DELay?
        /// </summary>
        /// <param name="Burst_on_Delay">
        /// This control returns the delay time which must expire (after generator settings have been changed or a measurement has been started) before the generator can start the burst with the high level (Voltage). During this time, the signal is output with the low level (Low Level).
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Burst on Delay.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineBurstOnDelay(out double Burst_on_Delay, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineBurstOnDelay(this._handle, out Burst_on_Delay, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a test signal for the intermodulation measurement in accordance with SMPTE and for the modulation factor analysis in accordance with IEC 268-3.
        /// 
        /// Notes:
        /// 
        /// (1) The signal consists of two sinewaves: a low-frequency noise signal and a high-frequency useful signal. The level of the noise signal is 1 to 10 times higher than that of the useful signal.
        /// 
        /// (2) According to IEC 268-3, the frequency of the noise signal must be between 0.5 and 1.5 octaves above the lower limit frequency of the DUT (60 Hz according to SMPTE).
        /// According to IEC 268-3, the frequency of the useful signal must be between 0.5 and 1.5 octaves below the upper limit frequency of the DUT (7 kHz according to SMPTE). The frequency ratio of useful signal to noise signal should be greater than 8. According to SMPTE, the level ratio of noise signal to useful signal must be 4:1; according to IEC 268-3, a ratio of 10:1 is also possible.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency[1]
        /// SOURce:FREQuency2
        /// SOURce:VOLTage:RATio
        /// SOURce:VOLTage:TOTal
        /// 
        /// 
        /// </summary>
        /// <param name="Upper_Freq">
        /// This control sets the frequency of the high-frequency useful signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Upper_Freq__Units">
        /// This control sets the units of Upper Freq. entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Lower_Freq">
        /// This control sets the frequency of the low-frequency noise signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Lower_Freq__Units">
        /// This control sets the units of Lower Freq. entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Volt_Ch2_1">
        /// This control sets the level ratio of noise signal to useful signal as a dimension-less number.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Total_Voltage">
        /// This control sets the level of the overall signal. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) The maximum RMS depends on the level ratio. The maximum value depends on the set DC offset. In the analog generator, the maximum total voltage also depends on the settings for Output Type and Max Voltage in the Generator Config panel.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:TOTal
        /// 
        /// </param>
        /// <param name="Voltage_Units">
        /// This control sets the units of Total Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorModDist(double Upper_Freq, int Upper_Freq__Units, double Lower_Freq, int Lower_Freq__Units, double Volt_Ch2_1, double Total_Voltage, int Voltage_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorModDist(this._handle, Upper_Freq, Upper_Freq__Units, Lower_Freq, Lower_Freq__Units, Volt_Ch2_1, Total_Voltage, Voltage_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the high-frequency useful signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency[1]
        /// </summary>
        /// <param name="Upper_Frequency">
        /// This control sets the frequency of the high-frequency useful signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Upper Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModDistUpperFrequency(double Upper_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorModDistUpperFrequency(this._handle, Upper_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the high-frequency useful signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency[1]?
        /// </summary>
        /// <param name="Upper_Frequency">
        /// This control returns the frequency of the high-frequency useful signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Upper Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModDistUpperFrequency(out double Upper_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorModDistUpperFrequency(this._handle, out Upper_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the low-frequency noise signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency2
        /// </summary>
        /// <param name="Lower_Frequency">
        /// This control sets the frequency of the low-frequency noise signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Lower Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModDistLowerFrequency(double Lower_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorModDistLowerFrequency(this._handle, Lower_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the low-frequency noise signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency2?
        /// </summary>
        /// <param name="Lower_Frequency">
        /// This control returns the frequency of the low-frequency noise signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Lower Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModDistLowerFrequency(out double Lower_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorModDistLowerFrequency(this._handle, out Lower_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level ratio of noise signal to useful signal as a dimension-less number.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RATio
        /// </summary>
        /// <param name="Voltage_LF_UF">
        /// This control sets the level ratio of noise signal to useful signal as a dimension-less number.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModDistLevelRatio(double Voltage_LF_UF)
        {
            int pInvokeResult = PInvoke.SetGeneratorModDistLevelRatio(this._handle, Voltage_LF_UF);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level ratio of noise signal to useful signal as a dimension-less number.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RATio?
        /// </summary>
        /// <param name="Voltage_LF_UF">
        /// This control returns the level ratio of noise signal to useful signal as a dimension-less number.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModDistLevelRatio(out double Voltage_LF_UF)
        {
            int pInvokeResult = PInvoke.GetGeneratorModDistLevelRatio(this._handle, out Voltage_LF_UF);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a test signal for the intermodulation measurement using the differential-tone method in accordance with IEC 118 or 268. 
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion:MODE IEC268 | IEC118
        /// SOURce:FREQuency:MEAN
        /// SOURce:FREQuency:DIFFerence
        /// SOURce:FREQuency&lt;1..17&gt;
        /// </summary>
        /// <param name="Mode">
        /// This control selects generator mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_MODE_IEC_268 (2) - IEC 268
        /// RSUPV_GEN_MODE_IEC_118 (3) - IEC 118
        /// 
        /// 
        /// Default Value: RSUPV_GEN_MODE_IEC_268 (2)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) IEC 268: Entry of center frequency (Mean Freq) and
        /// difference frequency (Diff Freq). If a frequency sweep (for the X or Z-axis) is selected, the center frequency is swept.
        /// 
        /// (2) IEC 118: Entry of upper frequency (Upper Freq) and
        /// difference frequency (Diff Freq). If a frequency sweep (for the X or Z-axis) is selected, the upper frequency is swept.
        /// 
        /// </param>
        /// <param name="Diff_Freq">
        /// This control sets the frequency difference of the two sinewaves.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Diff_Freq_Units">
        /// This control sets the units of Diff Freq. entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Mean_Freq">
        /// This control sets the center frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only in the IEC 268 mode.
        /// </param>
        /// <param name="Mean_Freq_Units">
        /// This control sets the units of Mean Freq. entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Upper_Freq">
        /// This control sets the upper frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only in the IEC 118 mode.
        /// </param>
        /// <param name="Upper_Freq_Units">
        /// This control sets the units of Upper Freq. entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Voltage_Value">
        /// This control sets voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Voltage_Units">
        /// This control sets the units of Voltage Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorDFD(int Mode, double Diff_Freq, int Diff_Freq_Units, double Mean_Freq, int Mean_Freq_Units, double Upper_Freq, int Upper_Freq_Units, double Voltage_Value, int Voltage_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorDFD(this._handle, Mode, Diff_Freq, Diff_Freq_Units, Mean_Freq, Mean_Freq_Units, Upper_Freq, Upper_Freq_Units, Voltage_Value, Voltage_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the center frequency (in the IEC 268 mode).
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:MEAN
        /// </summary>
        /// <param name="Mean_Frequency">
        /// This control sets the center frequency (in the IEC 268 mode).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Mean Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDFDMeanFrequency(double Mean_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorDFDMeanFrequency(this._handle, Mean_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the center frequency (in the IEC 268 mode).
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:MEAN?
        /// </summary>
        /// <param name="Mean_Frequency">
        /// This control returns the center frequency (in the IEC 268 mode).
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Mean Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDFDMeanFrequency(out double Mean_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorDFDMeanFrequency(this._handle, out Mean_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency difference of the two sinewaves.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:DIFFerence
        /// </summary>
        /// <param name="Diff_Frequency">
        /// This control sets the frequency difference of the two sinewaves.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Diff Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDFDDiffFrequency(double Diff_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorDFDDiffFrequency(this._handle, Diff_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency difference of the two sinewaves.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:DIFFerence?
        /// </summary>
        /// <param name="Diff_Frequency">
        /// This control returns the frequency difference of the two sinewaves.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Diff Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDFDDiffFrequency(out double Diff_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorDFDDiffFrequency(this._handle, out Diff_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a test signal for measuring the Dynamic InterModulation distortions in accordance with IEC 268-3. The R&amp;S UPV-B3 option is required to generate this signal.
        /// 
        /// Notes:
        /// 
        /// (1) A high-frequency sinewave is superimposed on a low-frequency squarewave signal. The squarewave signal is limited with respect to bandwidth using a first-order filter. The amplitude of the squarewave signal is 4 times higher than that of the sinewave signal.
        /// 
        /// (2) This function is available only in Analog generator.
        /// 
        /// (3) This function is not available in UPP.
        ///  
        /// Remote-control command(s):
        /// SOURce:DIM DIMA | DIMB
        /// SOURce:BANDwidth F30 | F100
        /// SOURce:VOLTage:TOTal
        /// </summary>
        /// <param name="Square_Sine">
        /// This control selects the ratio between the frequencies of the squarewave signal and sinewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_DIMA (0) - 2.96/14
        /// RSUPV_GEN_DIM_DIMB (1) - 3.15/15
        /// 
        /// Default Value: RSUPV_GEN_DIM_DIMA (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) 2.96/14: Squarewave signal: 2.96 kHz;
        ///              Sinewave signal: 14.0 kHz
        /// 
        /// (2) 3.15/15: Squarewave signal: 3.15 kHz;
        ///              Sinewave signal: 15.0 kHz
        /// </param>
        /// <param name="Bandwidth">
        /// This control selects the bandwidth (3 dB) of the first-order filter in order to limit the bandwidth of the squarewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_BWIDTH_F30  (0) - 30 kHz
        /// RSUPV_GEN_DIM_BWIDTH_F100 (1) - 100 kHz
        /// 
        /// Default Value: RSUPV_GEN_DIM_BWIDTH_F30 (0)
        /// </param>
        /// <param name="Voltage_Value">
        /// This control sets voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Voltage_Units">
        /// This control sets the units of Voltage Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorDIM(int Square_Sine, int Bandwidth, double Voltage_Value, int Voltage_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorDIM(this._handle, Square_Sine, Bandwidth, Voltage_Value, Voltage_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ratio between the frequencies of the squarewave signal and sinewave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIM DIMA | DIMB
        /// </summary>
        /// <param name="Square_Sine">
        /// This control selects the ratio between the frequencies of the squarewave signal and sinewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_DIMA (0) - 2.96/14
        /// RSUPV_GEN_DIM_DIMB (1) - 3.15/15
        /// RSUPV_GEN_DIM_DIMS (2) - 2.96/8 kHz
        /// 
        /// Default Value: RSUPV_GEN_DIM_DIMA (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) 2.96/14: Squarewave signal: 2.96 kHz;
        ///              Sinewave signal: 14.0 kHz
        /// 
        /// (2) 3.15/15: Squarewave signal: 3.15 kHz;
        ///              Sinewave signal: 15.0 kHz
        /// 
        /// (3) 2.96/8: Squarewave signal: 2.96 kHz;
        ///              Sinewave signal: 8.0 kHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDIMSquareToSine(int Square_Sine)
        {
            int pInvokeResult = PInvoke.SetGeneratorDIMSquareToSine(this._handle, Square_Sine);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ratio between the frequencies of the squarewave signal and sinewave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:DIM?
        /// </summary>
        /// <param name="Square_Sine">
        /// This control returns the ratio between the frequencies of the squarewave signal and sinewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_DIMA (0) - 2.96/14
        /// RSUPV_GEN_DIM_DIMB (1) - 3.15/15
        /// RSUPV_GEN_DIM_DIMS (2) - 2.96/8
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDIMSquareToSine(out int Square_Sine)
        {
            int pInvokeResult = PInvoke.GetGeneratorDIMSquareToSine(this._handle, out Square_Sine);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the bandwidth (3 dB) of the first-order filter in order to limit the bandwidth of the squarewave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:BANDwidth F30 | F100
        /// </summary>
        /// <param name="Bandwidth">
        /// This control selects the bandwidth (3 dB) of the first-order filter in order to limit the bandwidth of the squarewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_BWIDTH_F30  (0) - 30 kHz
        /// RSUPV_GEN_DIM_BWIDTH_F100 (1) - 100 kHz
        /// 
        /// Default Value: RSUPV_GEN_DIM_BWIDTH_F30 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDIMBandwidth(int Bandwidth)
        {
            int pInvokeResult = PInvoke.SetGeneratorDIMBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bandwidth (3 dB) of the first-order filter in order to limit the bandwidth of the squarewave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:BANDwidth?
        /// </summary>
        /// <param name="Bandwidth">
        /// This control returns the bandwidth (3 dB) of the first-order filter in order to limit the bandwidth of the squarewave signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_DIM_BWIDTH_F30  (0) - 30 kHz
        /// RSUPV_GEN_DIM_BWIDTH_F100 (1) - 100 kHz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDIMBandwidth(out int Bandwidth)
        {
            int pInvokeResult = PInvoke.GetGeneratorDIMBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects characteristics of the noise signal defined in the frequency or time domain.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:DOMain FREQuency | TIME
        /// </summary>
        /// <param name="Domain">
        /// This control selects characteristics of the noise signal defined in the frequency or time domain.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_RANDOM_DOMAIN_FREQ (0) - Freq
        /// RSUPV_GEN_RANDOM_DOMAIN_TIME (1) - Time
        /// 
        /// Default Value: RSUPV_GEN_RANDOM_DOMAIN_TIME (1)
        /// 
        /// Notes:
        /// 
        /// (1) Freq: To generate the output signal, sinewave lines with
        /// adjustable amplitude are generated and superimposed on each other with a defined frequency spacing. Depending on the selectivity of the analyzer, the output signal is displayed not as a sequence of individual lines but as a noise signal with a continuous level versus frequency. The frequency-defined noise can be used to generate several thousand single tones of any given amplitude (multi-tone).
        /// 
        /// (2) Time: In this mode, noise signals are generated with
        /// interleaved random functions which have been optimized for uniformly distributed noise. Periodicity only occurs after at least 1 day.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRandomDomain(int Domain)
        {
            int pInvokeResult = PInvoke.SetGeneratorRandomDomain(this._handle, Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns characteristics of the noise signal defined in the frequency or time domain.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:DOMain?
        /// </summary>
        /// <param name="Domain">
        /// This control returns characteristics of the noise signal defined in the frequency or time domain.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_RANDOM_DOMAIN_FREQ (0) - Freq
        /// RSUPV_GEN_RANDOM_DOMAIN_TIME (1) - Time
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Freq: To generate the output signal, sinewave lines with
        /// adjustable amplitude are generated and superimposed on each other with a defined frequency spacing. Depending on the selectivity of the analyzer, the output signal is displayed not as a sequence of individual lines but as a noise signal with a continuous level versus frequency. The frequency-defined noise can be used to generate several thousand single tones of any given amplitude (multi-tone).
        /// 
        /// (2) Time: In this mode, noise signals are generated with
        /// interleaved random functions which have been optimized for uniformly distributed noise. Periodicity only occurs after at least 1 day.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRandomDomain(out int Domain)
        {
            int pInvokeResult = PInvoke.GetGeneratorRandomDomain(this._handle, out Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the amplitude distribution of the signal spectrum within a selectable frequency domain.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SHAPe WHITe | PINK | TOCTave | FILE
        /// </summary>
        /// <param name="Shape">
        /// This control defines the amplitude distribution of the signal spectrum within a selectable frequency domain.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_RANDOM_SHAPE_WHITE  (0) - White
        /// RSUPV_GEN_RANDOM_SHAPE_PINK   (1) - Pink
        /// RSUPV_GEN_RANDOM_SHAPE_OCTAVE (2) - Third Octave
        /// RSUPV_GEN_RANDOM_SHAPE_FILE   (3) - File
        /// 
        /// Default Value: RSUPV_GEN_RANDOM_SHAPE_WHITE (0)
        /// 
        /// Notes:
        /// 
        /// (1) White: All sinewave lines between the lower and upper
        /// frequency limit have the same amplitude.
        /// 
        /// (2) Pink: Pink noise. The amplitude of the sinewave lines
        /// between the lower and upper frequency limit is proportional to the function SQRT (1 / f) , i.e. it decreases by 3 dB per octave. Measurements performed using a third-octave analyzer return a uniform frequency spectrum.
        /// 
        /// (3) Third Octave: Pink noise with a bandwidth of one third octave. The center frequency is adjustable.
        /// 
        /// (4) File: The amplitude distribution is read from the file .
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRandomShape(int Shape)
        {
            int pInvokeResult = PInvoke.SetGeneratorRandomShape(this._handle, Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the amplitude distribution of the signal spectrum within a selectable frequency domain.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SHAPe?
        /// </summary>
        /// <param name="Shape">
        /// This control returns the amplitude distribution of the signal spectrum within a selectable frequency domain.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_RANDOM_SHAPE_WHITE  (0) - White
        /// RSUPV_GEN_RANDOM_SHAPE_PINK   (1) - Pink
        /// RSUPV_GEN_RANDOM_SHAPE_OCTAVE (2) - Third Octave
        /// RSUPV_GEN_RANDOM_SHAPE_FILE   (3) - File
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) White: All sinewave lines between the lower and upper
        /// frequency limit have the same amplitude.
        /// 
        /// (2) Pink: Pink noise. The amplitude of the sinewave lines
        /// between the lower and upper frequency limit is proportional to the function SQRT (1 / f) , i.e. it decreases by 3 dB per octave. Measurements performed using a third-octave analyzer return a uniform frequency spectrum.
        /// 
        /// (3) Third Octave: Pink noise with a bandwidth of one third octave. The center frequency is adjustable.
        /// 
        /// (4) File: The amplitude distribution is read from the file .
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRandomShape(out int Shape)
        {
            int pInvokeResult = PInvoke.GetGeneratorRandomShape(this._handle, out Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects file containing the amplitude distribution.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:LIST ARBitrary,'filename'
        /// </summary>
        /// <param name="Shape_File">
        /// This control selects file containing the amplitude distribution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRandomShapeFile(string Shape_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorRandomShapeFile(this._handle, Shape_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the lower frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:FREQuency:LOWer
        /// </summary>
        /// <param name="Lower_Frequency">
        /// This control sets the lower frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Lower Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRandomLowerFrequency(double Lower_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorRandomLowerFrequency(this._handle, Lower_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the lower frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:FREQuency:LOWer?
        /// </summary>
        /// <param name="Lower_Frequency">
        /// This control returns the lower frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Lower Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRandomLowerFrequency(out double Lower_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorRandomLowerFrequency(this._handle, out Lower_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the upper frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:FREQuency:UPPer
        /// </summary>
        /// <param name="Upper_Frequency">
        /// This control sets the upper frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Upper Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorRandomUpperFrequency(double Upper_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorRandomUpperFrequency(this._handle, Upper_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the upper frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:FREQuency:UPPer?
        /// </summary>
        /// <param name="Upper_Frequency">
        /// This control returns the upper frequency limit of the noise signal if Shape is set to White or Pink.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Upper Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorRandomUpperFrequency(out double Upper_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorRandomUpperFrequency(this._handle, out Upper_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a freely definable curve shape which is read out from a file as a sequence of samples. The maximum length is 16384 samples. When output, the curve is repeated continuously in an unbroken sequence. The individual samples are output at the sampling rate selected in the generator.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:LIST ARBitrary,'filename'
        /// SOURce:VOLTage:TOTal
        /// SOURce:VOLTage:RMS
        /// </summary>
        /// <param name="Shape_File">
        /// This control selects file containing the amplitude distribution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <param name="Volt_Peak">
        /// This control sets voltage.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Volt Peak entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorArbitrary(string Shape_File, double Volt_Peak, int Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorArbitrary(this._handle, Shape_File, Volt_Peak, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects file containing the amplitude distribution.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:LIST ARBitrary,'filename'
        /// </summary>
        /// <param name="Shape_File">
        /// This control selects file containing the amplitude distribution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorArbitraryShapeFile(string Shape_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorArbitraryShapeFile(this._handle, Shape_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a sinewave signal which can be modulated with respect to frequency or amplitude according to a sinusoidal function.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion:MODE AM | FM
        /// SOURce:FREQuency[1]
        /// SOURce:FREQuency2
        /// SOURce:VOLTage[1] [PCT]
        /// SOURce:VOLTage2
        /// 
        /// </summary>
        /// <param name="Mod_Freq">
        /// This control sets the modulation frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Mod_Freq_Units">
        /// This control sets the units of Mod Freq entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Carrier_Freq">
        /// This control sets the carrier frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Carrier_Freq_Units">
        /// This control sets the units of Carrier Freq entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <param name="Deviation">
        /// This control sets the modulation deviation in % relative to the carrier frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only in FM mode.
        /// </param>
        /// <param name="Carrier_Volt">
        /// This control sets the level of the unmodulated sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Carrier_Volt_Units">
        /// This control sets the units of Carrier Volt Units entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorFMModulation(double Mod_Freq, int Mod_Freq_Units, double Carrier_Freq, int Carrier_Freq_Units, double Deviation, double Carrier_Volt, int Carrier_Volt_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorFMModulation(this._handle, Mod_Freq, Mod_Freq_Units, Carrier_Freq, Carrier_Freq_Units, Deviation, Carrier_Volt, Carrier_Volt_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a sinewave signal which can be modulated with respect to amplitude according to a sinusoidal function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion:MODE AM
        /// SOURce:FREQuency[1]
        /// SOURce:FREQuency2
        /// SOURce:VOLTage[1] [PCT]
        /// SOURce:VOLTage2
        /// 
        /// </summary>
        /// <param name="Mod_Freq">
        /// This control sets the modulation frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Mod_Freq_Units">
        /// This control sets the units of Mod Freq entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <param name="Carrier_Freq">
        /// This control sets the carrier frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Carrier_Freq_Units">
        /// This control sets the units of Carrier Freq entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <param name="Mod_Depth">
        /// This control sets the modulation depth in % relative to the carrier amplitude.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This control is used only in AM mode.
        /// </param>
        /// <param name="Carrier_Volt">
        /// This control sets the level of the unmodulated sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Carrier_Volt_Units">
        /// This control sets the units of Carrier Volt Units entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureGeneratorAMModulation(double Mod_Freq, int Mod_Freq_Units, double Carrier_Freq, int Carrier_Freq_Units, double Mod_Depth, double Carrier_Volt, int Carrier_Volt_Units)
        {
            int pInvokeResult = PInvoke.ConfigureGeneratorAMModulation(this._handle, Mod_Freq, Mod_Freq_Units, Carrier_Freq, Carrier_Freq_Units, Mod_Depth, Carrier_Volt, Carrier_Volt_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency[1]
        /// </summary>
        /// <param name="Modulation_Frequency">
        /// This control sets the modulation frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Modulation Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModulationFrequency(double Modulation_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorModulationFrequency(this._handle, Modulation_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency[1]?
        /// </summary>
        /// <param name="Modulation_Frequency">
        /// This control returns the modulation frequency.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Modulation Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModulationFrequency(out double Modulation_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorModulationFrequency(this._handle, out Modulation_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the carrier frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency2
        /// </summary>
        /// <param name="Carrier_Frequency">
        /// This control sets the carrier frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Carrier Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModulationCarrierFrequency(double Carrier_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorModulationCarrierFrequency(this._handle, Carrier_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the carrier frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency2?
        /// </summary>
        /// <param name="Carrier_Frequency">
        /// This control returns the carrier frequency.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Carrier Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModulationCarrierFrequency(out double Carrier_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorModulationCarrierFrequency(this._handle, out Carrier_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level of the unmodulated sinewave signal.
        /// 
        /// Notes:
        /// 
        /// (1)  With AM, only up to half of the maximum value; this ensures that 100 % AM can always be set. The maximum value depends on the set DC offset. In the analog generator, the maximum total voltage also depends on the settings for Output Type and Max Voltage in the Generator Config
        /// panel.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage2
        /// </summary>
        /// <param name="Carrier_Voltage">
        /// This control sets the level of the unmodulated sinewave signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Carrier Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModulationCarrierVoltage(double Carrier_Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorModulationCarrierVoltage(this._handle, Carrier_Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level of the unmodulated sinewave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage2?
        /// </summary>
        /// <param name="Carrier_Voltage">
        /// This control returns the level of the unmodulated sinewave signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Carrier Voltage.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModulationCarrierVoltage(out double Carrier_Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorModulationCarrierVoltage(this._handle, out Carrier_Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// With FM, this function sets the modulation deviation in % relative to the carrier frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage[1] [PCT]
        /// </summary>
        /// <param name="Deviation">
        /// This control sets the modulation deviation in % relative to the carrier frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModulationDeviation(double Deviation)
        {
            int pInvokeResult = PInvoke.SetGeneratorModulationDeviation(this._handle, Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// With FM, this function returns the modulation deviation in % relative to the carrier frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage[1]?
        /// </summary>
        /// <param name="Deviation">
        /// This control returns the modulation deviation in % relative to the carrier frequency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModulationDeviation(out double Deviation)
        {
            int pInvokeResult = PInvoke.GetGeneratorModulationDeviation(this._handle, out Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// With AM, this function sets the modulation depth in % relative to the carrier amplitude.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage[1] [PCT]
        /// </summary>
        /// <param name="Modulation_Depth">
        /// This control sets modulation depth in % relative to the carrier amplitude.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorModulationDepth(double Modulation_Depth)
        {
            int pInvokeResult = PInvoke.SetGeneratorModulationDepth(this._handle, Modulation_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// With AM, this function returns the modulation depth in % relative to the carrier amplitude.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage[1]?
        /// </summary>
        /// <param name="Modulation_Depth">
        /// This control returns modulation depth in % relative to the carrier amplitude.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorModulationDepth(out double Modulation_Depth)
        {
            int pInvokeResult = PInvoke.GetGeneratorModulationDepth(this._handle, out Modulation_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables optional scaling up of samples in order to obtain full control.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:SCALepktofs ON | OFF
        /// </summary>
        /// <param name="Scale_Pk_To_FS">
        /// This control enables optional scaling up of samples in order to obtain full control.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The samples from the WAV file are output without change. This mode enables the WAV file to be loaded faster, since it does not need to be fully scanned.
        /// 
        /// (2) On: The WAV file is searched for the highest sample and is scaled during playback in such a way that the highest occurring sample reaches exactly to full scale and is therefore output with the specified peak voltage.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayScalePkToFS(bool Scale_Pk_To_FS)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayScalePkToFS(this._handle, System.Convert.ToUInt16(Scale_Pk_To_FS));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns optional scaling up of samples in order to obtain full control.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:SCALepktofs?
        /// </summary>
        /// <param name="Scale_Pk_To_FS">
        /// This control returns optional scaling up of samples in order to obtain full control.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayScalePkToFS(out bool Scale_Pk_To_FS)
        {
            ushort Scale_Pk_To_FSAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorPlayScalePkToFS(this._handle, out Scale_Pk_To_FSAsUShort);
            Scale_Pk_To_FS = System.Convert.ToBoolean(Scale_Pk_To_FSAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables a single WAV channel to be output
        /// as a mono signal on both generator channels.
        /// 
        /// Note(s):
        /// 
        /// (1) For stereo WAV files only.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:CHANnel MLEFt | MRIGht | STEReo
        /// </summary>
        /// <param name="Channel">
        /// This control enables a single WAV channel to be output
        /// as a mono signal on both generator channels.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_CHAN_MLEFT  (0) - Mono Left
        /// RSUPV_GEN_PLAY_CHAN_MRIGHT (1) - Mono Right
        /// RSUPV_GEN_PLAY_CHAN_STEREO (2) - Stereo
        /// 
        /// 
        /// Default Value: RSUPV_GEN_PLAY_CHAN_MLEFT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Mono Left: The left WAV channel is output to all active generator channels.
        /// 
        /// (2) Mono Right: The right WAV channel is output to all active generator channels.
        /// 
        /// (3) Stereo: The left WAV channel is output to generator channel 1 and the right WAV channel is output to generator channel 2.
        /// Stereo mode can only be switched on in the analog generator if option R&amp;S UPV-B3 has been installed.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayChannel(int Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayChannel(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a single WAV channel which is output
        /// as a mono signal on both generator channels.
        /// 
        /// Note(s):
        /// 
        /// (1) For stereo WAV files only.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns a single WAV channel which is output
        /// as a mono signal on both generator channels.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_CHAN_MLEFT  (0) - Mono Left
        /// RSUPV_GEN_PLAY_CHAN_MRIGHT (1) - Mono Right
        /// RSUPV_GEN_PLAY_CHAN_STEREO (2) - Stereo
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayChannel(out int Channel)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayChannel(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the playback mode of the loaded WAV file.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:MODE TOCont | TOSingle | TICont | TISingle
        /// </summary>
        /// <param name="Mode">
        /// This control defines the playback mode of the loaded WAV file.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_MODE_TOCONT  (0) - Total Cont
        /// RSUPV_GEN_PLAY_MODE_TOSING  (1) - Total Single
        /// RSUPV_GEN_PLAY_MODE_TICONT  (2) - Time Cont
        /// RSUPV_GEN_PLAY_MODE_TISING  (3) - Time Single
        /// 
        /// 
        /// Default Value: RSUPV_GEN_PLAY_MODE_TOCONT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Total Cont: The complete WAV file is played back continuously. On reaching the end of the file, playback returns
        /// without uninterruption to the start of the file.
        /// 
        /// (2) Total Single: The complete WAV file is played back once, after which the generator is muted.
        /// 
        /// (3) Time Cont: The start of the WAV file is played back continuously. After expiration of the playback time, which can be selected from the next menu line, playback returns without uninterruption to the start of the file.
        /// 
        /// (4) Time Single: The start of the WAV file is played back once. After expiration of the playback time, which can be selected from the next menu line, playback is interrupted and the generator is muted.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the playback mode of the loaded WAV file.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:MODE?
        /// </summary>
        /// <param name="Mode">
        /// This control returns the playback mode of the loaded WAV file.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_MODE_TOCONT  (0) - Total Cont
        /// RSUPV_GEN_PLAY_MODE_TOSING  (1) - Total Single
        /// RSUPV_GEN_PLAY_MODE_TICONT  (2) - Time Cont
        /// RSUPV_GEN_PLAY_MODE_TISING  (3) - Time Single
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the playback time.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if Play Mode is set to Time... - use function rsupv_SetGeneratorPlayMode.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:TIME &lt;nu&gt;
        /// </summary>
        /// <param name="Time">
        /// This control sets the playback time.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The maximum playback time is derived from the number of samples in the WAV file and the set sampling rate, and can last up to 24 hours.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayTime(double Time)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayTime(this._handle, Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the playback time.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:TIME?
        /// </summary>
        /// <param name="Time">
        /// This control gets the playback time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayTime(out double Time)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayTime(this._handle, out Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used for entering the drive, path and file name of the WAV file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:ARBitrary ?filename?
        /// </summary>
        /// <param name="Shape_File">
        /// This control is used for entering the drive, path and file name of the WAV file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayShapeFile(string Shape_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayShapeFile(this._handle, Shape_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Defines the play mode for the WAV file after a change of the generator settings.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:RESTart
        /// </summary>
        /// <param name="Restart">
        /// This control selects the play mode for the WAV file after a change of the generator settings.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_REST_OFF  (0) - Off
        /// RSUPV_GEN_PLAY_REST_AUTO (1) - Auto
        /// RSUPV_GEN_PLAY_REST_ONCE (2) - Once
        /// 
        /// Default Value: RSUPV_GEN_PLAY_REST_OFF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayRestart(int Restart)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayRestart(this._handle, Restart);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the play mode for the WAV file after a change of the generator settings.
        /// 
        /// Remote-control command(s):
        /// SOURce:PLAY:RESTart?
        /// </summary>
        /// <param name="Restart">
        /// This control returns the selected play mode for the WAV file after a change of the generator settings.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_REST_OFF  (0) - Off
        /// RSUPV_GEN_PLAY_REST_AUTO (1) - Auto
        /// RSUPV_GEN_PLAY_REST_ONCE (2) - Once
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayRestart(out int Restart)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayRestart(this._handle, out Restart);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the analyzer channel whose signal is to be looped back to the generator and to be superimposed on the noise signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-K6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOOP:CHANnel OFF | CH1 | CH2 | STEReo | CROSsed
        /// </summary>
        /// <param name="Loop_Channel">
        /// This control selects the analyzer channel whose signal is to be looped back to the generator and to be superimposed on the noise signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_OFF     (0)  - Off
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_1       (1)  - 1
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_2       (2)  - 2
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_STEREO  (3)  - Stereo
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_CROSSED (4)  - Crossed
        /// 
        /// 
        /// Default Value: RSUPV_GEN_PLAY_ANLR_LOOP_CH_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: Loopback is switched off. Only the WAV signal is played.
        /// 
        /// (2) 1: The analyzer channel 1 is superimposed on both generator channels.
        /// 
        /// (3) 2: The analyzer channel 2 is superimposed on both generator channels.
        /// 
        /// (4) Stereo: The analyzer channel 1 is superimposed on the generator channel 1. The analyzer channel 2 is superimposed on the generator channel 2.
        /// 
        /// (5) Crossed: The analyzer channel 1 is superimposed on the generator channel 2. The analyzer channel 2 is superimposed on the generator channel 1.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayAnalyzerLoopChannel(int Loop_Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayAnalyzerLoopChannel(this._handle, Loop_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the analyzer channel whose signal is to be looped back to the generator and to be superimposed on the noise signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-K6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOOP:CHANnel?
        /// </summary>
        /// <param name="Loop_Channel">
        /// This control returns the analyzer channel whose signal is to be looped back to the generator and to be superimposed on the noise signal.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_OFF     (0)  - Off
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_1       (1)  - 1
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_2       (2)  - 2
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_STEREO  (3)  - Stereo
        /// RSUPV_GEN_PLAY_ANLR_LOOP_CH_CROSSED (4)  - Crossed
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayAnalyzerLoopChannel(out int Loop_Channel)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayAnalyzerLoopChannel(this._handle, out Loop_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the gain for loopback of the analyzer signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-K6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOOP:GAIN
        /// </summary>
        /// <param name="Loop_Gain">
        /// This control sets the gain for loopback of the analyzer signal.
        /// 
        /// Valid Values:
        /// 0.0 to 1000.0 - units MLT
        /// -240.0 to 60.0 - units dB
        /// 
        /// 
        /// Default Value: 1.0 (MLT)
        /// 
        /// Notes:
        /// 
        /// (1) A value lower than 1 (or lower than 0 dB) causes an attenuation of the analyzer signal.
        /// 
        /// (2) Entering the value of 0 (or -240 dB) will switch off the loopback signal.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Volt Peak entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPlayAnalyzerLoopGain(double Loop_Gain, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorPlayAnalyzerLoopGain(this._handle, Loop_Gain, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the gain for loopback of the analyzer signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-K6 option is installed.
        /// 
        /// Remote-control command(s):
        /// SOURce:LOOP:GAIN?
        /// </summary>
        /// <param name="Loop_Gain">
        /// This control gets the gain for loopback of the analyzer signal.
        /// 
        /// Valid Values:
        /// 0.0 to 1000.0 - units MLT
        /// -240.0 to 60.0 - units dB
        /// </param>
        /// <param name="Units">
        /// This control gets the units of Volt Peak entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPlayAnalyzerLoopGain(out double Loop_Gain, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorPlayAnalyzerLoopGain(this._handle, out Loop_Gain, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates dither function.
        /// 
        /// Notes:
        /// 
        /// (1) In the digital generator, a noise component with adjustable amplitude can be superimposed on the signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:SINusoid:DITHer:STATe ON | OFF
        /// </summary>
        /// <param name="Dither">
        /// This control activates/deactivates dither function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDither(bool Dither)
        {
            int pInvokeResult = PInvoke.SetGeneratorDither(this._handle, System.Convert.ToUInt16(Dither));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns dither function state.
        /// 
        /// Notes:
        /// 
        /// (1) In the digital generator, a noise component with adjustable amplitude can be superimposed on the signal.
        /// 
        /// Remote-control command(s):
        /// SOURce:SINusoid:DITHer:STATe?
        /// </summary>
        /// <param name="Dither">
        /// This control returns dither function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDither(out bool Dither)
        {
            ushort DitherAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorDither(this._handle, out DitherAsUShort);
            Dither = System.Convert.ToBoolean(DitherAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets generator dither value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SINusoid:DITHer
        /// </summary>
        /// <param name="Value">
        /// This function sets dither value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorDitherValue(double Value, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorDitherValue(this._handle, Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns generator dither value.
        /// 
        /// Remote-control command(s):
        /// SOURce:SINusoid:DITHer?
        /// </summary>
        /// <param name="Value">
        /// This function returns dither value.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorDitherValue(out double Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorDitherValue(this._handle, out Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the distribution function for amplitude.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:PDF GAUSsian | TRIangle | RECTangle
        /// </summary>
        /// <param name="PDF">
        /// This control selects the distribution function for amplitude.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PDF_GAUSS     (0) - Gauss
        /// RSUPV_GEN_PDF_TRIANGLE  (1) - Triangle
        /// RSUPV_GEN_PDF_RECTANGLE (2) - Rectangle
        /// 
        /// Default Value: RSUPV_GEN_PDF_GAUSS (0)
        /// 
        /// Notes:
        /// 
        /// (1) The parameter fields for Dither and PDF do not appear in the analog generator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPDF(int PDF)
        {
            int pInvokeResult = PInvoke.SetGeneratorPDF(this._handle, PDF);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the distribution function for amplitude.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:PDF?
        /// </summary>
        /// <param name="PDF">
        /// This control returns the distribution function for amplitude.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_PDF_GAUSS     (0) - Gauss
        /// RSUPV_GEN_PDF_TRIANGLE  (1) - Triangle
        /// RSUPV_GEN_PDF_RECTANGLE (2) - Rectangle
        /// 
        /// Notes:
        /// 
        /// (1) The parameter fields for Dither and PDF do not appear in the analog generator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPDF(out int PDF)
        {
            int pInvokeResult = PInvoke.GetGeneratorPDF(this._handle, out PDF);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the frequency spacing. The frequency of each sinewave line is an integer multiple of this frequency spacing.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SPACing:MODE ATRack | USERdefined
        /// </summary>
        /// <param name="Frequency_Spacing">
        /// This control selects the frequency spacing. The frequency of each sinewave line is an integer multiple of this frequency spacing.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SPACING_ANLR_TR (0) - Anlr Tr
        /// RSUPV_GEN_SPACING_DEF     (1) - Def
        /// 
        /// Default Value: RSUPV_GEN_SPACING_ANLR_TR (0)
        /// 
        /// Notes:
        /// 
        /// (1) Anlr Tr: The frequency spacing is adopted from the FFT set
        /// in the analyzer. This value depends on the sampling rate and the size of the FFT. This setting is only possible if an FFT or Post FFT is selected in the analyzer. The parameter field for entering values is then hidden.
        /// 
        /// (2) Def: The frequency spacing can be freely defined. Minimum value: Sampling rate/16384.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFrequencySpacing(int Frequency_Spacing)
        {
            int pInvokeResult = PInvoke.SetGeneratorFrequencySpacing(this._handle, Frequency_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency spacing. The frequency of each sinewave line is an integer multiple of this frequency spacing.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SPACing:MODE?
        /// </summary>
        /// <param name="Frequency_Spacing">
        /// This control returns the frequency spacing. 
        /// 
        /// Valid Values:
        /// RSUPV_GEN_SPACING_ANLR_TR (0) - Anlr Tr
        /// RSUPV_GEN_SPACING_DEF     (1) - Def
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFrequencySpacing(out int Frequency_Spacing)
        {
            int pInvokeResult = PInvoke.GetGeneratorFrequencySpacing(this._handle, out Frequency_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency spacing value.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SPACing:FREQuency
        /// </summary>
        /// <param name="Frequency_Spacing_Value">
        /// This control sets the frequency spacing value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// Notes:
        /// 
        /// (1) Minimum value: Sampling rate/16384
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frequency Spacing Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFrequencySpacingValue(double Frequency_Spacing_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorFrequencySpacingValue(this._handle, Frequency_Spacing_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency spacing value.
        /// 
        /// Remote-control command(s):
        /// SOURce:RANDom:SPACing:FREQuency?
        /// </summary>
        /// <param name="Frequency_Spacing_Value">
        /// This control returns the frequency spacing value.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Frequency Spacing Value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFrequencySpacingValue(out double Frequency_Spacing_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorFrequencySpacingValue(this._handle, out Frequency_Spacing_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets phase of Channel 2 relative to Channel 1 (Freq Mode F&amp;Ph).
        /// 
        /// Remote-control command(s):
        /// SOURce:PHASe
        /// </summary>
        /// <param name="Phase_Ch2_1">
        /// This control sets phase of Channel 2 relative to Channel 1 (Freq Mode F&amp;Ph).
        /// 
        /// Valid Range: -360.0 to 360.0 deg
        /// 
        /// Default Value: 0.0 deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorChannelPhaseRatio(double Phase_Ch2_1)
        {
            int pInvokeResult = PInvoke.SetGeneratorChannelPhaseRatio(this._handle, Phase_Ch2_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns phase of Channel 2 relative to Channel 1 (Freq Mode F&amp;Ph).
        /// 
        /// Remote-control command(s):
        /// SOURce:PHASe?
        /// </summary>
        /// <param name="Phase_Ch2_1">
        /// This control returns phase of Channel 2 relative to Channel 1 (Freq Mode F&amp;Ph).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorChannelPhaseRatio(out double Phase_Ch2_1)
        {
            int pInvokeResult = PInvoke.GetGeneratorChannelPhaseRatio(this._handle, out Phase_Ch2_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets ratio of the level of both channels relative to Channel 1 (Volt Mode Ch2/1).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RATio
        /// </summary>
        /// <param name="Volt_Ch2_1">
        /// This control sets ratio of the level of both channels relative to Channel 1 (Volt Mode Ch2/1).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 1.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorChannelVoltageRatio(double Volt_Ch2_1)
        {
            int pInvokeResult = PInvoke.SetGeneratorChannelVoltageRatio(this._handle, Volt_Ch2_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns ratio of the level of both channels relative to Channel 1 (Volt Mode Ch2/1).
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:RATio?
        /// </summary>
        /// <param name="Volt_Ch2_1">
        /// This control returns ratio of the level of both channels relative to Channel 1 (Volt Mode Ch2/1).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorChannelVoltageRatio(out double Volt_Ch2_1)
        {
            int pInvokeResult = PInvoke.GetGeneratorChannelVoltageRatio(this._handle, out Volt_Ch2_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects generator function mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion:MODE EQUalvoltage | DEFinedvoltage | IEC268 | IEC118 | AM | FM
        /// </summary>
        /// <param name="Function_Mode">
        /// This control selects generator function mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_MODE_EQUAL   (0) - Equal
        /// RSUPV_GEN_MODE_DEF     (1) - Define
        /// RSUPV_GEN_MODE_IEC_268 (2) - IEC 268
        /// RSUPV_GEN_MODE_IEC_118 (3) - IEC 118
        /// RSUPV_GEN_MODE_FM      (4) - FM 
        /// RSUPV_GEN_MODE_AM      (5) - AM
        /// 
        /// Default Value: RSUPV_GEN_MODE_EQUAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Equal: All sinewave lines have the same amplitude. It is
        /// entered in the "Volt No1" parameter field.
        /// 
        /// (2) Define: A separate amplitude can be defined for each
        /// sinewave line.
        /// 
        /// (3) IEC 268: Entry of center frequency (Mean Freq) and
        /// difference frequency (Diff Freq). If a frequency sweep (for the X or Z-axis) is selected, the center frequency is swept.
        /// 
        /// (4) IEC 118: Entry of upper frequency (Upper Freq) and
        /// difference frequency (Diff Freq). If a frequency sweep (for the X or Z-axis) is selected, the upper frequency is swept.
        /// 
        /// (5) FM: Frequency modulation.
        /// 
        /// (6) AM: Amplitude modulation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFunctionMode(int Function_Mode)
        {
            int pInvokeResult = PInvoke.SetGeneratorFunctionMode(this._handle, Function_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns generator function mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FUNCtion:MODE?
        /// </summary>
        /// <param name="Function_Mode">
        /// This control returns generator function mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_MODE_EQUAL   (0) - Equal
        /// RSUPV_GEN_MODE_DEF     (1) - Define
        /// RSUPV_GEN_MODE_IEC_268 (2) - IEC 268
        /// RSUPV_GEN_MODE_IEC_118 (3) - IEC 118
        /// RSUPV_GEN_MODE_FM      (4) - FM 
        /// RSUPV_GEN_MODE_AM      (5) - AM
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFunctionMode(out int Function_Mode)
        {
            int pInvokeResult = PInvoke.GetGeneratorFunctionMode(this._handle, out Function_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the amplitude variation mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:AM:MODE OFF | SINusoid | BURSt
        /// </summary>
        /// <param name="Amplitude_Variation">
        /// This control selects the amplitude variation mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_AM_VARIATION_OFF     (0)  - Off
        /// RSUPV_GEN_AM_VARIATION_SINE    (1)  - Sine
        /// RSUPV_GEN_AM_VARIATION_BURST   (2)  - Burst
        /// 
        /// Default Value: RSUPV_GEN_AM_VARIATION_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: Amplitude variation is deactivated.
        /// 
        /// (2) Sine: The amplitude of the generator signal is modulated with respect to sinewave.
        /// 
        /// (3) Burst: The generator signal is cyclically activated and deactivated. This setting is not possible in the Play generator function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorAmplitudeVariation(int Amplitude_Variation)
        {
            int pInvokeResult = PInvoke.SetGeneratorAmplitudeVariation(this._handle, Amplitude_Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the amplitude variation mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:AM:MODE?
        /// </summary>
        /// <param name="Amplitude_Variation">
        /// This control returns the amplitude variation mode.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_AM_VARIATION_OFF     (0)  - Off
        /// RSUPV_GEN_AM_VARIATION_SINE    (1)  - Sine
        /// RSUPV_GEN_AM_VARIATION_BURST   (2)  - Burst
        /// 
        /// Notes:
        /// 
        /// (1) Off: Amplitude variation is deactivated.
        /// 
        /// (2) Sine: The amplitude of the generator signal is modulated with respect to sinewave.
        /// 
        /// (3) Burst: The generator signal is cyclically activated and deactivated. This setting is not possible in the Play generator function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorAmplitudeVariation(out int Amplitude_Variation)
        {
            int pInvokeResult = PInvoke.GetGeneratorAmplitudeVariation(this._handle, out Amplitude_Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:AM &lt;nu&gt;
        /// </summary>
        /// <param name="Modulation_Frequency">
        /// This control sets the modulation frequency. The value range depends on the analog bandwidth set in the Generator Config panel or the digital clock rate.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 10.0 Hz
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Volt Peak entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorAVModulationFrequency(double Modulation_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorAVModulationFrequency(this._handle, Modulation_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the modulation frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:FREQuency:AM?
        /// </summary>
        /// <param name="Modulation_Frequency">
        /// This control gets the modulation frequency. The value range depends on the analog bandwidth set in the Generator Config panel or the digital clock rate.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of Volt Peak entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorAVModulationFrequency(out double Modulation_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorAVModulationFrequency(this._handle, out Modulation_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value in % by which the amplitude of the signal is reduced.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:AM &lt;n&gt; [PCT]
        /// </summary>
        /// <param name="Variation">
        /// This control sets the value in % by which the amplitude of the signal is reduced.
        /// 
        /// Valid Values: 
        /// -100.0 to 0.0 %
        /// 
        /// Default Value: -20.0 %
        /// 
        /// Note(s):
        /// 
        /// (1) Example: If an amplitude of 1 V and a variation of -80 % is selected, the generator level varies between 1 V and 200 mV.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorVariation(double Variation)
        {
            int pInvokeResult = PInvoke.SetGeneratorVariation(this._handle, Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the value in % by which the amplitude of the signal is reduced.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with generator signals multisine, arbitrary, random and play.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:VOLTage:AM?
        /// </summary>
        /// <param name="Variation">
        /// This control gets the value in % by which the amplitude of the signal is reduced.
        /// 
        /// Valid Values: 
        /// -100.0 to 0.0 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorVariation(out double Variation)
        {
            int pInvokeResult = PInvoke.GetGeneratorVariation(this._handle, out Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter which can be set up in the analyzer and generator.
        /// 
        /// Notes:
        /// 
        /// (1)The overall signal is filtered in the time domain. One of the user-definable filters in the Filter Panel or a weighting filter can be selected. All level settings apply to the unfiltered signal.
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:FILTer OFF | UFIL1 | UFIL2 | UFIL3 | UFIL4 | UFIL5 | UFIL6 | UFIL7 | UFIL8 | UFIL9 | AWE | CARM | CCIU | CCIR | CCIT | CMES | DEMP17 | DCN | DEMP5015 | DEMP50 | DEMP75 | IECT | JITT | PEMP17 | PEMP50 | PEMP5015 | PEMP75 | HP22 | HP400 | LP22 | LP30 | LP80 | AES17 | CWE | URUM | WRUM
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter">
        /// This control selects generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN      (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP5015 (26) - Preemph 50/15
        /// RSUPV_GEN_FILTER_PEMP50   (27) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (28) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (29) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (30) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (31) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (32) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (33) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// Default Value: RSUPV_GEN_FILTER_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is filtered in the time domain.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelFilter(int Channel, int Filter)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelFilter(this._handle, Channel, Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the filter which can be set up in the analyzer and generator.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:FILTer?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter">
        /// This control returns generator filter.
        /// 
        /// Valid Values:
        /// RSUPV_GEN_FILTER_OFF      (0)  - Off
        ///  User-definable filters:
        /// RSUPV_GEN_FILTER_UFIL1    (1)  - Filter 01
        /// RSUPV_GEN_FILTER_UFIL2    (2)  - Filter 02
        /// RSUPV_GEN_FILTER_UFIL3    (3)  - Filter 03
        /// RSUPV_GEN_FILTER_UFIL4    (4)  - Filter 04
        /// RSUPV_GEN_FILTER_UFIL5    (5)  - Filter 05
        /// RSUPV_GEN_FILTER_UFIL6    (6)  - Filter 06
        /// RSUPV_GEN_FILTER_UFIL7    (7)  - Filter 07
        /// RSUPV_GEN_FILTER_UFIL8    (8)  - Filter 08
        /// RSUPV_GEN_FILTER_UFIL9    (9)  - Filter 09
        ///  Weighting filters:
        /// RSUPV_GEN_FILTER_AWE      (10) - A Weighting
        /// RSUPV_GEN_FILTER_CCIR     (11) - CCIR 1k wtd
        /// RSUPV_GEN_FILTER_CCIA     (12) - CCIR 2k wtd
        /// RSUPV_GEN_FILTER_CCIU     (13) - CCIR unwtd
        /// RSUPV_GEN_FILTER_CCIT     (14) - CCITT
        /// RSUPV_GEN_FILTER_CMES     (15) - C Message
        /// RSUPV_GEN_FILTER_DCN      (16) - Noise HP
        /// RSUPV_GEN_FILTER_DEMP17   (17) - Deemph J.17
        /// RSUPV_GEN_FILTER_DEMP5015 (18) - Deemph 50/15
        /// RSUPV_GEN_FILTER_DEMP50   (19) - Deemph 50
        /// RSUPV_GEN_FILTER_DEMP75   (20) - Deemph 75
        /// RSUPV_GEN_FILTER_IECT     (21) - IEC Tuner
        /// RSUPV_GEN_FILTER_JITT     (22) - Jitter wtd
        /// RSUPV_GEN_FILTER_URUM     (23) - Rumble unwtd
        /// RSUPV_GEN_FILTER_WRUM     (24) - Rumble wtd
        /// RSUPV_GEN_FILTER_PEMP17   (25) - Preemph J.17
        /// RSUPV_GEN_FILTER_PEMP5015 (26) - Preemph 50/15
        /// RSUPV_GEN_FILTER_PEMP50   (27) - Preemph 50
        /// RSUPV_GEN_FILTER_PEMP75   (28) - Preemph 75
        /// RSUPV_GEN_FILTER_HP22     (29) - HighPass 22 Hz
        /// RSUPV_GEN_FILTER_HP400    (30) - HighPass 400 Hz
        /// RSUPV_GEN_FILTER_LP22     (31) - LowPass 22 Hz
        /// RSUPV_GEN_FILTER_LP30     (32) - LowPass 30 Hz
        /// RSUPV_GEN_FILTER_LP80     (33) - LowPass 80 Hz
        /// RSUPV_GEN_FILTER_AES17    (34) - AES 17
        /// RSUPV_GEN_FILTER_CWE      (35) - C Weighting
        /// 
        /// Default Value: RSUPV_GEN_FILTER_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) The generator signal is filtered in the time domain.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelFilter(int Channel, out int Filter)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelFilter(this._handle, Channel, out Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates All Channel Settings function.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:ACHSine:STATe ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="All_Chan_Sine">
        /// This control activates/deactivates All Channel Settings function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - "Deactivated:" The higher-level sine wave is not added to the overall signal in the indicated channel. The following "Gain" parameter field serves as default setting and takes effect only if the check mark is set.
        /// 
        /// (2) On - "Activated:" The higher-level sine wave is added to the overall signal in a percentage that is determined with the following "Gain" parameter field.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelAllChanSine(int Channel, bool All_Chan_Sine)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelAllChanSine(this._handle, Channel, System.Convert.ToUInt16(All_Chan_Sine));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns all channel settings function state. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:ACHSine:STATe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="All_Chan_Sine">
        /// This control returns all channel settings function state. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelAllChanSine(int Channel, out bool All_Chan_Sine)
        {
            ushort All_Chan_SineAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelAllChanSine(this._handle, Channel, out All_Chan_SineAsUShort);
            All_Chan_Sine = System.Convert.ToBoolean(All_Chan_SineAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a percentage from the level of the higher-level sine wave is added to the overall signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:GAIN
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gain">
        /// This control sets percentage from the level of the higher-level sine wave .
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 %
        /// 
        /// Default Value: 1.0 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelGain(int Channel, double Gain)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelGain(this._handle, Channel, Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets a percentage from the level of the higher-level sine wave.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:GAIN?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Gain">
        /// This control gets percentage from the level of the higher-level sine wave .
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelGain(int Channel, out double Gain)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelGain(this._handle, Channel, out Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates limit overall signal to a maximum of 1 FS.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:LIMittofs ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Limit_To_FS">
        /// This control activates/deactivates Limit overall signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - "Deactivated:" With the subsequent "Total Gain" parameter field, the overall signal can be attenuated or amplified.
        /// 
        /// (2) On - "Activated:" Limit overall signal to a maximum of 1 FS
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelLimitToFS(int Channel, bool Limit_To_FS)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelLimitToFS(this._handle, Channel, System.Convert.ToUInt16(Limit_To_FS));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns limit overall signal state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:LIMittofs?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Limit_To_FS">
        /// This control returns Limit overall signal state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelLimitToFS(int Channel, out bool Limit_To_FS)
        {
            ushort Limit_To_FSAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelLimitToFS(this._handle, Channel, out Limit_To_FSAsUShort);
            Limit_To_FS = System.Convert.ToBoolean(Limit_To_FSAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the gain upper limit. Value is calculated so that the level of the overallsignal cannot exceed 1 FS.
        /// 
        /// Note(s):
        /// 
        /// (1)  This parameter can be edited only if "Limit to FS" is deactivated and allows a leveling of the overall signal. 
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:TOTal:GAIN
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Total_Gain">
        /// This control sets the upper limit value.
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 %
        /// 
        /// Default Value: 1.0 %
        /// 
        /// Note(s):
        /// 
        /// (1) The upper limit value is calculated so that the level of the overall signal cannot exceed 1 FS.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelTotalGain(int Channel, double Total_Gain)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelTotalGain(this._handle, Channel, Total_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the upper limit gain value. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:TOTal:GAIN?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Total_Gain">
        /// This control gets the upper limit gain value.
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelTotalGain(int Channel, out double Total_Gain)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelTotalGain(this._handle, Channel, out Total_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates channel-based sine wave state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:STATe ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Add_To_Channel">
        /// This control activates/deactivates channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) The channel-based sine wave signal is generated based on the parameter fields "Frequency", "Phase" and "Voltage" underneath it and added to the overall signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSine(int Channel, bool Add_To_Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSine(this._handle, Channel, System.Convert.ToUInt16(Add_To_Channel));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns channel-based sine wave signal state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:STATe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Add_To_Channel">
        /// This control returns channel-based sine wave signal state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSine(int Channel, out bool Add_To_Channel)
        {
            ushort Add_To_ChannelAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSine(this._handle, Channel, out Add_To_ChannelAsUShort);
            Add_To_Channel = System.Convert.ToBoolean(Add_To_ChannelAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:FREQuency
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Frequency">
        /// This control sets the frequency of the channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineFrequency(int Channel, double Sine_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineFrequency(this._handle, Channel, Sine_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:FREQuency?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Frequency">
        /// This control gets the frequency of the channel-based sine wave signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSineFrequency(int Channel, out double Sine_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSineFrequency(this._handle, Channel, out Sine_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the phase of the channel-based sine wave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) For signals with the exact same frequency and activated higher-level sine wave signal, a two-tone signal is generated in every channel at which the channel-based sine wave has the specified phase with respect to the higher-level sine wave signal.
        /// With deactivated higher-level sine wave signal, the channels have the difference of their phase entries as phase relationship among each other.
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:PHASe
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Phase">
        /// This control sets the phase of the channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 0.0 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Sine Phase entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_RAD (41) - RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSinePhase(int Channel, double Sine_Phase, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSinePhase(this._handle, Channel, Sine_Phase, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the phase of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:PHASe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Phase">
        /// This control gets the phase of the channel-based sine wave signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Sine Phase.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSinePhase(int Channel, out double Sine_Phase, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSinePhase(this._handle, Channel, out Sine_Phase, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:VOLTage
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Voltage">
        /// This control sets the level of the channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 0.0 FS
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineVoltage(int Channel, double Sine_Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineVoltage(this._handle, Channel, Sine_Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the level of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:VOLTage?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sine_Voltage">
        /// This control gets the level of the channel-based sine wave signal.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of sine voltage.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSineVoltage(int Channel, out double Sine_Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSineVoltage(this._handle, Channel, out Sine_Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates channel-based sine arbitrary state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:ARBitrary:STATe ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Arbitrary">
        /// This control activates/deactivates channel-based sine arbitrary.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineArbitrary(int Channel, bool Arbitrary)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineArbitrary(this._handle, Channel, System.Convert.ToUInt16(Arbitrary));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns arbitrary settings state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:ARBitrary:STATe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Arbitrary">
        /// This control returns arbitrary settings state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSineArbitrary(int Channel, out bool Arbitrary)
        {
            ushort ArbitraryAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSineArbitrary(this._handle, Channel, out ArbitraryAsUShort);
            Arbitrary = System.Convert.ToBoolean(ArbitraryAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the Arbitrary waveform file.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:MCHannel&lt;1..8&gt;:SINE:ARBitrary 'filename'
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Arbitrary_File">
        /// This control select the arbitrary file.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineArbitraryFilename(int Channel, string Arbitrary_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineArbitraryFilename(this._handle, Channel, Arbitrary_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// A signal with random frequency and shape and the level specified in "Volt Peak" is added to the overall signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:ARBitrary:VOLTage
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Volt_Peak">
        /// This control sets the "Volt Peak" value.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 0.0 FS
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineVoltPeak(int Channel, double Volt_Peak, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineVoltPeak(this._handle, Channel, Volt_Peak, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the "Volt Peak" value.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:ARBitrary:VOLTage?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Volt_Peak">
        /// This control returns the "Volt Peak" value.
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSineVoltPeak(int Channel, out double Volt_Peak, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSineVoltPeak(this._handle, Channel, out Volt_Peak, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates equalizer function.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:EQUalize:STATe ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Equalizer">
        /// This control activates/deactivates equalizer.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineEqualizer(int Channel, bool Equalizer)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineEqualizer(this._handle, Channel, System.Convert.ToUInt16(Equalizer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the equalizer function state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:EQUalize:STATe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Equalizer">
        /// This control gets the equalizer function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelSineEqualizer(int Channel, out bool Equalizer)
        {
            ushort EqualizerAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelSineEqualizer(this._handle, Channel, out EqualizerAsUShort);
            Equalizer = System.Convert.ToBoolean(EqualizerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the equalization file.
        /// 
        /// Note(s):
        /// 
        /// (1) The content of the equalization file affects the adjustable level range of the channel-based sine wave. If the selection of "Equalization" results in a level increase, it leads to the cutoff of level values if the overall signal of 1 FS is exceeded. The channel-based sine wave signal is precorrected in the frequency band based on the entries in the "Equal File".
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:MCHannel&lt;1..8&gt;:SINE:EQUalize 'filename'
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Equal_File">
        /// This control select the equalization file.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelSineEqualizerFilename(int Channel, string Equal_File)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelSineEqualizerFilename(this._handle, Channel, Equal_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates DC offset function. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:OFFSet:STATe ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control activates/deactivates DC offset function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelDCOffset(int Channel, bool DC_Offset)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelDCOffset(this._handle, Channel, System.Convert.ToUInt16(DC_Offset));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns DC offset function state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:OFFSet:STATe?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control returns DC offset function state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelDCOffset(int Channel, out bool DC_Offset)
        {
            ushort DC_OffsetAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorMultichannelDCOffset(this._handle, Channel, out DC_OffsetAsUShort);
            DC_Offset = System.Convert.ToBoolean(DC_OffsetAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets DC offset on the generator signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:OFFSet:VOLTage
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control sets DC offset on the generator signal.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Max Voltage entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorMultichannelDCOffsetValue(int Channel, double DC_Offset, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorMultichannelDCOffsetValue(this._handle, Channel, DC_Offset, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets DC offset on the generator signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:MCHannel&lt;1..8&gt;:SINE:OFFSet:VOLTage?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="DC_Offset">
        /// This control gets DC offset on the generator signal.
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of DC Offset.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorMultichannelDCOffsetValue(int Channel, out double DC_Offset, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorMultichannelDCOffsetValue(this._handle, Channel, out DC_Offset, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates Track to other channels state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:SCHSettings:TTOChannels ON | OFF
        /// </summary>
        /// <param name="Track_To_Other_Channel">
        /// This control activates/deactivates Track to other channels state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - "Deactivated:" The "Channel" parameter field underneath it can be edited, and the change of a parameter underneath it exclusively affects the channel identified by "Channel".
        /// 
        /// (2) On - "Activated:" At the time of switching from deactivated to activated, all parameters of the currently displayed channel is copied to all the other channels so that completely identical data records are present for all 8 channels. The "Channel" parameter field underneath it is no longer editable. A change in one of the parameters underneath it does no longer affect an individual channel, but all 8 channels at the same time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSingleChannelTrackToOtherChannel(bool Track_To_Other_Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorSingleChannelTrackToOtherChannel(this._handle, System.Convert.ToUInt16(Track_To_Other_Channel));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Track to other channels state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:SCHSettings:TTOChannels?
        /// </summary>
        /// <param name="Track_To_Other_Channel">
        /// This control returns the Track to other channels state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSingleChannelTrackToOtherChannel(out bool Track_To_Other_Channel)
        {
            ushort Track_To_Other_ChannelAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorSingleChannelTrackToOtherChannel(this._handle, out Track_To_Other_ChannelAsUShort);
            Track_To_Other_Channel = System.Convert.ToBoolean(Track_To_Other_ChannelAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the channel on the generator signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This parameter is editable if the "Track to other channels" parameter is deactivated.
        /// 
        /// (2) The value designates one of 8 channels whose parameter set is displayed below "Channel" in the panel. Changes of these parameters refer exclusively to the channel indicated here. A change of the number in this field allows a quick overview of the parameters of all channels.
        /// 
        /// (3) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:SCHSettings:CHANnel
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSingleChannel(int Channel)
        {
            int pInvokeResult = PInvoke.SetGeneratorSingleChannel(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the channel on the generator signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:SCHSettings:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSingleChannel(out int Channel)
        {
            int pInvokeResult = PInvoke.GetGeneratorSingleChannel(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates channel-based sine wave state.
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:STATe ON | OFF
        /// </summary>
        /// <param name="All_Channel_Sine">
        /// This control activates/deactivates channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off- "Deactivated:" The higher-level sine wave is neither being generated nor being provided. All concerning parameter fields disappear.
        /// 
        /// (2) On - "Activated:" The higher-level sine wave is being generated and provided and added channel-based to the overall signal with a percentage via the "Gain" parameter field if the check mark is set in the "All Chan Sine" parameter field at the end of the panel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorAllChannelSine(bool All_Channel_Sine)
        {
            int pInvokeResult = PInvoke.SetGeneratorAllChannelSine(this._handle, System.Convert.ToUInt16(All_Channel_Sine));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel-based sine wave state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:STATe?
        /// </summary>
        /// <param name="All_Channel_Sine">
        /// This control returns the channel-based sine wave signal state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorAllChannelSine(out bool All_Channel_Sine)
        {
            ushort All_Channel_SineAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorAllChannelSine(this._handle, out All_Channel_SineAsUShort);
            All_Channel_Sine = System.Convert.ToBoolean(All_Channel_SineAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the channel-based sine wave signal.
        /// 
        /// Note(s):
        /// 
        /// (1) Used to set the frequency of the higher-level sine wave. The value range depends on the digital clock rate set in the Generator Config panel. 
        /// 
        /// (2) This parameter field appears only if the check mark of "All Chan Sine" in the "All Channel Settings" panel area is set and is also dependent on the setting in the "Sweep Ctrl" parameter field.
        /// 
        /// (3) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:FREQuency
        /// </summary>
        /// <param name="Frequency">
        /// This control sets the frequency of the channel-based sine wave signal.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineFrequency(double Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineFrequency(this._handle, Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency of the channel-based sine wave signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:FREQuency?
        /// </summary>
        /// <param name="Frequency">
        /// This control gets the frequency of the channel-based sine wave signal.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineFrequency(out double Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineFrequency(this._handle, out Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level of the higher-level sine wave.
        /// 
        /// Note(s):
        /// 
        /// (1) Used to set the level of the higher-level sine wave. A percentage of this level, which can be set via the "Gain" parameter field, can be added to the overall signal. If the level of the higher-level sine wave is changed, it affects the individual channels equally according to the Gain factor.
        /// 
        /// (2) This parameter field appears only if the check mark of "All Chan Sine" in the "All Channel Settings" panel area is set and is also dependent on the setting in the "Sweep Ctrl" parameter field.
        /// 
        /// (3) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:VOLTage
        /// </summary>
        /// <param name="Voltage">
        /// This control sets the level of the higher-level sine wave.
        /// 
        /// Valid Values:
        /// not checked 
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorSineVoltage(double Voltage, int Units)
        {
            int pInvokeResult = PInvoke.SetGeneratorSineVoltage(this._handle, Voltage, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the level of the higher-level sine wave. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SOURce:ACHSine:VOLTage?
        /// </summary>
        /// <param name="Voltage">
        /// This control gets the level of the higher-level sine wave.
        /// </param>
        /// <param name="Units">
        /// This control returns the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorSineVoltage(out double Voltage, out int Units)
        {
            int pInvokeResult = PInvoke.GetGeneratorSineVoltage(this._handle, out Voltage, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects analyzer instrument type.
        /// 
        /// Note(s):
        /// 
        /// (1) The I2S Board is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) 'Analog' instrument is not available in UPP. Instead, use 'Analog 8 Channel'
        /// 
        /// (3) 'Digital Bitstream' instrument is not available in UPP. 
        /// 
        /// (4) 'HDMI' instrument is not available in UPV. 
        /// 
        /// Remote-control command(s):
        /// INSTrument2[:SELect] ANLG | DIG | I2SBoard | A8Channel | A16Channel | U2Channel | DIGBitstream | HDMI
        /// </summary>
        /// <param name="Instrument">
        /// This control selects analyzer instrument type.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_ANALOG  (0) - Analog
        /// RSUPV_ANALYZER_DIGITAL (1) - Digital Audio
        /// RSUPV_ANALYZER_I2S     (2) - I2S Board
        /// RSUPV_ANALYZER_A8C     (3) - Analog 8 Channel
        /// RSUPV_ANALYZER_A16C    (4) - Analog 16 Channel
        /// RSUPV_ANALYZER_U2C     (5) - USI Dual Channel
        /// RSUPV_ANALYZER_U8C     (6) - USI 8 Channel
        /// RSUPV_ANALYZER_DIGBITS (7) - Digital Bitstream
        /// RSUPV_ANALYZER_HDMI    (8) - HDMI
        /// 
        /// Default Value: RSUPV_ANALYZER_ANALOG (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerInstrument(int Instrument)
        {
            int pInvokeResult = PInvoke.SetAnalyzerInstrument(this._handle, Instrument);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns analyzer instrument type.
        /// 
        /// Remote-control command(s):
        /// INSTrument2[:SELect]?
        /// </summary>
        /// <param name="Instrument">
        /// This control returns analyzer instrument type.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_ANALOG  (0) - Analog
        /// RSUPV_ANALYZER_DIGITAL (1) - Digital Audio
        /// RSUPV_ANALYZER_I2S     (2) - I2S Board
        /// RSUPV_ANALYZER_A8C     (3) - Analog 8 Channel
        /// RSUPV_ANALYZER_A16C    (4) - Analog 16 Channel
        /// RSUPV_ANALYZER_U2C     (5) - USI Dual Channel
        /// RSUPV_ANALYZER_U8C     (6) - USI 8 Channel
        /// RSUPV_ANALYZER_DIGBITS (7) - Digital Bitstream
        /// RSUPV_ANALYZER_HDMI    (8) - HDMI
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerInstrument(out int Instrument)
        {
            int pInvokeResult = PInvoke.GetAnalyzerInstrument(this._handle, out Instrument);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input coupling. AC or DC coupling can be selected. The coupling can be selected separately for both channels if "Channel 1&amp;2" is set. If AC coupling is selected, the R&amp;S UPV has a limit frequency (-3 dB) of approx. 2 Hz. DC coupling should be selected if input voltages with very low-frequency signal components are to be measured.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:COUPling AC | DC
        /// </summary>
        /// <param name="Coupling">
        /// This control sets the input coupling.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_COUPLING_AC (0) - AC
        /// RSUPV_ANALYZER_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSUPV_ANALYZER_COUPLING_AC (0)
        /// 
        /// Notes:
        /// 
        /// (1) AC: The DC component of the measurement signal is removed at the input using a high-pass filter and therefore cannot affect the measurement result. If the "DC" measurement function is selected, measurements are always performed with DC coupling, even if AC coupling is selected.
        /// 
        /// (2) DC: Measurement signals up to 0 Hz are recorded and taken into consideration in the measurement results of RMS, RMS Selective, Peak, Quasi Peak, DC, FFT and Waveform.
        /// 
        /// Caution:
        /// If the input signal contains a large DC component, this results in a reduced dynamic response for the AC component since the measuring range of the input amplifier is based on the overall signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerCoupling(int Coupling)
        {
            int pInvokeResult = PInvoke.SetAnalyzerCoupling(this._handle, Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the input coupling. AC or DC coupling can be selected. The coupling can be selected separately for both channels if "Channel 1&amp;2" is set. If AC coupling is selected, the R&amp;S UPV has a limit frequency (-3 dB) of approx. 2 Hz. DC coupling should be selected if input voltages with very low-frequency signal components are to be measured.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:COUPling?
        /// </summary>
        /// <param name="Coupling">
        /// This control gets the input coupling.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_COUPLING_AC (0) - AC
        /// RSUPV_ANALYZER_COUPLING_DC (1) - DC
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerCoupling(out int Coupling)
        {
            int pInvokeResult = PInvoke.GetAnalyzerCoupling(this._handle, out Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the signal source for Channel 1 or 2.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:TYPE BALanced | GEN1 | GEN2
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Input">
        /// This control selects the signal source for Channel 1 or 2.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_BAL   (0) - Balanced
        /// RSUPV_ANALYZER_CH_INPUT_GEN1  (1) - Generator Ch1
        /// RSUPV_ANALYZER_CH_INPUT_GEN2  (2) - Generator Ch2
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_INPUT_BAL   (0)
        /// 
        /// Notes:
        /// 
        /// (1) Balanced: Balanced = Balanced-to-ground measurement inputs.
        /// Unbalanced DUTs can be connected using XLR/BNC adapters (UPL-Z1 option).
        /// 
        /// (2) Generator Ch1: Internal connection of analyzer channel 1 to generator output 1. The analyzer input impedance is 200 kOhm.
        /// 
        /// (3) Generator Ch2: Internal connection of analyzer channel 1 to generator output 2. The analyzer input impedance is 200 kOhm.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerChannelInput(int Channel, int Input)
        {
            int pInvokeResult = PInvoke.SetAnalyzerChannelInput(this._handle, Channel, Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the signal source for Channel 1 or 2.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:TYPE?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Input">
        /// This control gets the signal source for Channel 1 or 2.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_BAL   (0) - Balanced
        /// RSUPV_ANALYZER_CH_INPUT_GEN1  (1) - Generator Ch1
        /// RSUPV_ANALYZER_CH_INPUT_GEN2  (2) - Generator Ch2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerChannelInput(int Channel, out int Input)
        {
            int pInvokeResult = PInvoke.GetAnalyzerChannelInput(this._handle, Channel, out Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:IMPedance R300 | R600 | R200K | R110 | R10K | R20K | USERdefined 
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Imped">
        /// This control selects the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R300   (0) - 300 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R600   (1) - 600 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R200K  (2) - 200 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R110   (3) - 110 Ohm 
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R10K   (4) - 10 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R20K   (5) - 20 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_USER   (6) - User Definable
        ///  
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R300 (0)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) For UPP are available only parameters 600 Ohm and 200 000 Ohm.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerChannelInputImpedance(int Channel, int Imped)
        {
            int pInvokeResult = PInvoke.SetAnalyzerChannelInputImpedance(this._handle, Channel, Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:IMPedance?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Imped">
        /// This control gets the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R300   (0) - 300 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R600   (1) - 600 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R200K  (2) - 200 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R110   (3) - 110 Ohm 
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R10K   (4) - 10 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R20K   (5) - 20 000 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_USER   (6) - User Definable
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerChannelInputImpedance(int Channel, out int Imped)
        {
            int pInvokeResult = PInvoke.GetAnalyzerChannelInputImpedance(this._handle, Channel, out Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the potential reference of Pin 1 of the XLR inputs; can only be selected if Input is set to "Bal". "Float" must always be set if the analyzer inputs are disabled or connected to the internal generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:COMMon FLOat | GROund
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Common">
        /// This control selects the potential reference of Pin 1 of the XLR inputs.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_COMMON_FLOAT   (0) - Float
        /// RSUPV_ANALYZER_CH_INPUT_COMMON_GROUND  (1) - Ground
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_INPUT_COMMON_FLOAT (0)
        /// 
        /// Notes:
        /// 
        /// (1) Float: The connection between XLR Pin 1 and instrument ground is interrupted by means of a tripped contact. The permissible voltage to EN 61010-1 is 30 V AC or 70 V DC with respect to the instrument housing.
        /// 
        /// (2) Ground: XLR Pin 1 is connected to the instrument ground
        /// (PE conductor). The ground reference is cancelled if the analyzer is later switched to the internal generator or the set
        /// balanced channel is disabled.
        /// 
        /// Important:
        /// Measurement potential reference only; not a safety connection to VDE 0411!
        /// 
        /// Warning:
        /// If dangerous contact voltages Urms &gt; 30 V are to be measured, the user must ensure that the outer conductor of the used BNC/XLR adapter is safely connected to protective earth.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerChannelInputCommon(int Channel, int Common)
        {
            int pInvokeResult = PInvoke.SetAnalyzerChannelInputCommon(this._handle, Channel, Common);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the potential reference of Pin 1 of the XLR inputs; can only be selected if Input is set to "Bal". "Float" must always be set if the analyzer inputs are disabled or connected to the internal generator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut[1]|2:COMMon?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Common">
        /// This control gets the potential reference of Pin 1 of the XLR inputs.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_COMMON_FLOAT   (0) - Float
        /// RSUPV_ANALYZER_CH_INPUT_COMMON_GROUND  (1) - Ground
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerChannelInputCommon(int Channel, out int Common)
        {
            int pInvokeResult = PInvoke.GetAnalyzerChannelInputCommon(this._handle, Channel, out Common);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task. When the selection window is opened, the user can toggle between 3 modes.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:RANGe[1]|2:MODE AUTO | FIXed | LOWer
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Range">
        /// This control selects the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task. When the selection window is opened, the user can toggle between 3 modes.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_AUTO   (0) - Auto
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_FIX    (1) - Fix
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_LOWER  (2) - Lower
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_INPUT_RANGE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto: Automatic measuring range selection. The optimum range is set separately for each channel; this also applies to the channel settings "2 = 1" or "1 = 2".
        /// 
        /// (2) Fix: The set measuring range is fixed. Switching from Auto to Fix causes the range currently valid for the channel to be adopted. If Channel is set to "2 = 1" or "1 = 2", the less sensitive range is adopted by Channel 1 and 2.
        /// 
        /// (3) Lower: The set measuring range is fixed as the lowest range; in the case of overranging, this range is automatically substituted by higher ranges.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerChannelInputRange(int Channel, int Range)
        {
            int pInvokeResult = PInvoke.SetAnalyzerChannelInputRange(this._handle, Channel, Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:RANGe[1]|2:MODE?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Range">
        /// This control gets the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_AUTO   (0) - Auto
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_FIX    (1) - Fix
        /// RSUPV_ANALYZER_CH_INPUT_RANGE_LOWER  (2) - Lower
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerChannelInputRange(int Channel, out int Range)
        {
            int pInvokeResult = PInvoke.GetAnalyzerChannelInputRange(this._handle, Channel, out Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the nominal range value when the Fix or Lower range is selected.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:RANGe[1]|2:VALue
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Range_Value">
        /// This control sets the nominal range value when the Fix or Lower mode is selected (in Volts RMS).
        /// 
        /// Valid Values:
        /// 0.018, 0.03, 0.06, 0.1, 0.18, 0.3, 0.6, 1.0, 1.8, 3.0, 6.0, 10.0, 18.0, 30.0, 60.0, 100.0
        /// 
        /// Default Value: 3.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerChannelInputRangeValue(int Channel, double Range_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerChannelInputRangeValue(this._handle, Channel, Range_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the nominal range value when the Fix or Lower range is selected.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:RANGe[1]|2:VALue?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Range_Value">
        /// This control gets the nominal range value when the Fix or Lower mode is selected.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerChannelInputRangeValue(int Channel, out double Range_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerChannelInputRangeValue(this._handle, Channel, out Range_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enable or disables desired channel.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;n&gt; ON|OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_State">
        /// This control enable or disables desired channel.
        /// 
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerMeasChannels(int Channel, bool Channel_State)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerMeasChannels(this._handle, Channel, System.Convert.ToUInt16(Channel_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries state of desired channel.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;n&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_State">
        /// This control returns state o desired channel.
        /// 
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerMeasChannels(int Channel, out bool Channel_State)
        {
            ushort Channel_StateAsUShort;
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerMeasChannels(this._handle, Channel, out Channel_StateAsUShort);
            Channel_State = System.Convert.ToBoolean(Channel_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input coupling mode. The coupling can be selected for all channels together (Track) or separately from each other (Split).
        /// 
        /// Remote-control command(s):
        /// INPut:COUPling:CHANnels TRACk|SPLit
        /// </summary>
        /// <param name="Coupling">
        /// This control sets the input coupling mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerCouplingMode(int Coupling)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerCouplingMode(this._handle, Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input coupling mode.
        /// 
        /// Remote-control command(s):
        /// INPut:COUPling:CHANnels?
        /// </summary>
        /// <param name="Coupling">
        /// This control returns the input coupling mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerCouplingMode(out int Coupling)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerCouplingMode(this._handle, out Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input coupling. AC or DC coupling can be selected.
        /// 
        /// Note(s):
        /// (1) This function is available only in split coupling mode. To select input coupling in Track mode please use function rsupv_SetAnalyzerCoupling.
        /// 
        /// Remote-control command(s):
        /// INPut&lt;n&gt;:COUPling AC | DC
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Coupling">
        /// This control sets the input coupling.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_COUPLING_AC (0) - AC
        /// RSUPV_ANALYZER_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSUPV_ANALYZER_COUPLING_AC (0)
        /// 
        /// Notes:
        /// 
        /// (1) AC: The DC component of the measurement signal is removed at the input using a high-pass filter and therefore cannot affect the measurement result. If the "DC" measurement function is selected, measurements are always performed with DC coupling, even if AC coupling is selected.
        /// 
        /// (2) DC: Measurement signals up to 0 Hz are recorded and taken into consideration in the measurement results of RMS, RMS Selective, Peak, Quasi Peak, DC, FFT and Waveform.
        /// 
        /// Caution:
        /// If the input signal contains a large DC component, this results in a reduced dynamic response for the AC component since the measuring range of the input amplifier is based on the overall signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerCoupling(int Channel, int Coupling)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerCoupling(this._handle, Channel, Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input coupling.
        /// 
        /// Remote-control command(s):
        /// INPut&lt;n&gt;:COUPling?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Coupling">
        /// This control returns the input coupling.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_COUPLING_AC (0) - AC
        /// RSUPV_ANALYZER_COUPLING_DC (1) - DC
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerCoupling(int Channel, out int Coupling)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerCoupling(this._handle, Channel, out Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement range mode. The range can be selected for all channels together (Track) or separately from each other (Split).
        /// 
        /// Remote-control command(s):
        /// INPut:RANGe:CHANnels TRACk|SPLit
        /// </summary>
        /// <param name="Coupling">
        /// This control sets the measurement range mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerChannelRange(int Coupling)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerChannelRange(this._handle, Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement range mode.
        /// 
        /// Remote-control command(s):
        /// INPut:RANGe:CHANnels?
        /// </summary>
        /// <param name="Coupling">
        /// This control returns the measurement range mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerChannelRange(out int Coupling)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerChannelRange(this._handle, out Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects reference channel for phase measurements, channel-specific measurements such as common-channel selectivity and the like.
        /// 
        /// Remote-control command(s):
        /// SENSe:REFerence:CHANnel CH&lt;n&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control selects the reference channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerReferenceChannel(int Channel)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerReferenceChannel(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries reference channel for phase measurements, channel-specific measurements such as common-channel selectivity and the like.
        /// 
        /// Remote-control command(s):
        /// SENSe:REFerence:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns the reference channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerReferenceChannel(out int Channel)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerReferenceChannel(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input impedance for all 8 channels together (Track) or separately for each channel (Split).
        /// 
        /// Remote-control command(s):
        /// INPut:MIMPedance&lt;1..8&gt;:CHANnels
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Impedance">
        /// This control sets the measurement range mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// 
        /// Default Value: RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerImpedanceChannel(int Channel, int Impedance)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerImpedanceChannel(this._handle, Channel, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement range mode.
        /// 
        /// Remote-control command(s):
        /// INPut:MIMPedance&lt;1..8&gt;:CHANnels?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Impedance">
        /// This control returns the measurement range mode.
        /// 
        /// Valid Values:
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_TRACK (0) - Track
        /// RSUPV_MULTICHANNEL_ANALYZER_COUPLING_SPLIT (1) - Split
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerImpedanceChannel(int Channel, out int Impedance)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerImpedanceChannel(this._handle, Channel, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input impedance; 
        /// 
        /// Remote-control command(s):
        /// INPut:MIMPedance&lt;1..8&gt; R600 | R200K 
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Range 1 to 8 for SPLit setting.
        /// 
        /// (2) Value 1 for TRACk setting.
        /// </param>
        /// <param name="Imped">
        /// This control selects the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R600   (1) - 600 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R200K  (2) - 200 000 Ohm
        ///  
        /// Default Value: RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R300 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerChannelInputImpedance(int Channel, int Imped)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerChannelInputImpedance(this._handle, Channel, Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the input impedance;
        /// 
        /// Remote-control command(s):
        /// INPut:MIMPedance&lt;1..8&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values: 1 to 8
        /// 
        /// Default Value: 1
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Range 1 to 8 for SPLit setting.
        /// 
        /// (2) Value 1 for TRACk setting.
        /// </param>
        /// <param name="Imped">
        /// This control gets the input impedance; can only be selected if Input is set to "Balanced".
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R600   (1) - 600 Ohm
        /// RSUPV_ANALYZER_CH_INPUT_IMPEDANCE_R200K  (2) - 200 000 Ohm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerChannelInputImpedance(int Channel, out int Imped)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerChannelInputImpedance(this._handle, Channel, out Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trigger channel.
        /// 
        /// Remote-control command(s):
        /// TRIGger:CHANnel CH&lt;n&gt;
        /// TRIGger:CHANnel OFF
        /// </summary>
        /// <param name="Channel">
        /// This control selects the trigger channel.
        /// 
        /// Valid Values:
        /// 0 to 16
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) 0 = Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMultichannelAnalyzerTriggerChannel(int Channel)
        {
            int pInvokeResult = PInvoke.SetMultichannelAnalyzerTriggerChannel(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the trigger channel.
        /// 
        /// Remote-control command(s):
        /// TRIGger:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// This control returns the trigger channel.
        /// 
        /// Valid Values:
        /// 0 to 16
        /// 
        /// Note(s):
        /// 
        /// (1) 0 = Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMultichannelAnalyzerTriggerChannel(out int Channel)
        {
            int pInvokeResult = PInvoke.GetMultichannelAnalyzerTriggerChannel(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies what is to be measured at the digital interfaces.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:DIGital:MMODe ADATa | JPHase | CINPut
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task. When the selection window is opened, the user can toggle between 3 modes.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_MODE_ADATA     (0) - Audio Data
        /// RSUPV_ANALYZER_MEAS_MODE_JPHASE    (1) - Jitter/Phase
        /// RSUPV_ANALYZER_MEAS_MODE_CINPUT    (2) - Common/Input
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_MODE_ADATA (0)
        /// 
        /// Notes:
        /// 
        /// (1) Audio Data: The set measuring range is fixed. Switching from Auto to Fix causes the range currently valid for the channel to be adopted. If Channel is set to "2 = 1" or "1 = 2", the less sensitive range is adopted by Channel 1 and 2.
        /// 
        /// (2) Jitter/Phase: Measurement of a frame phase offset of the digital audio signal between the front input and AUX input.
        /// 
        /// (3) Common/Input: Measurement of the common signal at the digital BAL input. The DIGITAL INPUT amplitude can be measured at the BAL or UNBAL input.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalAnalyzerMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetDigitalAnalyzerMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets what is to be measured at the digital interfaces.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:DIGital:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control gets the measuring range allows optimum
        /// adaptation to a voltage range required for a specific measurement task.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_MODE_ADATA     (0) - Audio Data
        /// RSUPV_ANALYZER_MEAS_MODE_JPHASE    (1) - Jitter/Phase
        /// RSUPV_ANALYZER_MEAS_MODE_CINPUT    (2) - Common/Input
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalAnalyzerMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetDigitalAnalyzerMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the jitter reference clock (only available for jitter measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:DIGital:JITTer:REFerence INTClock | REFPll
        /// </summary>
        /// <param name="Jitter_Ref">
        /// This control selects the jitter reference clock (only available for jitter measurement).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_JITTER_INTC    (0) - Internal CLK
        /// RSUPV_ANALYZER_JITTER_REFP    (1) - Reference PLL
        /// 
        /// Default Value: RSUPV_ANALYZER_JITTER_INTC (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal CLK: The internal clock generator is used for the jitter reference. It is always best to use this setting if the
        /// digital audio signal to be measured is supplied by the digital audio generator of the R&amp;S UPV and this generator is running at the internal clock rate. In this case, no lower limit frequency has to be taken into consideration for the jitter measurement.
        /// 
        /// (2) Reference PLL: The reference signal is the clock signal obtained from the digital audio input signal using the jitter
        /// reference PLL. The lower limit frequency of this PLL must be taken into consideration for the jitter measurement; if the
        /// frequency drops below this limit, the reference signal changes with the jitter signal and a low jitter value is measured. The limit frequency of the jitter reference PLL is
        /// approx. 500 Hz.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalAnalyzerJitterRef(int Jitter_Ref)
        {
            int pInvokeResult = PInvoke.SetDigitalAnalyzerJitterRef(this._handle, Jitter_Ref);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the jitter reference clock (only available for jitter measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:DIGital:JITTer:REFerence?
        /// </summary>
        /// <param name="Jitter_Ref">
        /// This control gets the jitter reference clock (only available for jitter measurement).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_JITTER_INTC    (0) - Internal CLK
        /// RSUPV_ANALYZER_JITTER_REFP    (1) - Reference PLL
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalAnalyzerJitterRef(out int Jitter_Ref)
        {
            int pInvokeResult = PInvoke.GetDigitalAnalyzerJitterRef(this._handle, out Jitter_Ref);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the wordwidth used by the digital audio analyzer in the Measurement Mode "Audio Data".
        /// 
        /// Remote-control command(s):
        /// INPut:AUDiobits
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control sets the wordwidth used by the digital audio analyzer in the Measurement Mode "Audio Data".
        /// 
        /// Valid Range: 8 to 24
        /// 
        /// Default Value: 24
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalAnalyzerAudioBits(int Audio_Bits)
        {
            int pInvokeResult = PInvoke.SetDigitalAnalyzerAudioBits(this._handle, Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the wordwidth used by the digital audio analyzer in the Measurement Mode "Audio Data".
        /// 
        /// Remote-control command(s):
        /// INPut:AUDiobits?
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control gets the wordwidth used by the digital audio analyzer in the Measurement Mode "Audio Data".
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalAnalyzerAudioBits(out int Audio_Bits)
        {
            int pInvokeResult = PInvoke.GetDigitalAnalyzerAudioBits(this._handle, out Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input interface for the digital audio analyzer.
        /// 
        /// Remote-control command(s):
        /// INPut:TYPE DBALanced | DUNBalanced | OPTical | INTern
        /// </summary>
        /// <param name="Input">
        /// This control selects the input interface for the digital audio analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_IN_BAL    (0) - Bal (XLR)
        /// RSUPV_ANALYZER_DIG_AUD_IN_UNB    (1) - Unbal (BNC)
        /// RSUPV_ANALYZER_DIG_AUD_IN_OPT    (2) - Optical
        /// RSUPV_ANALYZER_DIG_AUD_IN_INT    (3) - Intern
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_IN_BAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Bal (XLR): Balanced digital audio input (XLR).
        /// 
        /// (2) Unbal (BNC): Unbalanced digital audio input (BNC).
        /// 
        /// (3) Optical: Optical digital audio input (TOSLINK).
        /// 
        /// (4) Intern: Internal at digital audio generator output. Loop measurement possible without connected cable.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalAnalyzerAudioInput(int Input)
        {
            int pInvokeResult = PInvoke.SetDigitalAnalyzerAudioInput(this._handle, Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the input interface for the digital audio analyzer.
        /// 
        /// Remote-control command(s):
        /// INPut:TYPE?
        /// </summary>
        /// <param name="Input">
        /// This control gets the input interface for the digital audio analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_IN_BAL    (0) - Bal (XLR)
        /// RSUPV_ANALYZER_DIG_AUD_IN_UNB    (1) - Unbal (BNC)
        /// RSUPV_ANALYZER_DIG_AUD_IN_OPT    (2) - Optical
        /// RSUPV_ANALYZER_DIG_AUD_IN_INT    (3) - Intern
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalAnalyzerAudioInput(out int Input)
        {
            int pInvokeResult = PInvoke.GetDigitalAnalyzerAudioInput(this._handle, out Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the word length of a data frame for each channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:WORDlength W16 | W24 | W32
        /// </summary>
        /// <param name="Word_Length">
        /// This control sets the word length of a data frame for each channel.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_W16  (0) - 16 bit
        /// RSUPV_ANALYZER_I2S_W24  (1) - 24 bit
        /// RSUPV_ANALYZER_I2S_W32  (2) - 32 bit
        /// 
        /// Default Value: RSUPV_ANALYZER_I2S_W32 (3)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerWordLength(int Word_Length)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerWordLength(this._handle, Word_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the word length of a data frame for each channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:WORDlength?
        /// </summary>
        /// <param name="Word_Length">
        /// This control gets the word length of a data frame for each channel.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_W16  (0) - 16 bit
        /// RSUPV_ANALYZER_I2S_W24  (1) - 24 bit
        /// RSUPV_ANALYZER_I2S_W32  (2) - 32 bit
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerWordLength(out int Word_Length)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerWordLength(this._handle, out Word_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the I2S analyzer format.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FORMat SI2S | USER
        /// </summary>
        /// <param name="Format">
        /// This control selects the I2S analyzer format.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_FORM_I2S    (0) - Standard I2S
        /// RSUPV_ANALYZER_I2S_FORM_USER   (1) - User definable
        /// 
        /// Default Value: RSUPV_ANALYZER_I2S_FORM_I2S (0)
        /// 
        /// Notes:
        /// 
        /// (1) Standard I2S: The following format-influencing parameters are assigned a fixed default:
        /// Fsync Slope Left(1) = Falling
        /// Word Offset         = -1
        /// 
        /// (2) User definable: The following format-influencing parameters are additionally available:
        /// Fsync Slope
        /// Word Offset
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerFormat(int Format)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerFormat(this._handle, Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the I2S analyzer format.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FORMat?
        /// </summary>
        /// <param name="Format">
        /// This control returns the I2S analyzer format.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_FORM_I2S    (0) - Standard I2S
        /// RSUPV_ANALYZER_I2S_FORM_USER   (1) - User definable
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerFormat(out int Format)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerFormat(this._handle, out Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the polarity of the Fsync signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FSLope LFTF | LFTR
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control selects the polarity of the Fsync signal.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_FSLOPE_FALL   (0) - Left (1) = Falling
        /// RSUPV_ANALYZER_I2S_FSLOPE_RAIS   (1) - Left (1) = Rising
        /// 
        /// Default Value: RSUPV_ANALYZER_I2S_FSLOPE_FALL (0)
        /// 
        /// Notes:
        /// 
        /// (1) This control is available only with Format set to User definable.
        /// 
        /// (2) Left (1) = Falling: At a Word Offset of 0, a falling edge of the signal marks the beginning of the left data word (channel 1).
        /// 
        /// (3) Left (1) = Rising: At a Word Offset of 0, a rising edge of the signal marks the beginning of the left data word (channel 1).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerFsyncSlope(int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerFsyncSlope(this._handle, Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the Fsync signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FSLope?
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control returns the polarity of the Fsync signal.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_FSLOPE_FALL   (0) - Left (1) = Falling
        /// RSUPV_ANALYZER_I2S_FSLOPE_RAIS   (1) - Left (1) = Rising
        /// 
        /// Notes:
        /// 
        /// (1) Left (1) = Falling: At a Word Offset of 0, a falling edge of the signal marks the beginning of the left data word (channel 1).
        /// 
        /// (2) Left (1) = Rising: At a Word Offset of 0, a rising edge of the signal marks the beginning of the left data word (channel 1).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerFsyncSlope(out int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerFsyncSlope(this._handle, out Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of the SCK cycles by which the Fsync signal is analyzed with delay with respect to the audio
        /// data.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:WRDOffset &lt;n&gt;
        /// </summary>
        /// <param name="Word_Offset">
        /// This control sets the number of the SCK cycles by which the Fsync signal is analyzed with delay with respect to the audio
        /// data.
        /// 
        /// Valid Values:
        /// -"Word Length" to +"Word Length"-1
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) This control is available only with Format set to User definable.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerWordOffset(int Word_Offset)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerWordOffset(this._handle, Word_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the number of the SCK cycles by which the Fsync signal is analyzed with delay with respect to the audio
        /// data.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:WRDOffset?
        /// </summary>
        /// <param name="Word_Offset">
        /// This control gets the number of the SCK cycles by which the Fsync signal is analyzed with delay with respect to the audio
        /// data.
        /// 
        /// Valid Values:
        /// -"Word Length" to +"Word Length"-1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerWordOffset(out int Word_Offset)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerWordOffset(this._handle, out Word_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the data source for the I2S audio analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:INPut DSUB | INT
        /// </summary>
        /// <param name="Input">
        /// This control selects the data source for the I2S audio analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_INPUT_DSUB  (0) - D-Sub
        /// RSUPV_ANALYZER_I2S_INPUT_INT   (1) - Intern
        /// 
        /// Default Value: RSUPV_ANALYZER_I2S_INPUT_DSUB (0)
        /// 
        /// Notes:
        /// 
        /// (1) D-Sub: The D-Sub connector at the rear of the instrument is
        /// selected as the input.
        /// 
        /// (2) Intern: The internal generator is selected as the input.
        /// A loop measurement can be performed without a connected cable being required (loopback test).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerInput(int Input)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerInput(this._handle, Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the data source for the I2S audio analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:INPut?
        /// </summary>
        /// <param name="Input">
        /// This control returns the data source for the I2S audio analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_INPUT_DSUB  (0) - D-Sub
        /// RSUPV_ANALYZER_I2S_INPUT_INT   (1) - Intern
        /// 
        /// Notes:
        /// 
        /// (1) D-Sub: The D-Sub connector at the rear of the instrument is
        /// selected as the input.
        /// 
        /// (2) Intern: The internal generator is selected as the input.
        /// A loop measurement can be performed without a connected cable being required (loopback test).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerInput(out int Input)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerInput(this._handle, out Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures measurement channels state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;1...2&gt; ON|OFF
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control enables or disables selected measurement channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerMeasChannelState(int Meas_Channel, bool State)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerMeasChannelState(this._handle, Meas_Channel, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures clock and mixed sample frequency of USI analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CLOCk GATed | CONTinous
        /// INPut:MSAMplefrequency ON | OFF
        /// INPut:RATio
        /// </summary>
        /// <param name="Clock">
        /// This control selects output type.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// 
        /// Default Value: RSUPV_CLOCK_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unbal: The RMS of the generator signal can be max. 10 V. The output impedance is 5 ohms. If commercially available BNC cables are to be used, it is recommended to use an XLR/BNC adapter R&amp;S UPL-Z1.
        /// 
        /// (2) Bal: The RMS of the generator signal can be max. 20 V. The user can choose between three different output impedance values.
        /// 
        /// (3) Com Mode Test: Identical output signals are present at pins 2 and 3 of the XLR connectors. The signal lines are referenced to the generator ground. The output impedance is made up of two identical resistances in the two signal lines. This generator output configuration is suitable for measuring the common-mode rejection of balanced DUTs.
        /// </param>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control permits simultaneous analysis of data streams at varying sampling rates.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Ratio">
        /// This control selects up-sampling factor for the slower data stream. The input data with the lower sampling rate is characterised by correspondingly fewer entries in the Slots input field.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIAnalyzerClockAndFrequency(int Clock, bool Mixed_Sampling_Frequency, int Ratio)
        {
            int pInvokeResult = PInvoke.ConfigureUSIAnalyzerClockAndFrequency(this._handle, Clock, System.Convert.ToUInt16(Mixed_Sampling_Frequency), Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures analyzer frame parameters.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SPFRame
        /// INPut:NOSLots
        /// </summary>
        /// <param name="Samples">
        /// This control defines the number of samples per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Slots">
        /// This control selects number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIAnalyzerFrame(int Samples, int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.ConfigureUSIAnalyzerFrame(this._handle, Samples, Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input data line for selected measuring channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHSource&lt;1...2&gt; RX1Data | RX2Data | RX3Data | RX4Data
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Data_Link">
        /// This control selects the input data line for selected measuring channel.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerMeasurementSource(int Meas_Channel, int Data_Link)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerMeasurementSource(this._handle, Meas_Channel, Data_Link);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the audio frame slots to be analyzed for selected measuring channel.
        /// 
        /// Note(s):
        /// 
        /// (1) Selection of several slots is only possible with multi-sample formats! In this case a frame contains several consecutive samples from the same signal source.
        /// 
        /// (2) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SLOTs&lt;1...8&gt;
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Slots">
        /// This control selects the audio frame slots to be analyzed for selected measuring channel.
        /// 
        /// Valid Values:
        /// 'a.b.c. ... .z'
        /// 
        /// Default Value: "1"
        /// 
        /// Note(s):
        /// 
        /// (1) Selection of several slots is only possible with multi-sample formats! In this case a frame contains several consecutive samples from the same signal source.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSlots(int Meas_Channel, string Slots)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSlots(this._handle, Meas_Channel, Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures slot layout. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FBIT MSB | LSB
        /// INPut:SLTLength
        /// INPut:AUDiobits
        /// INPut:LBITs
        /// </summary>
        /// <param name="First_Bit">
        /// This control selects data bit receiving sequence.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// 
        /// Default Value: RSUPV_DUAL_BIT_MSB (0)
        /// </param>
        /// <param name="Slot_Length">
        /// This control selects slot length of a slot including gaps (0 bits).
        /// 
        /// Valid Values:
        /// 8 to 256
        /// 
        /// Default Value: 32
        /// </param>
        /// <param name="Audio_Bits">
        /// This control sets slot length of the audio data within a slot. Only the specified number of data bits are analyzed..
        /// 
        /// Valid Range: 8 to Slot Length (max 32)
        /// 
        /// Default Value: 16
        /// </param>
        /// <param name="Lead_Bits">
        /// This control sets the offset of the audio bits within a slot relative to the start of the slot.
        /// If LSB is selected as the first bit, the setting for lead bits is automatically corrected if the setting for audio bits is changed so that the MSB is received at the same location. This has the advantage that the resolution and not the amplitude of the measured signal is changed if the audio bits are changed.
        /// 
        /// Valid Values:
        /// 0 to Slot Length - Audio Bits
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIAnalyzerSlot(int First_Bit, int Slot_Length, int Audio_Bits, int Lead_Bits)
        {
            int pInvokeResult = PInvoke.ConfigureUSIAnalyzerSlot(this._handle, First_Bit, Slot_Length, Audio_Bits, Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to set the sample frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) All received audio data frequency specifications relate to this setting. If the USI analyzer is operated with external synchronisation and the frequency of the external clock does not correspond to the set sampling frequency, the analyzer displays incorrect frequency values.
        /// For data formats with one sample per frame, the sampling frequency corresponds to the frequency of the Fsync signal. In case of several audio data samples from one source within a frame, the frequency of the Fsync signal is the product of the sampling frequency divided by the factor of samples/frame.
        /// 
        /// (2) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE F08 | F11 | F16 | F22 | F32 | F44 | F48 | F88 | F96 | F176 | F192 | F384 | VALue | AUTo
        /// INPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control sets the sample frequency.
        /// 
        /// Valid Values:
        /// RSUPV_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// RSUPV_SAMPLE_FREQ_AUTO  (13) - Auto
        /// 
        /// Default Value: RSUPV_SAMPLE_FREQ_48 (6)
        /// 
        /// Notes:
        /// 
        /// (1) Variable Sample Frequency: Variable sample rate entry.
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control sets variable sample rate value.
        /// 
        /// Valid Range: 8.4375e2 to 400e3 Hz
        /// 
        /// Default Value: 30.0e3 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Variable Sample Frequency entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSampleFrequency(int Sample_Frequency, double Variable_Sample_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSampleFrequency(this._handle, Sample_Frequency, Variable_Sample_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures Frame Synchronization parameters. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FWIDth ONEBit | ONESlot | SQUare | VALue
        /// INPut:FWIDth:VALue
        /// INPut:FOFFset
        /// INPut:FSLope RISing | FALLing
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control selects 
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_SLOT (1)
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control sets variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <param name="Fsync_Offset">
        /// This control determines the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="Fsync_Slope">
        /// This control selects polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureUSIAnalyzerFsync(int Fsync_Width, int Variable_Fsync_Width, int Fsync_Offset, int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureUSIAnalyzerFsync(this._handle, Fsync_Width, Variable_Fsync_Width, Fsync_Offset, Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function causes a complete renewed synchronisation of the analyzer. If the analyzer is synchronised by external signals in slave mode the resync mechanismus should be performed once after the application and synchronisation of the external cocks.
        /// 
        /// Remote-control command(s):
        /// INPut:RESYnc ONCE
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int USIAnalyzerResync()
        {
            int pInvokeResult = PInvoke.USIAnalyzerResync(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries measurement channels state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;1...2&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of selected measurement channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerMeasChannelState(int Meas_Channel, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetUSIAnalyzerMeasChannelState(this._handle, Meas_Channel, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets continuous clock or gated clock operating mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CLOCk GATed | CONTinous
        /// </summary>
        /// <param name="Clock">
        /// This control selects continuous clock or gated clock operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// 
        /// Default Value: RSUPV_CLOCK_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous: Prerequisite for the continuous clock mode is a continuous clock for the analyzer. The clock source may be internal or external. If synchronization is external, several types of synchronization are available for selection.
        /// 
        /// (2) Gated: The gated clock mode must be selected if the externally supplied bit clock (BClk) and FrameSync (Fsync) are discontinuous or have such a large jitter that the internal PLL can no longer follow this clock. In this operating mode, synchronisation is limited to the external FrameSync &amp; bit clock (Ext Fsync&amp;BClk) option. The audio signal generated cannot be monitored.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerClock(int Clock)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerClock(this._handle, Clock);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries clock operating mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CLOCk GATed | CONTinous
        /// </summary>
        /// <param name="Clock">
        /// This control returns clock operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_CLOCK_CONTINUOUS (0) - Continuous
        /// RSUPV_CLOCK_GATED      (1) - Gated
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerClock(out int Clock)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerClock(this._handle, out Clock);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets timeout of the measurement in Gated clock mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:TIMeout
        /// </summary>
        /// <param name="Timeout">
        /// This control sets timeout of the measurement in Gated clock mode.
        /// 
        /// Valid Values:
        /// 0.0 to 0.5 s
        /// 
        /// Default Value: 0.5s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerTimeout(double Timeout)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerTimeout(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries timeout of the measurement in Gated clock mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:TIMeout?
        /// </summary>
        /// <param name="Timeout">
        /// This control returns timeout of the measurement in Gated clock mode.
        /// 
        /// Valid Values:
        /// 0.0 to 0.5 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerTimeout(out double Timeout)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerTimeout(this._handle, out Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function permits simultaneous analysis of data streams at varying sampling rates.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MSAMplefrequency ON | OFF
        /// </summary>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control permits simultaneous analysis of data streams at varying sampling rates.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerMixedSamplingFrequencyState(bool Mixed_Sampling_Frequency)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerMixedSamplingFrequencyState(this._handle, System.Convert.ToUInt16(Mixed_Sampling_Frequency));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries state of mixed sampling frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MSAMplefrequency?
        /// </summary>
        /// <param name="Mixed_Sampling_Frequency">
        /// This control returns the state of mixed sampling frequency.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerMixedSamplingFrequencyState(out bool Mixed_Sampling_Frequency)
        {
            ushort Mixed_Sampling_FrequencyAsUShort;
            int pInvokeResult = PInvoke.GetUSIAnalyzerMixedSamplingFrequencyState(this._handle, out Mixed_Sampling_FrequencyAsUShort);
            Mixed_Sampling_Frequency = System.Convert.ToBoolean(Mixed_Sampling_FrequencyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects up-sampling factor for the slower data stream. The input data with the lower sampling rate is characterised by correspondingly fewer entries in the Slots input field.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:RATio
        /// </summary>
        /// <param name="Ratio">
        /// This control selects up-sampling factor for the slower data stream. The input data with the lower sampling rate is characterised by correspondingly fewer entries in the Slots input field.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerRatio(int Ratio)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerRatio(this._handle, Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries up-sampling factor for the slower data stream.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:RATio?
        /// </summary>
        /// <param name="Ratio">
        /// This control returns up-sampling factor for the slower data stream. The input data with the lower sampling rate is characterised by correspondingly fewer entries in the Slots input field.
        /// 
        /// Valid Values:
        /// 2 to 6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerRatio(out int Ratio)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerRatio(this._handle, out Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the number of samples per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SPFRame
        /// </summary>
        /// <param name="Samples">
        /// This control defines the number of samples per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSamplesPerFrame(int Samples)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSamplesPerFrame(this._handle, Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of samples per frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SPFRame?
        /// </summary>
        /// <param name="Samples">
        /// This control returns the number of samples per frame.
        /// 
        /// Valid Values:
        /// 1 to 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSamplesPerFrame(out int Samples)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSamplesPerFrame(this._handle, out Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects number of slots per frame.
        /// 
        /// Remote-control command(s):
        /// INPut:NOSLots
        /// </summary>
        /// <param name="Number_Of_Slots">
        /// This control selects number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerNumberOfSlots(int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerNumberOfSlots(this._handle, Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries number of slots per frame.
        /// 
        /// Remote-control command(s):
        /// INPut:NOSLots?
        /// </summary>
        /// <param name="Number_Of_Slots">
        /// This control returns number of slots per frame.
        /// 
        /// Valid Values:
        /// 1 to 256
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerNumberOfSlots(out int Number_Of_Slots)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerNumberOfSlots(this._handle, out Number_Of_Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input data line for selected measuring channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHSource&lt;1...2&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Data_Link">
        /// This control returns the input data line for selected measuring channel.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerMeasurementSource(int Meas_Channel, out int Data_Link)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerMeasurementSource(this._handle, Meas_Channel, out Data_Link);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the audio frame slots to be analyzed for selected measuring channel. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SLOTs&lt;1...8&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// This control defines size of 'Slots' array.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Slots">
        /// This control returns the audio frame slots to be analyzed for selected measuring channel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSlots(int Meas_Channel, int Array_Size, System.Text.StringBuilder Slots)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSlots(this._handle, Meas_Channel, Array_Size, Slots);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source to which the USI dual channel analyzer is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SYNCto ICLock | EMASterclock | EFSYnc | EFAMon | EFBClk
        /// </summary>
        /// <param name="Sync_To">
        /// This control selects the source to which the USI dual channel analyzer is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_SYNC_INT_CLK  (0) - Internal Clock
        /// RSUPV_DUAL_SYNC_EXT_MCLK (1) - Ext Masterclk
        /// RSUPV_DUAL_SYNC_EXT_FSYN (2) - Ext Fsync
        /// RSUPV_DUAL_SYNC_EXT_FAM  (3) - Ext Fsync (AudMod)
        /// RSUPV_DUAL_SYNC_EXT_FBCL (4) - Ext Fsync &amp; Bclk
        /// 
        /// Default Value: RSUPV_DUAL_SYNC_INT_CLK (0)
        /// 
        /// Notes:
        /// 
        /// (1) Intern CLK: The generator uses the internal clock.
        /// 
        /// (2) Ext Masterclk: Synchronisation to an external master clock (TX_MCLK_IN).
        /// 
        /// (3) Ext Fsync: Synchronisation to an external FrameSync signal (TX_FSYNC_IN). Audio monitoring of the analyzer signal is not possible. A master clock is additionally generated and output.
        /// 
        /// (4) Ext Fsync (AudMod): Synchronisation to an external FrameSync signal (TX_FSYNC_IN). It is not possible to audio monitor the analyzer signal. No master clock is output.
        /// 
        /// (5) Ext Fsync &amp; Bclk: Synchronisation to the external FrameSync signals (TX_FSYNC_IN) and the bit clock (TX_BCLK_IN).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSyncTo(int Sync_To)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSyncTo(this._handle, Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the source to which the USI dual channel analyzer is synchronized.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SYNCto?
        /// </summary>
        /// <param name="Sync_To">
        /// This control returns the source to which the USI dual channel analyzer is synchronized.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_SYNC_INT_CLK  (0) - Internal Clock
        /// RSUPV_DUAL_SYNC_EXT_MCLK (1) - Ext Masterclk
        /// RSUPV_DUAL_SYNC_EXT_FSYN (2) - Ext Fsync
        /// RSUPV_DUAL_SYNC_EXT_FAM  (3) - Ext Fsync (AudMod)
        /// RSUPV_DUAL_SYNC_EXT_FBCL (4) - Ext Fsync &amp; Bclk
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSyncTo(out int Sync_To)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSyncTo(this._handle, out Sync_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects data bit receiving sequence.
        /// 
        /// Remote-control command(s):
        /// INPut:FBIT MSB | LSB
        /// </summary>
        /// <param name="First_Bit">
        /// This control selects data bit receiving sequence.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// 
        /// Default Value: RSUPV_DUAL_BIT_MSB (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerFirstBit(int First_Bit)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerFirstBit(this._handle, First_Bit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries data bit receiving sequence.
        /// 
        /// Remote-control command(s):
        /// INPut:FBIT?
        /// </summary>
        /// <param name="First_Bit">
        /// This control returns data bit receiving sequence.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_BIT_MSB (0) - MSB
        /// RSUPV_DUAL_BIT_LSB (1) - LSB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerFirstBit(out int First_Bit)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerFirstBit(this._handle, out First_Bit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects slot length of a slot including gaps (0 bits).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SLTLength
        /// </summary>
        /// <param name="Slot_Length">
        /// This control selects slot length of a slot including gaps (0 bits).
        /// 
        /// Valid Values:
        /// 8 to 256
        /// 
        /// Default Value: 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSlotLength(int Slot_Length)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSlotLength(this._handle, Slot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot length of a slot including gaps (0 bits).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SLTLength?
        /// </summary>
        /// <param name="Slot_Length">
        /// This control returns slot length of a slot including gaps (0 bits).
        /// 
        /// Valid Values:
        /// 8 to 256
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSlotLength(out int Slot_Length)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSlotLength(this._handle, out Slot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets slot length of the audio data within a slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:AUDiobits
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control sets slot length of the audio data within a slot. Only the specified number of data bits are analyzed..
        /// 
        /// Valid Range: 8 to Slot Length (max 32)
        /// 
        /// Default Value: 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerAudioBits(int Audio_Bits)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerAudioBits(this._handle, Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries slot length of the audio data within a slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:AUDiobits?
        /// </summary>
        /// <param name="Audio_Bits">
        /// This control returns slot length of the audio data within a slot.
        /// 
        /// Valid Range: 8 to 32
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerAudioBits(out int Audio_Bits)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerAudioBits(this._handle, out Audio_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the offset of the audio bits within a slot relative to the start of the slot.
        /// If LSB is selected as the first bit, the setting for lead bits is automatically corrected if the setting for audio bits is changed so that the MSB is received at the same location. This has the advantage that the resolution and not the amplitude of the measured signal is changed if the audio bits are changed.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:LBITs
        /// </summary>
        /// <param name="Lead_Bits">
        /// This control sets the offset of the audio bits within a slot relative to the start of the slot.
        /// If LSB is selected as the first bit, the setting for lead bits is automatically corrected if the setting for audio bits is changed so that the MSB is received at the same location. This has the advantage that the resolution and not the amplitude of the measured signal is changed if the audio bits are changed.
        /// 
        /// Valid Values:
        /// 0 to Slot Length - Audio Bits
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerLeadBits(int Lead_Bits)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerLeadBits(this._handle, Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:LBITs?
        /// </summary>
        /// <param name="Lead_Bits">
        /// This control returns the offset of the audio bits within a slot relative to the start of the slot.
        /// 
        /// Valid Range:
        /// 0 to Slot Length - Audio Bits
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerLeadBits(out int Lead_Bits)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerLeadBits(this._handle, out Lead_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to query the sampling frequency. 
        /// 
        /// Note(s):
        /// 
        /// (2) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE?
        /// INPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control returns the sampling frequency.
        /// 
        /// Valid Values:
        /// RSUPV_SAMPLE_FREQ_08    (0) - 8 kHz
        /// RSUPV_SAMPLE_FREQ_11    (1) - 11.025 kHz
        /// RSUPV_SAMPLE_FREQ_16    (2) - 16 kHz
        /// RSUPV_SAMPLE_FREQ_22    (3) - 22.05 kHz
        /// RSUPV_SAMPLE_FREQ_64    (4) - 32 kHz
        /// RSUPV_SAMPLE_FREQ_44    (5) - 44.1 kHz
        /// RSUPV_SAMPLE_FREQ_48    (6) - 48 kHz
        /// RSUPV_SAMPLE_FREQ_88    (7) - 88.2 kHz
        /// RSUPV_SAMPLE_FREQ_96    (8) - 96 kHz
        /// RSUPV_SAMPLE_FREQ_176   (9) - 176.4 kHz
        /// RSUPV_SAMPLE_FREQ_192   (10) - 192 kHz
        /// RSUPV_SAMPLE_FREQ_384   (11) - 384 kHz
        /// RSUPV_SAMPLE_FREQ_VAL   (12) - Variable Sample Frequency
        /// RSUPV_SAMPLE_FREQ_AUTO  (13) - Auto
        /// </param>
        /// <param name="Variable_Sample_Frequency">
        /// This control returns variable sample rate value.
        /// 
        /// Valid Range: 8.4375e2 to 400e3 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Variable Sample Frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Sample Frequency = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSampleFrequency(out int Sample_Frequency, out double Variable_Sample_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSampleFrequency(this._handle, out Sample_Frequency, out Variable_Sample_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries Frame Sync frequency which corresponds to the sampling frequncy divided by the samples/frame factor. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FSYNc:FREQuency?
        /// </summary>
        /// <param name="Fsync_Frequency">
        /// This control returns Frame Sync frequency which corresponds to the sampling frequncy divided by the samples/frame factor. Value is in kHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerFsyncFrequency(out double Fsync_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerFsyncFrequency(this._handle, out Fsync_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries bit clock frequency. Is calculated from the product of channel length * no of slots * sample freq / samples/frame.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:BCLk:FREQuency?
        /// </summary>
        /// <param name="BClk_Frequency">
        /// This control returns bit clock frequency. Is calculated from the product of channel length * no of slots * sample freq / samples/frame. Value is in kHz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerBClkFrequency(out double BClk_Frequency)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerBClkFrequency(this._handle, out BClk_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects width of the FSYNC pulse
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FWIDth ONEBit | ONESlot | SQUare | VALue
        /// INPut:FWIDth:VALue
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control selects width of the FSYNC pulse.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// 
        /// Default Value: RSUPV_DUAL_FWIDTH_SLOT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) 1 bit: The FSYNC pulse is one data bit in length (BClk period).
        /// 
        /// (2) 1 slot: The FSYNC pulse is the length of an audio channel (= slot length).
        /// 
        /// (3) Square: The FSYNC pulse has the shape of a symmetrical rectangle. If the number of the slot?s bit clock (BClk) cycles is odd the high phase is one cycle longer than the low phase (if Fsync slope = rising)
        /// 
        /// (4) Value: The length of the FSYNC pulse corresponds to the numeric value in data bits (BClk periods).
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control sets variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerFsyncWidth(int Fsync_Width, int Variable_Fsync_Width)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerFsyncWidth(this._handle, Fsync_Width, Variable_Fsync_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries width of the FSYNC pulse
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FWIDth?
        /// INPut:FWIDth:VALue?
        /// </summary>
        /// <param name="Fsync_Width">
        /// This control returns width of the FSYNC pulse.
        /// 
        /// Valid Values:
        /// RSUPV_DUAL_FWIDTH_BIT    (0) - 1 Bit
        /// RSUPV_DUAL_FWIDTH_SLOT   (1) - 1 Slot
        /// RSUPV_DUAL_FWIDTH_SQUARE (2) - Square
        /// RSUPV_DUAL_FWIDTH_VALUE  (3) - Value
        /// </param>
        /// <param name="Variable_Fsync_Width">
        /// This control returns variable fsync width.
        /// 
        /// Valid Range: 1 to (Slot Length*No of Slots)-1
        /// 
        /// Note(s):
        /// 
        /// (1) This control is used only if Fsync Width = Value
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerFsyncWidth(out int Fsync_Width, out int Variable_Fsync_Width)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerFsyncWidth(this._handle, out Fsync_Width, out Variable_Fsync_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the offset of the Fsync pulse relative to the reference point (start of the first slot).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FOFFset
        /// </summary>
        /// <param name="Fsync_Offset">
        /// This control determines the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerFsyncOffset(int Fsync_Offset)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerFsyncOffset(this._handle, Fsync_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset of the Fsync pulse relative to the reference point (start of the first slot).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FOFFset?
        /// </summary>
        /// <param name="Fsync_Offset">
        /// This control queries the offset of the Fsync pulse relative to the reference point (start of the first slot). 
        /// 
        /// Valid Range: -Slot Length*(No of Slots)...+Slot Length*(No of Slots)-1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerFsyncOffset(out int Fsync_Offset)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerFsyncOffset(this._handle, out Fsync_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects polarity of the Fsync pulse.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FSLope RISing | FALLing
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control selects polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerFsyncSlope(int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerFsyncSlope(this._handle, Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries polarity of the Fsync pulse.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:FSLope?
        /// </summary>
        /// <param name="Fsync_Slope">
        /// This control returns polarity of the Fsync pulse.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerFsyncSlope(out int Fsync_Slope)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerFsyncSlope(this._handle, out Fsync_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects bit clock polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:BSLope RISing | FALLing
        /// </summary>
        /// <param name="BClk_Slope">
        /// This control selects bit clock polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// 
        /// Default Value: RSUPV_SLOPE_RISING (1)
        /// 
        /// Note(s):
        /// 
        /// (1) Rising: The RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 signals are synchronized with a rising bit clock edge (RX_BCLK_IN if the analyzer is synchronised externally, or RX_BCLK_OUT if it is internally synchronised). The FrameSync (RX_FSYNC_OUT) generated in master mode changes, however, with a falling bit clock edge (RX_BCLK_OUT).
        /// 
        /// (2) Falling: The RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 signals are synchronised with a falling bit clock edge (RX_BCLK_IN if the analyzer is synchronised externally, and RX_BCLK_OUT if it is internally synchronised). The FrameSync (RX_FSYNC_OUT) generated in master mode changes, however, with a rising bit clock edge (RX_BCLK_OUT).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerBClkSlope(int BClk_Slope)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerBClkSlope(this._handle, BClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries bit clock polarity.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:BSLope?
        /// </summary>
        /// <param name="BClk_Slope">
        /// This control returns bit clock polarity.
        /// 
        /// Valid Values:
        /// RSUPV_SLOPE_RISING  (0) - Rising
        /// RSUPV_SLOPE_FALLING (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerBClkSlope(out int BClk_Slope)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerBClkSlope(this._handle, out BClk_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MRATio
        /// </summary>
        /// <param name="Ratio">
        /// This control defines relationship between the master clock (MCLK) and the FrameSync (FSYNC). 
        /// 
        /// Valid Values:
        /// 16 to 768
        /// 
        /// Default Value: 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerMClkRatio(int Ratio)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerMClkRatio(this._handle, Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:MRATio?
        /// </summary>
        /// <param name="Ratio">
        /// This control returns relationship between the master clock (MCLK) and the FrameSync (FSYNC).
        /// 
        /// Valid Values:
        /// 16 to 768
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerMClkRatio(out int Ratio)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerMClkRatio(this._handle, out Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function permits a delay of the RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 input signal sampling times in relation to the RX_BCLK_IN or RX_BCLK_OUT clocks. Positive values delay the sampling to a later time. 
        /// This feature is used above all if TCO delays, in other words response times of a device under test being operated in slave mode at high frequencies, reach the size of a bit clock period. In order to compensate for bit shifts when analyzing in the analyzer these delay times are compensated by a later sampling point. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SDELay
        /// </summary>
        /// <param name="Sampling_Delay">
        /// This parameter permits a delay of the RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 input signal sampling times in relation to the RX_BCLK_IN or RX_BCLK_OUT clocks. Positive values delay the sampling to a later time. 
        /// 
        /// Valid Range:
        /// -10.0 to 10.0 ns
        /// 
        /// Default Value: 0.0 ns
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerSamplingDelay(double Sampling_Delay)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerSamplingDelay(this._handle, Sampling_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries a delay of the RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 input signal sampling times in relation to the RX_BCLK_IN or RX_BCLK_OUT clocks.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SDELay?
        /// </summary>
        /// <param name="Sampling_Delay">
        /// This control returns a delay of the RX_FSYNC_IN, RX_DATA1, RX_DATA2, RX_DATA3 and RX_DATA4 input signal sampling times in relation to the RX_BCLK_IN or RX_BCLK_OUT clocks.
        /// 
        /// Valid Range:
        /// -10.0E-12 to 10.0E-12 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerSamplingDelay(out double Sampling_Delay)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerSamplingDelay(this._handle, out Sampling_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the analyzer logic voltage. Changing the voltage level causes the sample to be reloaded. The sample can be attached and disconnected and put back into operation during operation with this mechanism.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:LOGVoltage MV0900 | MV1200 | MV1500 | MV1800 | MV2500 | MV3300
        /// 
        /// </summary>
        /// <param name="Logic_Voltage">
        /// This control sets the analyzer logic voltage. Changing the voltage level causes the sample to be reloaded. The sample can be attached and disconnected and put back into operation during operation with this mechanism.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_VOLTAGE_0V9 (0) - 0.9V
        /// RSUPV_VAL_VOLTAGE_1V2 (1) - 1.2V
        /// RSUPV_VAL_VOLTAGE_1V8 (2) - 1.8V
        /// RSUPV_VAL_VOLTAGE_2V5 (3) - 2.5V
        /// RSUPV_VAL_VOLTAGE_3V3 (4) - 3.3V
        /// 
        /// Default Value: RSUPV_VAL_VOLTAGE_3V3 (4)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerLogicVoltage(int Logic_Voltage)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerLogicVoltage(this._handle, Logic_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the analyzer logic voltage.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:LOGVoltage?
        /// </summary>
        /// <param name="Logic_Voltage">
        /// This control returns the analyzer logic voltage.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_VOLTAGE_0V9 (0) - 0.9V
        /// RSUPV_VAL_VOLTAGE_1V2 (1) - 1.2V
        /// RSUPV_VAL_VOLTAGE_1V8 (2) - 1.8V
        /// RSUPV_VAL_VOLTAGE_2V5 (3) - 2.5V
        /// RSUPV_VAL_VOLTAGE_3V3 (4) - 3.3V
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerLogicVoltage(out int Logic_Voltage)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerLogicVoltage(this._handle, out Logic_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets analyzer data coding regulation. A Law and micro Law quantification characteristics are available for telephony applications.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CODing NONE | ALAW | ULAW
        /// </summary>
        /// <param name="Coding">
        /// This control sets analyzer data coding regulation. A Law and micro Law quantification characteristics are available for telephony applications.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_CODING_NONE (0) - None
        /// RSUPV_VAL_CODING_ALAW (1) - A-Law
        /// RSUPV_VAL_CODING_ULAW (2) - u-Law
        /// 
        /// Default Value: RSUPV_VAL_CODING_NONE (4)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUSIAnalyzerCoding(int Coding)
        {
            int pInvokeResult = PInvoke.SetUSIAnalyzerCoding(this._handle, Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries analyzer data coding regulation.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B42 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CODing?
        /// </summary>
        /// <param name="Coding">
        /// This control returns analyzer data coding regulation.
        /// 
        /// Valid Values:
        /// RSUPV_VAL_CODING_NONE (0) - None
        /// RSUPV_VAL_CODING_ALAW (1) - A-Law
        /// RSUPV_VAL_CODING_ULAW (2) - u-Law
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUSIAnalyzerCoding(out int Coding)
        {
            int pInvokeResult = PInvoke.GetUSIAnalyzerCoding(this._handle, out Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the HDMI analyzer audio parameters. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:INPut
        /// SENSe:HDMI:AUDio:FORMat
        /// SENSe:HDMI:AUDio:CODing
        /// </summary>
        /// <param name="Input">
        /// Select the audio source.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_INPUT_SINK      (0) - HDMI Sink
        /// RSUPV_ANALYZER_HDMI_INPUT_SARC      (1) - Source ARC
        /// RSUPV_ANALYZER_HDMI_INPUT_DIUNBAL   (2) - DigIn Unbal
        /// RSUPV_ANALYZER_HDMI_INPUT_DIOPTICAL (3) - DigIn Optical
        /// 
        /// Default Value: RSUPV_ANALYZER_HDMI_INPUT_SINK (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) HDMI Sink - Audio source is the HDMI SINK socket.
        /// 
        /// (2) Source ARC - Audio source is the Audio Return Channel supplied via the SOURCE socket.
        /// 
        /// (3) DigIn Unbal - Audio source is the Digital In BNC socket.
        /// 
        /// (4) DigIn Optical - Audio source is the Digital In TOSLINK socket.
        /// 
        /// </param>
        /// <param name="Audio_Coding">
        /// Select the decoder functionality.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_PCM         (0) - PCM
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_AUTO_DETECT (1) - Auto Detect
        /// 
        /// Default Value: RSUPV_ANALYZER_HDMI_AUDIO_CODING_PCM (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) PCM - Incoming audio data are directly analyzed.
        /// 
        /// (2) Auto Detect - Coded audio data are automatically decoded. The determined decoding method is displayed in the next line.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureHDMIAnalyzerAudio(int Input, int Audio_Coding)
        {
            int pInvokeResult = PInvoke.ConfigureHDMIAnalyzerAudio(this._handle, Input, Audio_Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the audio source. By default, the audio data are received and analyzed via the HDMI SINK socket in the HDMI analyzer.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:INPut SINK | SARC | DIUnbal | DIOptical
        /// </summary>
        /// <param name="Input">
        /// Select the audio source.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_INPUT_SINK      (0) - HDMI Sink
        /// RSUPV_ANALYZER_HDMI_INPUT_SARC      (1) - Source ARC
        /// RSUPV_ANALYZER_HDMI_INPUT_DIUNBAL   (2) - DigIn Unbal
        /// RSUPV_ANALYZER_HDMI_INPUT_DIOPTICAL (3) - DigIn Optical
        /// 
        /// Default Value: RSUPV_ANALYZER_HDMI_INPUT_SINK (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) HDMI Sink - Audio source is the HDMI SINK socket.
        /// 
        /// (2) Source ARC - Audio source is the Audio Return Channel supplied via the SOURCE socket.
        /// 
        /// (3) DigIn Unbal - Audio source is the Digital In BNC socket.
        /// 
        /// (4) DigIn Optical - Audio source is the Digital In TOSLINK socket.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIAnalyzerAudioInput(int Input)
        {
            int pInvokeResult = PInvoke.SetHDMIAnalyzerAudioInput(this._handle, Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the audio source.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:INPut?
        /// </summary>
        /// <param name="Input">
        /// This control returns the audio source.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_INPUT_SINK      (0) - HDMI Sink
        /// RSUPV_ANALYZER_HDMI_INPUT_SARC      (1) - Source ARC
        /// RSUPV_ANALYZER_HDMI_INPUT_DIUNBAL   (2) - DigIn Unbal
        /// RSUPV_ANALYZER_HDMI_INPUT_DIOPTICAL (3) - DigIn Optical
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioInput(out int Input)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioInput(this._handle, out Input);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the HDMI layout of the supplied audio data.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:FORMat?
        /// </summary>
        /// <param name="Audio_Format">
        /// Returns the HDMI layout of the supplied audio data.
        /// 
        /// Valid Values:
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L0 (0) - PCM Lay 0
        /// RSUPV_HDMI_AUDIO_FORMAT_PCM_L1 (1) - PCM Lay 1
        /// RSUPV_HDMI_AUDIO_FORMAT_DD     (2) - Dolby Digital
        /// RSUPV_HDMI_AUDIO_FORMAT_DDP    (3) - Dolby Digital Plus
        /// RSUPV_HDMI_AUDIO_FORMAT_DTS    (4) - DTS
        /// RSUPV_HDMI_AUDIO_FORMAT_DTHD   (5) - DTHD
        /// RSUPV_HDMI_AUDIO_FORMAT_DTSHD  (6) - DTS HD
        /// RSUPV_HDMI_AUDIO_FORMAT_DHDM   (7) - DTS Master
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioFormat(out int Audio_Format)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioFormat(this._handle, out Audio_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the decoder functionality.
        /// 
        /// Notes:
        /// 
        /// (1) The analysis of compressed data formats (Dolby/DTS) is available only with the R&amp;S UPP-K41 option (Dolby decoding) or the R&amp;S UPP-K42 option (DTS decoding).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:CODing PCM | AUTodetect
        /// </summary>
        /// <param name="Audio_Coding">
        /// Select the decoder functionality.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_PCM         (0) - PCM
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_AUTO_DETECT (1) - Auto Detect
        /// 
        /// Default Value: RSUPV_ANALYZER_HDMI_AUDIO_CODING_PCM (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) PCM - Incoming audio data are directly analyzed.
        /// 
        /// (2) Auto Detect - Coded audio data are automatically decoded. The determined decoding method is displayed in the next line.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIAnalyzerAudioCoding(int Audio_Coding)
        {
            int pInvokeResult = PInvoke.SetHDMIAnalyzerAudioCoding(this._handle, Audio_Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the decoder functionality.
        /// 
        /// Notes:
        /// 
        /// (1) The analysis of compressed data formats (Dolby/DTS) is available only with the R&amp;S UPP-K41 option (Dolby decoding) or the R&amp;S UPP-K42 option (DTS decoding).
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:CODing?
        /// </summary>
        /// <param name="Audio_Coding">
        /// Returns the decoder functionality.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_PCM         (0) - PCM
        /// RSUPV_ANALYZER_HDMI_AUDIO_CODING_AUTO_DETECT (1) - Auto Detect
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioCoding(out int Audio_Coding)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioCoding(this._handle, out Audio_Coding);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns  field in which the determined decoding method (e.g. Dolby/DTS) is displayed.
        /// 
        /// Notes:
        /// 
        /// (1) The analysis of compressed data formats (Dolby/DTS) is available only with the R&amp;S UPP-K41 option (Dolby decoding) or the R&amp;S UPP-K42 option (DTS decoding).
        /// 
        /// (2) This display field appears only if "Coding = Auto Detect" .
        /// 
        /// (3) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:CODing:DETected:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Detected control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Detected">
        /// Display field in which the determined decoding method.
        /// 
        /// Note:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioDetected(int Buffer_Size, System.Text.StringBuilder Detected)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioDetected(this._handle, Buffer_Size, Detected);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The parameters N and CTS are required by an HDMI load for the regeneration of the audio master clock. They describe a fractional-rational ratio of the audio master clock to the video pixel clock.
        /// 
        /// Notes:
        /// 
        /// (1) According to the HDMI 1.4 specification, the N parameter is calculated according to the following relationship:
        /// 128*fs/1500Hz &lt;= N &lt;= 128*fs/300Hz
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:N?
        /// </summary>
        /// <param name="N">
        /// Returns the N parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioNParameter(out int N)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioNParameter(this._handle, out N);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The parameters N and CTS are required by an HDMI load for the regeneration of the audio master clock. They describe a fractional-rational ratio of the audio master clock to the video pixel clock.
        /// 
        /// Notes:
        /// 
        /// (1) According to the HDMI 1.4 specification, the CTS parameter is calculated according to the following relationship:
        /// 
        /// (Average CTS value) = (fTMDS_clock *N)/(128*fs)
        /// 
        /// 
        /// (2) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:CTS?
        /// </summary>
        /// <param name="CTS">
        /// Returns the CTS parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioCTSParameter(out int CTS)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioCTSParameter(this._handle, out CTS);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the active measurement channel.
        /// 
        /// Notes:
        /// 
        /// (1) If a 2-channel audio format (PCM 2Ch Lay 0) is supplied, the following selection box is provided. For an 8-channel audio format (PCM 8Ch Lay 1), this selection box disappears and 8 Meas Channel checkboxes are provided. The analyzer is in Channel Multi mode internally.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel CH1 | CH2 | BOTH | MULTi
        /// </summary>
        /// <param name="Channel">
        /// Selects the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// RSUPV_ANALYZER_CH_MULTI   (6) - Multi
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1: Only the signal on the left-hand channel is measured.
        /// 
        /// (2) 2: Only the signal on the right-hand channel is measured.
        /// 
        /// (3) Both: Both channels are measured (stereo).
        /// 
        /// (4) Multi: Enables the selection of channels via checkboxes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIAnalyzerAudioChannel(int Channel)
        {
            int pInvokeResult = PInvoke.SetHDMIAnalyzerAudioChannel(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active measurement channel. 
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel?
        /// </summary>
        /// <param name="Channel">
        /// Returns the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// RSUPV_ANALYZER_CH_MULTI   (6) - Multi
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioChannel(out int Channel)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioChannel(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures measurement channels state.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;1...8&gt; ON|OFF
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control enables or disables selected measurement channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHDMIAnalyzerAudioMeasChannelState(int Meas_Channel, bool State)
        {
            int pInvokeResult = PInvoke.SetHDMIAnalyzerAudioMeasChannelState(this._handle, Meas_Channel, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries measurement channels state.
        /// 
        /// Remote-control command(s):
        /// INPut:MCHannels&lt;1...8&gt;?
        /// </summary>
        /// <param name="Meas_Channel">
        /// This control selects measurement channel.
        /// 
        /// Valid Values:
        /// 1 to 8
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of selected measurement channel.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioMeasChannelState(int Meas_Channel, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioMeasChannelState(this._handle, Meas_Channel, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an image of the binary data structure from the instrument.
        /// 
        /// Notes:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// (2) Opens a window in which the content of the Audio Info Frame of a connected HDMI source is shown. The data structure of this Info Frame is specified in the CEA-861 standard.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (4) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AUDio:INFoframe:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Audio Info Frame control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Audio_Info_Frame">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerAudioInfoFrame(int Buffer_Size, System.Text.StringBuilder Audio_Info_Frame)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerAudioInfoFrame(this._handle, Buffer_Size, Audio_Info_Frame);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Video identification code of the supplied video signal according to CEA-861. The ID code is extracted directly from the AVI Info Frame of the connected HDMI source.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:VIDeo:FORMat?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Format No control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Format_No">
        /// This control returns the Video identification code of the supplied video signal according to CEA-861. The ID code
        /// is extracted directly from the AVI Info Frame of the connected HDMI source.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoFormatNo(int Buffer_Size, System.Text.StringBuilder Format_No)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoFormatNo(this._handle, Buffer_Size, Format_No);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Color depth of the supplied video format. This information is extracted from the General
        /// Control Packet of a connected HDMI source.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:VIDeo:COLor:DEPTh?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Format No control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Color_Depth">
        /// This control returns the Color depth of the supplied video format.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoColorDepth(int Buffer_Size, System.Text.StringBuilder Color_Depth)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoColorDepth(this._handle, Buffer_Size, Color_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function indicates whether the A/V signal of a connected HDMI source is encrypted or not.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:HDCP?
        /// </summary>
        /// <param name="HDCP_State">
        /// This control returns the state of HDCP.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoHDCPState(out bool HDCP_State)
        {
            ushort HDCP_StateAsUShort;
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoHDCPState(this._handle, out HDCP_StateAsUShort);
            HDCP_State = System.Convert.ToBoolean(HDCP_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an image of the binary data structure from the instrument.
        /// 
        /// Notes:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// (2) Opens a measurement display in which the frequencies of Pixelclock, HSync and VSync as well as their time reference are displayed. Deviations of these parameters from the values specified for this format are highlighted in color as errors based on the CEA-861 standard.
        ///  
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (4) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:VIDeo:TIMing:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Timings control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Timings">
        /// This control returns an image of the binary data structure from the instrument.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoTimings(int Buffer_Size, System.Text.StringBuilder Timings)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoTimings(this._handle, Buffer_Size, Timings);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an image of the binary data structure from the instrument.
        /// 
        /// Notes:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// (2) The data structure of this Info Frame is specified in the CEA-861 standard.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (4) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:AVI:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the AVI control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="AVI">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoAVI(int Buffer_Size, System.Text.StringBuilder AVI)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoAVI(this._handle, Buffer_Size, AVI);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an image of the binary data structure from the instrument.
        /// 
        /// Notes:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// (2) Opens a window in which the content of the SPD Info Frame of a connected HDMI source is shown. The data structure of this Info Frame is specified in the CEA-861 standard.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (4) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:SPD:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the SPD control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="SPD">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoSPD(int Buffer_Size, System.Text.StringBuilder SPD)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoSPD(this._handle, Buffer_Size, SPD);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an image of the binary data structure from the instrument.
        /// 
        /// Notes:
        /// 
        /// (1) The query retrieves in the hexadecimal format the image of the binary data structure, which is identical to the data structure shown in the lower area of the corresponding editor in manual control.
        /// 
        /// (2) Opens a window in which the content of the E-EDID data structure of a connected HDMI source is shown. The structure of the E-EDID is specified in the VESA Enhanced Extended Display Identification Data standard.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// (4) This function is not available in UPV.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:HDMI:EEDid:STRing?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the E-EDID control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="E_EDID">
        /// This control returns an image of the binary data structure from the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHDMIAnalyzerVideoEEDID(int Buffer_Size, System.Text.StringBuilder E_EDID)
        {
            int pInvokeResult = PInvoke.GetHDMIAnalyzerVideoEEDID(this._handle, Buffer_Size, E_EDID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the active XLR sockets in the bottom right-hand part of the R&amp;S UPV front panel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel CH1 | CH2 | CH1And2 | CH2Is1 | CH1Is2
        /// </summary>
        /// <param name="Channel_Mode">
        /// Select the active XLR sockets in the bottom right-hand part of the R&amp;S UPV front panel.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_1AND2   (2) - 2 &amp; 1
        /// RSUPV_ANALYZER_CH_21      (3) - 2 = 1
        /// RSUPV_ANALYZER_CH_12      (4) - 1 = 2
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1: Only the signal applied at XLR socket 1 is measured. Can be selected in analog and digital audio analyzer.
        /// 
        /// (2) 2: Only the signal applied at XLR socket 2 is measured. Can be selected in analog and digital audio analyzer.
        /// 
        /// (3) 2 &amp; 1: Both XLR sockets are available for analysis of the
        /// applied signals. Channel 1 and Channel 2 can have different settings. Can be selected only in analog analyzer.
        /// 
        /// (4) 2 = 1: Both XLR sockets are available for analysis of the
        /// applied signals. Here, however, the setting for Channel 1 is also used for Channel 2. Can be selected only in analog analyzer. Can be selected only in analog analyzer.
        /// 
        /// (5) 1 = 2: Both XLR sockets are available for analysis of the
        /// applied signals. Here, however, the setting for Channel 1 is also used for Channel 2. Can be selected only in analog analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalogAnalyzerChannelMode(int Channel_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalogAnalyzerChannelMode(this._handle, Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active XLR sockets in the bottom right-hand part of the R&amp;S UPV front panel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel?
        /// </summary>
        /// <param name="Channel_Mode">
        /// Returns the active XLR sockets in the bottom right-hand part of the R&amp;S UPV front panel.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_1AND2   (2) - 2 &amp; 1
        /// RSUPV_ANALYZER_CH_21      (3) - 2 = 1
        /// RSUPV_ANALYZER_CH_12      (4) - 1 = 2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalogAnalyzerChannelMode(out int Channel_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalogAnalyzerChannelMode(this._handle, out Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the active measurement channel in the Meas Mode "Audio Data". Used to select the audio data for the left-hand channel (Ch1), righthand channel (Ch2) or both channels.
        /// 
        /// Note:
        /// 
        /// If a single-channel measurement is selected (Ch1 or Ch2), the data content of the other channel is not taken into consideration.
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel CH1 | CH2 | BOTH
        /// </summary>
        /// <param name="Channel_Mode">
        /// Selects the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1: Only the signal on the left-hand channel is measured.
        /// 
        /// (2) 2: Only the signal on the right-hand channel is measured.
        /// 
        /// (3) Both: Both channels are measured (stereo).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigitalAnalyzerChannelMode(int Channel_Mode)
        {
            int pInvokeResult = PInvoke.SetDigitalAnalyzerChannelMode(this._handle, Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active measurement channel in the Meas Mode "Audio Data".
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel?
        /// </summary>
        /// <param name="Channel_Mode">
        /// Returns the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigitalAnalyzerChannelMode(out int Channel_Mode)
        {
            int pInvokeResult = PInvoke.GetDigitalAnalyzerChannelMode(this._handle, out Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to select the active measurement channel. Used to select the audio data for the left-hand channel (Ch1), righthand channel (Ch2) or both channels.
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) If a single-channel measurement is selected (Ch1 or Ch2), the data content of the other channel is not taken into consideration.
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel CH1 | CH2 | BOTH
        /// </summary>
        /// <param name="Channel_Mode">
        /// Selects the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// 
        /// Default Value: RSUPV_ANALYZER_CH_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1: Only the signal on the left-hand channel is measured.
        /// 
        /// (2) 2: Only the signal on the right-hand channel is measured.
        /// 
        /// (3) Both: Both channels are measured (stereo).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerChannelMode(int Channel_Mode)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerChannelMode(this._handle, Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active measurement channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:CHANnel?
        /// </summary>
        /// <param name="Channel_Mode">
        /// Returns the active measurement channel(s).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_CH_1       (0) - 1
        /// RSUPV_ANALYZER_CH_2       (1) - 2
        /// RSUPV_ANALYZER_CH_BOTH    (5) - Both
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerChannelMode(out int Channel_Mode)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerChannelMode(this._handle, out Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function cofigures the Digital Bitstream Analyzer parameters.
        /// 
        /// Notes:
        /// 
        /// (1) This function is available only with the R&amp;S UPV-B42 hardware option (universal serial interface) and the additional R&amp;S UPV-K421 software option.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:CLKSource
        /// INPut:CHMode
        /// INPut:ALIGnment 
        /// INPut:DWNFactor
        /// INPut:CLKFrequency
        /// INPut:DTYCycle
        /// </summary>
        /// <param name="Clock_Source">
        /// This control selects the clock source for the bit stream signal. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_INTERN (0) - Intern
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_EXTERN (1) - Extern
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_INTERN (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Intern" - Configuration as clock master.
        /// 
        /// (2) "Extern" - Configuration as clock slave.
        /// </param>
        /// <param name="Channel_Mode">
        /// This control selects the input format of the data lines.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_MONO   (0) - Mono
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_STEREO (1) - Stereo
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_CH_MODE_MONO (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Mono" - The data of a line are interpreted as mono signal. The sampling is done with rising or falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// 
        /// (2) "Stereo" - The data of a line are interpreted as stereo signal. The sampling is done with various combinations of rising and falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// </param>
        /// <param name="Alignment">
        /// This control selects the relationship of clock and data to each other.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_RISING   (0) - Rising
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_FALLING  (1) - Falling
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1H_CH2L (2) - Ch1 High,Ch2 Low
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1L_CH2H (3) - Ch1 Low,Ch2 High
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1R_CH2F (4) - Ch1 Rise,Ch2 Fall
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1F_CH2R (5) - Ch1 Fall,Ch2 Rise
        /// 
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_ALIGMENT_RISING (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Rising" - In Channel Mode = Mono, the sampling of the data is done with rising clock edge.
        /// 
        /// (2) "Falling" - In Channel Mode = Mono, the sampling of the data is done with falling clock edge.
        /// 
        /// (3) "Ch1 High, Ch2 Low" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 1 lies under the High portion of the clock period, whereas channel 2 lies under the Low portion.
        /// 
        /// (4) "Ch1 Low, Ch2 High" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 2 lies under the High portion of the clock period, whereas channel 1 lies under the Low portion.
        /// 
        /// (5) "Ch1 Rise, Ch2 Fall" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 1 is taken with rising edge, channel 2 with falling edge.
        /// 
        /// (6) "Ch1 Fall, Ch2 Rise" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 2 is taken with rising edge, channel 1 with falling edge.
        /// </param>
        /// <param name="Dwnsmpl_Fact">
        /// This control defines the down-sampling factor. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M16   (0) - 16
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M32   (1) - 32
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M64   (2) - 64
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M128  (3) - 128
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M256  (4) - 256
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M16 (0)
        /// 
        /// </param>
        /// <param name="Clock_Frequency">
        /// This control sets the clock frequency.
        /// 
        /// Valid Range: 512 to 12800 kHz
        /// 
        /// Default Value: 512 kHz
        /// </param>
        /// <param name="Duty_Cycle">
        /// This control defines the duty cycle of the output clock.
        /// 
        /// Valid Range: 10% to 90%
        /// 
        /// Default Value: 10 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureDigBitstreamAnalyzer(int Clock_Source, int Channel_Mode, int Alignment, int Dwnsmpl_Fact, double Clock_Frequency, double Duty_Cycle)
        {
            int pInvokeResult = PInvoke.ConfigureDigBitstreamAnalyzer(this._handle, Clock_Source, Channel_Mode, Alignment, Dwnsmpl_Fact, Clock_Frequency, Duty_Cycle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the clock source for the bit stream signal. 
        /// 
        /// Notes:
        /// 
        /// (1) The Digital Bitstream Analyzer can be configured as clock master (Clock Source = Intern) or as pure slave (Clock Source = Extern).
        /// 
        /// (2) As clock master, the analyzer generates a clock that is configurable in frequency and duty cycle, which is used by a slave device for generating the sigma/delta bit stream.
        /// If the DUT features its own clock supply, the bit stream analyzer can be configured as slave. In this case, the data and the clock are generated by the device under test.
        /// 
        /// (3) This function is not available in UPP.
        ///  
        /// (4) This function is available only with the R&amp;S UPV-B42 hardware option (universal serial interface) and the additional R&amp;S UPV-K421 software option.
        /// 
        /// Remote-control command(s):
        /// INPut:CLKSource INTern | EXTern
        /// 
        /// </summary>
        /// <param name="Clock_Source">
        /// This control selects the clock source for the bit stream signal. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_INTERN (0) - Intern
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_EXTERN (1) - Extern
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_INTERN (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Intern" - Configuration as clock master.
        /// 
        /// (2) "Extern" - Configuration as clock slave.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerClockSource(int Clock_Source)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerClockSource(this._handle, Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the clock source for the bit stream signal. 
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CLKSource?
        /// </summary>
        /// <param name="Clock_Source">
        /// This control returns the clock source for the bit stream signal. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_INTERN (0) - Intern
        /// RSUPV_ANALYZER_DIG_AUD_CH_CLK_SOURCE_EXTERN (1) - Extern
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerClockSource(out int Clock_Source)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerClockSource(this._handle, out Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input format of the data lines. If the Digital Bitstream Analyzer is operated as clock slave (Clock Source = Extern), the selection is limited to one mono signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:CHMode MONO | STEReo
        /// </summary>
        /// <param name="Channel_Mode">
        /// This control selects the input format of the data lines.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_MONO   (0) - Mono
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_STEREO (1) - Stereo
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_CH_MODE_MONO (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Mono" - The data of a line are interpreted as mono signal. The sampling is done with rising or falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// 
        /// (2) "Stereo" - The data of a line are interpreted as stereo signal. The sampling is done with various combinations of rising and falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerChannelMode(int Channel_Mode)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerChannelMode(this._handle, Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the input format of the data lines. If the Digital Bitstream Analyzer is operated as clock slave (Clock Source = Extern), the selection is limited to one mono signal.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CHMode?
        /// </summary>
        /// <param name="Channel_Mode">
        /// This control returns the input format of the data lines.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_MONO   (0) - Mono
        /// RSUPV_ANALYZER_DIG_AUD_CH_MODE_STEREO (1) - Stereo
        /// 
        /// Notes:
        /// 
        /// (1) "Mono" - The data of a line are interpreted as mono signal. The sampling is done with rising or falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// 
        /// (2) "Stereo" - The data of a line are interpreted as stereo signal. The sampling is done with various combinations of rising and falling clock edge, adjustable in the "Alignment" parameter field underneath it.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerChannelMode(out int Channel_Mode)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerChannelMode(this._handle, out Channel_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the relationship of clock and data to each other. Depending on whether a mono or stereo format is to be analyzed, different modes can be selected.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:ALIGnment RISing | FALLing | CH1Hch2l | CH1Lch2h | CH1Rch2f | CH1Fch2r
        /// </summary>
        /// <param name="Alignment">
        /// This control selects the relationship of clock and data to each other.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_RISING   (0) - Rising
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_FALLING  (1) - Falling
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1H_CH2L (2) - Ch1 High,Ch2 Low
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1L_CH2H (3) - Ch1 Low,Ch2 High
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1R_CH2F (4) - Ch1 Rise,Ch2 Fall
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1F_CH2R (5) - Ch1 Fall,Ch2 Rise
        /// 
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_ALIGMENT_RISING (0)
        /// 
        /// Notes:
        /// 
        /// (1) "Rising" - In Channel Mode = Mono, the sampling of the data is done with rising clock edge.
        /// 
        /// (2) "Falling" - In Channel Mode = Mono, the sampling of the data is done with falling clock edge.
        /// 
        /// (3) "Ch1 High, Ch2 Low" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 1 lies under the High portion of the clock period, whereas channel 2 lies under the Low portion.
        /// 
        /// (4) "Ch1 Low, Ch2 High" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 2 lies under the High portion of the clock period, whereas channel 1 lies under the Low portion.
        /// 
        /// (5) "Ch1 Rise, Ch2 Fall" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 1 is taken with rising edge, channel 2 with falling edge.
        /// 
        /// (6) "Ch1 Fall, Ch2 Rise" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 2 is taken with rising edge, channel 1 with falling edge.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerAlignment(int Alignment)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerAlignment(this._handle, Alignment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the relationship of clock and data to each other. Depending on whether a mono or stereo format is to be analyzed.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:ALIGnment?
        /// </summary>
        /// <param name="Alignment">
        /// This control returns the relationship of clock and data to each other.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_RISING   (0) - Rising
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_FALLING  (1) - Falling
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1H_CH2L (2) - Ch1 High,Ch2 Low
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1L_CH2H (3) - Ch1 Low,Ch2 High
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1R_CH2F (4) - Ch1 Rise,Ch2 Fall
        /// RSUPV_ANALYZER_DIG_AUD_ALIGMENT_CH1F_CH2R (5) - Ch1 Fall,Ch2 Rise
        /// 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "Rising" - In Channel Mode = Mono, the sampling of the data is done with rising clock edge.
        /// 
        /// (2) "Falling" - In Channel Mode = Mono, the sampling of the data is done with falling clock edge.
        /// 
        /// (3) "Ch1 High, Ch2 Low" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 1 lies under the High portion of the clock period, whereas channel 2 lies under the Low portion.
        /// 
        /// (4) "Ch1 Low, Ch2 High" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge offset by 90?. Channel 2 lies under the High portion of the clock period, whereas channel 1 lies under the Low portion.
        /// 
        /// (5) "Ch1 Rise, Ch2 Fall" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 1 is taken with rising edge, channel 2 with falling edge.
        /// 
        /// (6) "Ch1 Fall, Ch2 Rise" - In Channel Mode = Stereo, the sampling of the data is done with rising and falling clock edge. Channel 2 is taken with rising edge, channel 1 with falling edge.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerAlignment(out int Alignment)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerAlignment(this._handle, out Alignment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If the Bitstream Analyzer is configured as clock master (Clock Source = Intern), this parameter defines the frequency of the output clock.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CLKFrequency
        /// </summary>
        /// <param name="Clock_Frequency">
        /// This control sets the clock frequency.
        /// 
        /// Valid Range: 512 to 12800 kHz
        /// 
        /// Default Value: 512 kHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerClockFrequency(double Clock_Frequency)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerClockFrequency(this._handle, Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the output clock.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:CLKFrequency?
        /// </summary>
        /// <param name="Clock_Frequency">
        /// This control returns the frequency of the output clock.
        /// 
        /// Valid Range: 512 to 12800 kHz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerClockFrequency(out double Clock_Frequency)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerClockFrequency(this._handle, out Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If the Bitstream Analyzer is configured as clock master (Clock Source = Intern), this parameter defines the duty cycle of the output clock.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:DTYCycle
        /// </summary>
        /// <param name="Duty_Cycle">
        /// This control defines the duty cycle of the output clock.
        /// 
        /// Valid Range: 10% to 90%
        /// 
        /// Default Value: 10 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerDutyCycle(double Duty_Cycle)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerDutyCycle(this._handle, Duty_Cycle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the duty cycle of the output clock.
        /// 
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:DTYCycle?
        /// </summary>
        /// <param name="Duty_Cycle">
        /// This control returns the duty cycle of the output clock.
        /// 
        /// Valid Range: 10% to 90%
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerDutyCycle(out double Duty_Cycle)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerDutyCycle(this._handle, out Duty_Cycle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the down-sampling factor. A filter bank is configured with the different factors depending on the defined value. 
        /// 
        /// Notes:
        /// 
        /// (1) The sampling rate of the measurement signal after filtering and decimation is calculated as follows:
        /// Fs_down = F_Clk / Dwnsmpl_Fact
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:DWNFactor M16  | M32 | M64 | M128 | M256
        /// </summary>
        /// <param name="Dwnsmpl_Fact">
        /// This control defines the down-sampling factor. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M16   (0) - 16
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M32   (1) - 32
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M64   (2) - 64
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M128  (3) - 128
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M256  (4) - 256
        /// 
        /// Default Value: RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M16 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDigBitstreamAnalyzerDownSamplingFactor(int Dwnsmpl_Fact)
        {
            int pInvokeResult = PInvoke.SetDigBitstreamAnalyzerDownSamplingFactor(this._handle, Dwnsmpl_Fact);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the down-sampling factor. A filter bank is configured with the different factors depending on the defined value.
        ///  
        /// Notes:
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:DWNFactor?
        /// </summary>
        /// <param name="Dwnsmpl_Fact">
        /// This control returns the down-sampling factor. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M16   (0) - 16
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M32   (1) - 32
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M64   (2) - 64
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M128  (3) - 128
        /// RSUPV_ANALYZER_DIG_AUD_DWNSMPL_FACTOR_M256  (4) - 256
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDigBitstreamAnalyzerDownSamplingFactor(out int Dwnsmpl_Fact)
        {
            int pInvokeResult = PInvoke.GetDigBitstreamAnalyzerDownSamplingFactor(this._handle, out Dwnsmpl_Fact);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects bandwidth that determines the upper frequency limit for the measurement signal.
        /// 
        /// Remote-control command(s):
        /// INPut:BANDwidth:MODE B22 | B40 | B80 | B250
        /// </summary>
        /// <param name="Bandwidth">
        /// This control selects frequency range.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_BWIDTH_22  (0) - 22 kHz
        /// RSUPV_ANALYZER_BWIDTH_40  (1) - 40 kHz
        /// RSUPV_ANALYZER_BWIDTH_80  (2) - 80 kHz
        /// RSUPV_ANALYZER_BWIDTH_250 (3) - 250 kHz
        /// 
        /// Default Value: RSUPV_ANALYZER_BWIDTH_22 (0)
        /// 
        /// Notes:
        /// 
        /// (1) 22 kHz: The maximum signal frequency is 22 kHz. The signal is sampled at 48 kHz.
        /// 
        /// (2) 40 kHz: TThe maximum signal frequency is 40 kHz. The signal is sampled at 96 kHz.
        /// 
        /// (3) 80 kHz: The maximum signal frequency is 80 kHz. The signal is sampled at 192 kHz.
        /// 
        /// (4) 250 kHz: The maximum signal frequency is 250 kHz. The signal is sampled at 768 kHz.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerBandwidth(int Bandwidth)
        {
            int pInvokeResult = PInvoke.SetAnalyzerBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets bandwidth that determines the upper frequency limit for the measurement signal.
        /// 
        /// Remote-control command(s):
        /// INPut:BANDwidth:MODE?
        /// </summary>
        /// <param name="Bandwidth">
        /// This control gets frequency range.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_BWIDTH_22  (0) - 22 kHz
        /// RSUPV_ANALYZER_BWIDTH_40  (1) - 40 kHz
        /// RSUPV_ANALYZER_BWIDTH_80  (2) - 80 kHz
        /// RSUPV_ANALYZER_BWIDTH_250 (3) - 250 kHz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerBandwidth(out int Bandwidth)
        {
            int pInvokeResult = PInvoke.GetAnalyzerBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the clock rate of the digital audio signal for the analyzer. The sample frequency setting is used as a reference for all audio data frequency measurements.
        /// 
        /// Note(s):
        /// 
        /// (1) Sample frequency 'Channel Status' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE F32 | F44 | F48 | F88 | F96 | F176 |  | F192 | VALue | AUTo | CHSTatus
        /// INPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control selects the clock rate of the digital audio signal for the analyzer. The sample frequency setting is used as a reference for all audio data frequency measurements.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F32    (0) - 32 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F44    (1) - 44.1 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F48    (2) - 48 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F88    (3) - 88.2 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F96    (4) - 96 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F176   (5) - 176.4 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F192   (6) - 192 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_VALUE  (7) - Value
        /// RSUPV_ANALYZER_SAMPLE_FREQ_AUTO   (8) - Auto
        /// RSUPV_ANALYZER_SAMPLE_FREQ_CHSTAT (9) - Channel Status
        /// 
        /// Default Value: RSUPV_ANALYZER_SAMPLE_FREQ_F48 (2)
        /// 
        /// Notes:
        /// 
        /// (1) Value: Variable entry for sampling rate.
        /// 
        /// </param>
        /// <param name="Sample_Frequency_Value">
        /// This control sets the sampling frequency value.
        /// 
        /// Valid Range: 30.0e3 to 200.0e3 Hz
        /// 
        /// Default Value: 48.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSampleFrequency(int Sample_Frequency, double Sample_Frequency_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSampleFrequency(this._handle, Sample_Frequency, Sample_Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the clock rate of the digital audio signal for the analyzer. The sample frequency setting is used as a reference for all audio data frequency measurements.
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE?
        /// INPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control gets the clock rate of the digital audio signal for the analyzer. The sample frequency setting is used as a reference for all audio data frequency measurements.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F32    (0) - 32 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F44    (1) - 44.1 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F48    (2) - 48 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F88    (3) - 88.2 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F96    (4) - 96 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F176   (5) - 176.4 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_F192   (6) - 192 kHz
        /// RSUPV_ANALYZER_SAMPLE_FREQ_VALUE  (7) - Value
        /// RSUPV_ANALYZER_SAMPLE_FREQ_AUTO   (8) - Auto
        /// RSUPV_ANALYZER_SAMPLE_FREQ_CHSTAT (9) - Channel Status
        /// </param>
        /// <param name="Sample_Frequency_Value">
        /// This control returns the sampling frequency value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSampleFrequency(out int Sample_Frequency, out double Sample_Frequency_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSampleFrequency(this._handle, out Sample_Frequency, out Sample_Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the clock rate of the I2S for the analyzer. The sampling frequency corresponds to the frequency of the FSYNC signal. All frequency information of generated audio data is with reference to this setting.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// (2) Sample frequency 384 kHz is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE F08 | F11 | F16 |  F22 | F32 | F44 | F48 | F88 | F96 | F176 | F192 | F384 | VALue | AUTO
        /// INPut:SAMPle:FREQuency
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control selects the clock rate of the I2S for the analyzer. The sampling frequency corresponds to the frequency of the FSYNC signal. All frequency information of generated audio data is with reference to this setting.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F08    (0) - 8 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F11    (1) - 11.025 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F16    (2) - 16 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F22    (3) - 22.05 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F32    (4) - 32 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F44    (5) - 44.1 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F48    (6) - 48 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F88    (7) - 88.2 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F96    (8) - 96 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F176   (9) - 176.4 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F192   (10) - 192 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F384   (11) - 384 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_VALUE  (12) - Value
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_AUTO   (13) - Auto
        /// 
        /// 
        /// Default Value: RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F48 (6)
        /// 
        /// Notes:
        /// 
        /// (1) Value: Variable entry for sampling rate.
        /// 
        /// </param>
        /// <param name="Sample_Frequency_Value">
        /// This control sets the sampling frequency value.
        /// 
        /// Valid Range: 6.75e3 to 410.0e3 Hz
        /// 
        /// Default Value: 48.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetI2SAnalyzerSampleFrequency(int Sample_Frequency, double Sample_Frequency_Value)
        {
            int pInvokeResult = PInvoke.SetI2SAnalyzerSampleFrequency(this._handle, Sample_Frequency, Sample_Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the clock rate of the I2S for the analyzer. The sampling frequency corresponds to the frequency of the FSYNC signal. All frequency information of generated audio data is with reference to this setting.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the R&amp;S UPV-B41 option is installed.
        /// 
        /// Remote-control command(s):
        /// INPut:SAMPle:FREQuency:MODE?
        /// INPut:SAMPle:FREQuency?
        /// </summary>
        /// <param name="Sample_Frequency">
        /// This control returns the clock rate of the I2S for the analyzer. The sampling frequency corresponds to the frequency of the FSYNC signal. All frequency information of generated audio data is with reference to this setting.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F08    (0) - 8 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F11    (1) - 11.025 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F16    (2) - 16 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F22    (3) - 22.05 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F32    (4) - 32 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F44    (5) - 44.1 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F48    (6) - 48 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F88    (7) - 88.2 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F96    (8) - 96 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F176   (9) - 176.4 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F192   (10) - 192 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_F384   (11) - 384 kHz
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_VALUE  (12) - Value
        /// RSUPV_ANALYZER_I2S_SAMPLE_FREQ_AUTO   (13) - Auto
        /// </param>
        /// <param name="Sample_Frequency_Value">
        /// This control gets the sampling frequency value.
        /// 
        /// Valid Range: 6.75e3 to 410.0e3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetI2SAnalyzerSampleFrequency(out int Sample_Frequency, out double Sample_Frequency_Value)
        {
            int pInvokeResult = PInvoke.GetI2SAnalyzerSampleFrequency(this._handle, out Sample_Frequency, out Sample_Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the analyzer reference value for impedance.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:POWer:REFerence:RESistance
        /// </summary>
        /// <param name="Ref_Imped">
        /// This control sets the reference value for impedance.
        /// 
        /// Valid Range: 100.0e-6 to 100.0e3 Ohm
        /// 
        /// Default Value: 600.0 Ohm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRefImpedance(double Ref_Imped)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRefImpedance(this._handle, Ref_Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the analyzer reference value for impedance.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:POWer:REFerence:RESistance?
        /// </summary>
        /// <param name="Ref_Imped">
        /// This control gets the reference value for impedance.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRefImpedance(out double Ref_Imped)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRefImpedance(this._handle, out Ref_Imped);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to define which analyzer conditions trigger a measurement to be started.
        /// 
        /// Remote-control command(s):
        /// TRIGger:SOURce AUTO | TIMer | TCHart | CH1Freq | CH2Freq | CH1Rapidfreq | CH2Rapidfreq | CH1Level | CH2Level | CH1Trigger | CH2Trigger | CH1Edgetrigger | CH2Edgetrigger | FREQuency | RAPidfreq | LEVel | TRIGger | EDGetrigger
        /// </summary>
        /// <param name="Start_Condition">
        /// This control selects start condition.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_START_CONDITION_AUTO (0) - Auto
        /// RSUPV_ANALYZER_START_CONDITION_TIM  (1) - Time Tick
        /// RSUPV_ANALYZER_START_CONDITION_TCH  (2) - Time Chart
        /// RSUPV_ANALYZER_START_CONDITION_CH1F (3) - Freq Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2F (4) - Freq Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1R (5) - Freq Fast Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2R (6) - Freq Fast Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1L (7) - Volt Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2L (8) - Volt Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1T (9) - Lev Trig Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2T (10) - Lev Trig Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1E (11) - Edge Trig Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2E (12) - Edge Trig Ch2
        /// RSUPV_ANALYZER_START_CONDITION_FREQ (13) - Freq
        /// RSUPV_ANALYZER_START_CONDITION_RAP  (14) - Freq Fast
        /// RSUPV_ANALYZER_START_CONDITION_LEV  (15) - Volt
        /// RSUPV_ANALYZER_START_CONDITION_TRIG (16) - Lev Trig
        /// RSUPV_ANALYZER_START_CONDITION_EDG  (17) - Edge Trig
        /// 
        /// Default Value: RSUPV_ANALYZER_START_CONDITION_AUTO (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Auto: Continuous measuring mode without trigger
        /// condition. Values are recorded in the measurement value buffer only if the frequency sweep for the selective RMS measurement or any type of generator sweep is active at the same time. Pressing the "Single" or "Start" key toggles between single and continuous measurement if no sweep is active.
        /// 
        /// (2) Time Tick: Time-controlled measurement value recording; measurement value triggering at fixed intervals. In the gap between time ticks, measurements are started, the measurement results are entered in the measurement value buffer and displayed in the measurement results panel. This start condition cannot be combined with a timetriggered generator sweep.
        /// 
        /// (3) Time Chart: Time-controlled measurement value recording; measurement value acquisition at fixed intervals. Measurement values (from the currently running continous measurement) are entered in a time chart in the timescale that can be entered under "Time". In contrast to "Time Tick", where at each tick a new (single) measurement starts and the result is only entered when the measurement ends, with "Time Chart" intermediate results can also be displayed. This is particularly desirable in the case of quasi peak measurements.
        /// 
        /// (4) Freq Ch1: 
        ///     Freq Ch2:
        ///     Freq 
        ///     Freq Fast Ch1: 
        ///     Freq Fast Ch2:
        ///     Freq Fast: Externally-controlled measurement value recording; measurement value triggering when a significant frequency changer occurs on Channel 1 or Channel 2 (external frequency sweep). The measurement results are entered in the measurement value buffer and displayed in the measurement results panel. The measured frequency is entered as an X value of the sweep. 
        /// 
        /// (5) Volt Ch1: 
        ///     Volt Ch2:
        ///     Volt: Externally-controlled measurement value recording;
        /// measurement value triggering when a significant level change occurs on Channel 1 or Channel 2 (external level sweep). The measurement results are entered in the measurement value buffer and displayed in the measurement results panel. The measured level is entered as an X value of the sweep.
        /// 
        /// (6) Lev Trig Ch1: 
        ///     Lev Trig Ch2:
        ///     Lev: Measurement value triggering due to a level
        /// detected at the analyzer input on Channel 1 or Channel 2.
        /// 
        /// (7) Edge Trig Ch1: 
        ///     Edge Trig Ch2:
        ///     Edge Trig: Measurement value triggering due to a voltage edge detected at the analyzer input on Channel 1 or Channel 2.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerStartCondition(int Start_Condition)
        {
            int pInvokeResult = PInvoke.SetAnalyzerStartCondition(this._handle, Start_Condition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the analyzer analyzer start condition.
        /// 
        /// Remote-control command(s):
        /// TRIGger:SOURce?
        /// </summary>
        /// <param name="Start_Condition">
        /// This control gets the analyzer start condition.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_START_CONDITION_AUTO (0) - Auto
        /// RSUPV_ANALYZER_START_CONDITION_TIM  (1) - Time Tick
        /// RSUPV_ANALYZER_START_CONDITION_TCH  (2) - Time Chart
        /// RSUPV_ANALYZER_START_CONDITION_CH1F (3) - Freq Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2F (4) - Freq Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1R (5) - Freq Fast Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2R (6) - Freq Fast Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1L (7) - Volt Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2L (8) - Volt Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1T (9) - Lev Trig Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2T (10) - Lev Trig Ch2
        /// RSUPV_ANALYZER_START_CONDITION_CH1E (11) - Edge Trig Ch1
        /// RSUPV_ANALYZER_START_CONDITION_CH2E (12) - Edge Trig Ch2
        /// RSUPV_ANALYZER_START_CONDITION_FREQ (13) - Freq
        /// RSUPV_ANALYZER_START_CONDITION_RAP  (14) - Freq Fast
        /// RSUPV_ANALYZER_START_CONDITION_LEV  (15) - Volt
        /// RSUPV_ANALYZER_START_CONDITION_TRIG (16) - Lev Trig
        /// RSUPV_ANALYZER_START_CONDITION_EDG  (17) - Edge Trig
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerStartCondition(out int Start_Condition)
        {
            int pInvokeResult = PInvoke.GetAnalyzerStartCondition(this._handle, out Start_Condition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the time which must elapse between the above-mentioned events and restarting of the measurement so that, for example, a DUT has sufficient time to settle. 
        /// 
        /// Remote-control command(s):
        /// TRIGger:DELay
        /// </summary>
        /// <param name="Start_Delay">
        /// This control sets delay for start condition.
        /// 
        /// Valid Range: 0.0 to 2000.0 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Notes:
        /// 
        /// (1) The delay is taken into account only with single measurements, i.e. when single measurements in the Start Cond "Auto" mode are triggered by the SINGLE key or continuation of sweep. In the case of continuous measurement, the delay is taken into account only for the first measurement after the start. The remaining measurements are carried out without any delay.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerStartDelay(double Start_Delay)
        {
            int pInvokeResult = PInvoke.SetAnalyzerStartDelay(this._handle, Start_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the time which must elapse between the above-mentioned events and restarting of the measurement so that, for example, a DUT has sufficient time to settle. 
        /// 
        /// Remote-control command(s):
        /// TRIGger:DELay?
        /// </summary>
        /// <param name="Start_Delay">
        /// This control gets delay for start condition.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerStartDelay(out double Start_Delay)
        {
            int pInvokeResult = PInvoke.GetAnalyzerStartDelay(this._handle, out Start_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is Used to activate the settling measurement for the frequency/level monitoring routine in the case of external sweeps and external level/edge triggering, and to select the "settling" method.
        /// 
        /// Note(s):
        /// 
        /// (1) Settling 'Average' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:MODE OFF | EXPonential | FLAT | AVERage
        /// </summary>
        /// <param name="Settling">
        /// This control selects the trigger settling mode.  
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_TRIG_SETTLING_OFF  (0) - Off
        /// RSUPV_ANALYZER_TRIG_SETTLING_EXP  (1) - Exponential
        /// RSUPV_ANALYZER_TRIG_SETTLING_FLAT (2) - Flat
        /// RSUPV_ANALYZER_TRIG_SETTLING_AVER (3) - Average
        /// 
        /// Default Value: RSUPV_ANALYZER_TRIG_SETTLING_FLAT (2)
        /// 
        /// Notes:
        /// 
        /// (0) OFF: The frequency/level monitoring routine is performed without the settling function. This setting offers the shortest possible response time to a detected signal change. It is not sure, however, whether the nominal trigger value (X value of the sweep display) is actually attained.
        /// 
        /// (1) Exponential: The settling function is switched on for the frequency/level monitoring routine, and the exponential method is employed. Since several measurements have to be performed, the response time to a detected signal change is extended.
        /// This setting is recommended for external level sweeps and external level/edge triggering since most DUTs exhibit an exponential level settling characteristic.
        /// 
        /// (2) Flat: The settling function is switched on for the frequency/level monitoring routine, and the flat method is employed. Since several measurements have to be performed, the response time to a detected signal change is extended.
        /// 
        /// (3) Average: The arithmetic average of a selectable number of successive results (obtained with a measurement function) is formed.    
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTriggerSettlingMode(int Settling)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTriggerSettlingMode(this._handle, Settling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the settling measurement for the frequency/level monitoring routine in the case of external sweeps and external level/edge triggering, and queries select the "settling" method.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:MODE?
        /// </summary>
        /// <param name="Settling">
        /// This control selects the trigger settling mode.  
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_TRIG_SETTLING_OFF  (0) - Off
        /// RSUPV_ANALYZER_TRIG_SETTLING_EXP  (1) - Exponential
        /// RSUPV_ANALYZER_TRIG_SETTLING_FLAT (2) - Flat
        /// RSUPV_ANALYZER_TRIG_SETTLING_AVER (3) - Average
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTriggerSettlingMode(out int Settling)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTriggerSettlingMode(this._handle, out Settling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Designates the number of measured values to be covered by the settling algorithm, i.e.
        /// it defines how many frequency or level measured values are to be used for settling.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:COUNt
        /// </summary>
        /// <param name="Samples">
        /// This control sets the trigger settling count.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTriggerSettlingCount(int Samples)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTriggerSettlingCount(this._handle, Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Designates the number of measured values to be covered by the settling algorithm, i.e.
        /// it defines how many frequency or level measured values are to be used for settling.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:COUNt?
        /// </summary>
        /// <param name="Samples">
        /// This control returns the settling trigger count.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTriggerSettlingCount(out int Samples)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTriggerSettlingCount(this._handle, out Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the settling trigger resolution.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:RESolution
        /// </summary>
        /// <param name="Resolution">
        /// This control sets settling trigger resolution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTriggerSettlingResolution(double Resolution)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTriggerSettlingResolution(this._handle, Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger settling resolution.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:RESolution?
        /// </summary>
        /// <param name="Resolution">
        /// This control returns the trigger settling resolution.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTriggerSettlingResolution(out double Resolution)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTriggerSettlingResolution(this._handle, out Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the trigger settling tolerance.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:TOLerance
        /// </summary>
        /// <param name="Tolerance">
        /// This control sets trigger settling tolerance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTriggerSettlingTolerance(double Tolerance)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTriggerSettlingTolerance(this._handle, Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger settling tolerance.
        /// 
        /// Remote-control command(s):
        /// SENSe:TRIGger:SETTling:TOLerance?
        /// </summary>
        /// <param name="Tolerance">
        /// This control returns trigger settling tolerance.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTriggerSettlingTolerance(out double Tolerance)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTriggerSettlingTolerance(this._handle, out Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Remote-control command(s):
        /// ARM:FREQuency:STARt
        /// ARM:VOLTage:STARt
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Start">
        /// This control sets the start value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 
        /// 
        /// Notes:
        /// 
        /// (1) the start value is less than the stop value, the external sweep runs as an upward sweep, in the case of edge triggering the system awaits a positive edge. Measurement values that are lower than "Start" are ignored.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of the start value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSweepStartValue(int Sweep_Control, double Start, int Units)
        {
            int pInvokeResult = PInvoke.SetExternalSweepStartValue(this._handle, Sweep_Control, Start, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the start value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Remote-control command(s):
        /// ARM:FREQuency:STARt?
        /// ARM:VOLTage:STARt?
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Start">
        /// This control gets the start value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// </param>
        /// <param name="Units">
        /// This control returns the units of the start value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSweepStartValue(int Sweep_Control, out double Start, out int Units)
        {
            int pInvokeResult = PInvoke.GetExternalSweepStartValue(this._handle, Sweep_Control, out Start, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Remote-control command(s):
        /// ARM:FREQuency:STOP
        /// ARM:VOLTage:STOP
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Stop">
        /// This control sets the stop value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 
        /// 
        /// Notes:
        /// 
        /// (1) If the stop value is less than the start value, the external sweep runs as a downward sweep; in the case of edge triggering the system awaits a negative edge. Measurement values that are lower than "Stop" are ignored. If the present start value is entered as the stop value, the sweep direction is automatically reversed and the start value is given the old stop value.
        /// 
        /// (2) In the case of single sweeps, the stop value is used to detect the end of the sweep. It should therefore be somewhat lower than the expected signal range.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of the start value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSweepStopValue(int Sweep_Control, double Stop, int Units)
        {
            int pInvokeResult = PInvoke.SetExternalSweepStopValue(this._handle, Sweep_Control, Stop, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the stop value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// 
        /// Remote-control command(s):
        /// ARM:FREQuency:STOP?
        /// ARM:VOLTage:STOP?
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Stop">
        /// This control gets the stop value for the recording interval (in the case of external sweeps) or for the trigger range (in the case of level triggering).
        /// </param>
        /// <param name="Units">
        /// This control returns the units of the stop value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSweepStopValue(int Sweep_Control, out double Stop, out int Units)
        {
            int pInvokeResult = PInvoke.GetExternalSweepStopValue(this._handle, Sweep_Control, out Stop, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the minimum level for the external frequency sweeps. If the signal is below this threshold, no triggering occurs.
        /// 
        /// Remote-control command(s):
        /// ARM:LEVel:MIN
        /// </summary>
        /// <param name="Min_Volt">
        /// This control sets the minimum level for the external frequency sweeps.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSweepMinimumLevel(double Min_Volt)
        {
            int pInvokeResult = PInvoke.SetExternalSweepMinimumLevel(this._handle, Min_Volt);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum level for the external frequency sweeps.
        /// 
        /// Remote-control command(s):
        /// ARM:LEVel:MIN?
        /// </summary>
        /// <param name="Min_Volt">
        /// This control returns the minimum level for the external frequency sweeps.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSweepMinimumLevel(out double Min_Volt)
        {
            int pInvokeResult = PInvoke.GetExternalSweepMinimumLevel(this._handle, out Min_Volt);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the relative change of frequency or level in the form of a percentage with effect from which a new measurement is triggered in the case of external sweeps. For external level sweeps the value can also be entered in dB.
        /// 
        /// Remote-control command(s):
        /// TRIGger:FREQuency:VARiation
        /// TRIGger:VOLTage:VARiation
        /// 
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Variation">
        /// This control sets the relative change of frequency or level in the form of a percentage with effect from which a new measurement is triggered in the case of external sweeps.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The variation chosen should be some 5% to 10% smaller than the expected changes, so that on the one hand triggering will occur reliably and on the other hand will not occur on intermediate values.
        /// 
        /// (2) Due to the different variation factors for upward and downward sweeps, the number
        /// of sweep points in an upward sweep - given identical values for "Start", "Stop" and "Variation" is somewhat greater than in a downward sweep.
        /// In the case of continuous sweeps, a change by at least this value in the stop to start direction (i.e. counter to the sweep direction) causes measurement value recording to restart.
        /// The lower entry value takes account of the current start and stop values and is automatically limited so that regardless of the sweep direction a maximum of 1024 measurement values can be recorded. Values of less than 0.1% cannot generally be entered. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSweepVariation(int Sweep_Control, double Variation)
        {
            int pInvokeResult = PInvoke.SetExternalSweepVariation(this._handle, Sweep_Control, Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the relative change of frequency or level in the form of a percentage with effect from which a new measurement is triggered in the case of external sweeps. For external level sweeps the value can also be entered in dB.
        /// 
        /// Remote-control command(s):
        /// TRIGger:FREQuency:VARiation?
        /// TRIGger:VOLTage:VARiation?
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control select the sweep control.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ    (0) - Frequency
        /// RSUPV_ANALYZER_VOLT    (1) - Voltage
        /// 
        /// Default Value: RSUPV_ANALYZER_FREQ  (0)
        /// </param>
        /// <param name="Variation">
        /// This control returns the relative change of frequency or level in the form of a percentage with effect from which a new measurement is triggered in the case of external sweeps.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSweepVariation(int Sweep_Control, out double Variation)
        {
            int pInvokeResult = PInvoke.GetExternalSweepVariation(this._handle, Sweep_Control, out Variation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the analyzer function.
        /// 
        /// Note(s):
        /// 
        /// (1) Functions 'Quasi Peak', 'DIM', 'Record', '1/n Octave', 'Rubb &amp; Buzz', 'PLUGin' 'PESQ', 'POLQa' and 'PEAQ' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion OFF | RMS | RMSSelect | PEAK | QPEak | DC | THD | THDNsndr | MDISt | DFD | WAF | POLarity | FFT | FILTersim | WAVeform | COHerence | RUBBuzz | PROTocol | THIRdoct | SN | NOCTave | RECord | DIM | PESQ | PEAQ | POLQa| LIPSync | PLUGin
        /// </summary>
        /// <param name="Function">
        /// This control sets the analyzer function.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNC_OFF    (0)  - Off
        /// RSUPV_ANALYZER_FUNC_RMS    (1)  - RMS
        /// RSUPV_ANALYZER_FUNC_RMSS   (2)  - RMS Selective
        /// RSUPV_ANALYZER_FUNC_PEAK   (3)  - Peak
        /// RSUPV_ANALYZER_FUNC_QPE    (4)  - Quasi Peak
        /// RSUPV_ANALYZER_FUNC_DC     (5)  - DC
        /// RSUPV_ANALYZER_FUNC_THD    (6)  - THD
        /// RSUPV_ANALYZER_FUNC_THDN   (7)  - THD+N
        /// RSUPV_ANALYZER_FUNC_MDIS   (8)  - Mod Dist
        /// RSUPV_ANALYZER_FUNC_DFD    (9)  - DFD
        /// RSUPV_ANALYZER_FUNC_WAF    (10) - WAF
        /// RSUPV_ANALYZER_FUNC_POL    (11) - Polarity
        /// RSUPV_ANALYZER_FUNC_FFT    (12) - FFT
        /// RSUPV_ANALYZER_FUNC_FILT   (13) - Filter Simulation
        /// RSUPV_ANALYZER_FUNC_WAV    (14) - Waveform
        /// RSUPV_ANALYZER_FUNC_COH    (15) - Coherence
        /// RSUPV_ANALYZER_FUNC_RUBB   (16) - Rubb &amp; Buzz
        /// RSUPV_ANALYZER_FUNC_PROT   (17) - Protocol
        /// RSUPV_ANALYZER_FUNC_THIR   (18) - Third octave
        /// RSUPV_ANALYZER_FUNC_SN     (19) - S/N
        /// RSUPV_ANALYZER_FUNC_NOCT   (20) - 1/n octave
        /// RSUPV_ANALYZER_FUNC_REC    (21) - Record
        /// RSUPV_ANALYZER_FUNC_DIM    (22) - DIM (Dynamic Intermodulation Distortion Analysis)
        /// RSUPV_ANALYZER_FUNC_PESQ   (23) - Perceptual Evaluation of Speech Quality
        /// RSUPV_ANALYZER_FUNC_PEAQ   (24) - Perceptual Evaluation of Audio Quality
        /// RSUPV_ANALYZER_FUNC_POLQA  (25) - Perceptual Objective Listening Quality
        /// RSUPV_ANALYZER_FUNC_LIPSYNC (26) - Lip Sync
        /// RSUPV_ANALYZER_FUNC_PLUGIN  (27) - Plugin
        /// 
        /// Default Value: RSUPV_ANALYZER_FUNC_RMS (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFunction(int Function)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFunction(this._handle, Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the analyzer function.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion?
        /// </summary>
        /// <param name="Function">
        /// This control gets the analyzer function.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNC_OFF    (0)  - Off
        /// RSUPV_ANALYZER_FUNC_RMS    (1)  - RMS
        /// RSUPV_ANALYZER_FUNC_RMSS   (2)  - RMS Selective
        /// RSUPV_ANALYZER_FUNC_PEAK   (3)  - Peak
        /// RSUPV_ANALYZER_FUNC_QPE    (4)  - Quasi Peak
        /// RSUPV_ANALYZER_FUNC_DC     (5)  - DC
        /// RSUPV_ANALYZER_FUNC_THD    (6)  - THD
        /// RSUPV_ANALYZER_FUNC_THDN   (7)  - THD+N
        /// RSUPV_ANALYZER_FUNC_MDIS   (8)  - Mod Dist
        /// RSUPV_ANALYZER_FUNC_DFD    (9)  - DFD
        /// RSUPV_ANALYZER_FUNC_WAF    (10) - WAF
        /// RSUPV_ANALYZER_FUNC_POL    (11) - Polarity
        /// RSUPV_ANALYZER_FUNC_FFT    (12) - FFT
        /// RSUPV_ANALYZER_FUNC_FILT   (13) - Filter Simulation
        /// RSUPV_ANALYZER_FUNC_WAV    (14) - Waveform
        /// RSUPV_ANALYZER_FUNC_COH    (15) - Coherence
        /// RSUPV_ANALYZER_FUNC_RUBB   (16) - Rubb &amp; Buzz
        /// RSUPV_ANALYZER_FUNC_PROT   (17) - Protocol
        /// RSUPV_ANALYZER_FUNC_THIR   (18) - Third octave
        /// RSUPV_ANALYZER_FUNC_SN     (19) - S/N
        /// RSUPV_ANALYZER_FUNC_NOCT   (20) - 1/n octave
        /// RSUPV_ANALYZER_FUNC_REC    (21) - Record
        /// RSUPV_ANALYZER_FUNC_DIM    (22) - DIM
        /// RSUPV_ANALYZER_FUNC_PESQ   (23) - Perceptual Evaluation of Speech Quality
        /// RSUPV_ANALYZER_FUNC_PEAQ   (24) -  Perceptual Evaluation of Audio Quality
        /// RSUPV_ANALYZER_FUNC_POLQA   (25) - Perceptual Objective Listening Quality
        /// RSUPV_ANALYZER_FUNC_LIPSYNC (26) - Lip Sync
        /// RSUPV_ANALYZER_FUNC_PLUGIN  (27) - Plugin
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFunction(out int Function)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFunction(this._handle, out Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the measurement settling.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:MODE OFF | EXPonential | FLAT | AVERage
        /// SENSe:FUNCtion:SETTling:COUNt
        /// SENSe:FUNCtion:SETTling:RESolution
        /// SENSe:FUNCtion:SETTling:TOLerance
        /// SENSe:FUNCtion:SETTling:TOUT
        /// </summary>
        /// <param name="Fnct_Settling">
        /// This control selects the settling measurement function.  
        /// 
        /// Valid Values:
        /// RSUPV_MEAS_FUNC_SETTLING_OFF  (0) - Off
        /// RSUPV_MEAS_FUNC_SETTLING_EXP  (1) - Exponential
        /// RSUPV_MEAS_FUNC_SETTLING_FLAT (2) - Flat
        /// RSUPV_MEAS_FUNC_SETTLING_AVER (3) - Average
        /// 
        /// Default Value: RSUPV_MEAS_FUNC_SETTLING_FLAT (2)
        /// 
        /// Notes:
        /// 
        /// (0) OFF: Function Settling is switched off. The measurement time is very short, since only a single measurement is performed.
        /// 
        /// (1) Exponential: Function Settling is switched on and the exponential method is employed. Several measurements have to be performed. The measurement time is, therefore, considerably longer than if Function Settling is switched off.
        /// 
        /// (2) Flat: Function Settling is switched on and the flat method is employed. All measurement samples should occur within a tolerance band of uniform width. This method, therefore, usually requires a higher number of measurements than the (softer) exponential method.
        /// 
        /// (3) Average: The arithmetic average of a selectable number of successive results (obtained with a measurement function) is formed.    
        /// </param>
        /// <param name="Samples">
        /// This control sets the settling count.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0 
        /// </param>
        /// <param name="Timeout">
        /// This control sets settling timeout.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Resolution">
        /// This control sets settling resolution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Function Settling is set to Flat or Exponential.
        /// </param>
        /// <param name="Tolerance">
        /// This control sets settling tolerance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Function Settling is set to Flat or Exponential.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMeasurementFunctionsSettling(int Fnct_Settling, int Samples, double Timeout, double Resolution, double Tolerance)
        {
            int pInvokeResult = PInvoke.ConfigureMeasurementFunctionsSettling(this._handle, Fnct_Settling, Samples, Timeout, Resolution, Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the settling measurement for results of measurement functions and to select the settling method. Results of measurement functions are valid only if the selected settling condition is fulfilled.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SETTling:MODE OFF | EXPonential | FLAT | AVERage
        /// </summary>
        /// <param name="Fnct_Settling">
        /// This control selects the settling measurement function.  
        /// 
        /// Valid Values:
        /// RSUPV_MEAS_FUNC_SETTLING_OFF  (0) - Off
        /// RSUPV_MEAS_FUNC_SETTLING_EXP  (1) - Exponential
        /// RSUPV_MEAS_FUNC_SETTLING_FLAT (2) - Flat
        /// RSUPV_MEAS_FUNC_SETTLING_AVER (3) - Average
        /// 
        /// Default Value: RSUPV_MEAS_FUNC_SETTLING_FLAT (2)
        /// 
        /// Notes:
        /// 
        /// (0) OFF: Function Settling is switched off. The measurement time is very short, since only a single measurement is performed.
        /// 
        /// (1) Exponential: Function Settling is switched on and the exponential method is employed. Several measurements have to be performed. The measurement time is, therefore, considerably longer than if Function Settling is switched off.
        /// 
        /// (2) Flat: Function Settling is switched on and the flat method is employed. All measurement samples should occur within a tolerance band of uniform width. This method, therefore, usually requires a higher number of measurements than the (softer) exponential method.
        /// 
        /// (3) Average: The arithmetic average of a selectable number of successive results (obtained with a measurement function) is formed.    
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementFunctionsSettling(int Fnct_Settling)
        {
            int pInvokeResult = PInvoke.SetMeasurementFunctionsSettling(this._handle, Fnct_Settling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the settling measurement for results of measurement functions and returns the settling method.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SETTling:MODE?
        /// </summary>
        /// <param name="Fnct_Settling">
        /// This control returns the settling measurement function. 
        /// 
        /// Valid Values:
        /// RSUPV_MEAS_FUNC_SETTLING_OFF  (0) - Off
        /// RSUPV_MEAS_FUNC_SETTLING_EXP  (1) - Exponential
        /// RSUPV_MEAS_FUNC_SETTLING_FLAT (2) - Flat
        /// RSUPV_MEAS_FUNC_SETTLING_AVER (3) - Average
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementFunctionsSettling(out int Fnct_Settling)
        {
            int pInvokeResult = PInvoke.GetMeasurementFunctionsSettling(this._handle, out Fnct_Settling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of measured values to be covered by the settling algorithm, i.e. it defines how many measured values are to be used in the settling measurement or for averaging.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SETTling:COUNt
        /// </summary>
        /// <param name="Samples">
        /// This control sets the settling count.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementFunctionSettlingCount(int Samples)
        {
            int pInvokeResult = PInvoke.SetMeasurementFunctionSettlingCount(this._handle, Samples);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the number of measured values to be covered by the settling algorithm, i.e. it defines how many measured values are to be used in the settling measurement or for averaging.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SETTling:COUNt?
        /// </summary>
        /// <param name="Settling_Count">
        /// This control returns the settling count.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementFunctionSettlingCount(out int Settling_Count)
        {
            int pInvokeResult = PInvoke.GetMeasurementFunctionSettlingCount(this._handle, out Settling_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the settling resolution.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:RESolution
        /// </summary>
        /// <param name="Resolution">
        /// This control sets settling resolution.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementFunctionSettlingResolution(double Resolution)
        {
            int pInvokeResult = PInvoke.SetMeasurementFunctionSettlingResolution(this._handle, Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the settling resolution.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:RESolution?
        /// </summary>
        /// <param name="Resolution">
        /// This control returns the settling resolution.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementFunctionSettlingResolution(out double Resolution)
        {
            int pInvokeResult = PInvoke.GetMeasurementFunctionSettlingResolution(this._handle, out Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the settling tolerance.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:TOLerance
        /// </summary>
        /// <param name="Tolerance">
        /// This control sets settling tolerance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementFunctionSettlingTolerance(double Tolerance)
        {
            int pInvokeResult = PInvoke.SetMeasurementFunctionSettlingTolerance(this._handle, Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the settling tolerance.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:TOLerance?
        /// </summary>
        /// <param name="Tolerance">
        /// This control returns settling tolerance.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementFunctionSettlingTolerance(out double Tolerance)
        {
            int pInvokeResult = PInvoke.GetMeasurementFunctionSettlingTolerance(this._handle, out Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Defines the maximum time that a settling algorithm is allowed to detect a settled result after the start of a measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:TOUT
        /// </summary>
        /// <param name="Timeout">
        /// This control sets settling timeout.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementFunctionSettlingTimeout(double Timeout)
        {
            int pInvokeResult = PInvoke.SetMeasurementFunctionSettlingTimeout(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the maximum time that a settling algorithm is allowed to detect a settled result after the start of a measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:SETTling:TOUT?
        /// </summary>
        /// <param name="Timeout">
        /// This control returns settling timeout.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementFunctionSettlingTimeout(out double Timeout)
        {
            int pInvokeResult = PInvoke.GetMeasurementFunctionSettlingTimeout(this._handle, out Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures some of the analyzer sweep parameters.
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:CONTrol OFF | ASWeep | ALISt | MSWeep | MLISt
        /// SENSe:SWEep:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// SENSe:SWEep:STARt
        /// SENSe:SWEep:STOP
        /// SENSe:SWEep:POINts
        /// SENSe:SWEep:STEP
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control activates and configures or deactivates the band-pass sweep / band-stop sweep in the analyzer sweep system.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_CTRL_OFF    (0) - Off
        /// RSUPV_ANALYZER_SWEEP_CTRL_ASW    (1) - Auto Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_ALIS   (2) - Auto List
        /// RSUPV_ANALYZER_SWEEP_CTRL_MSW    (3) - Manual Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_MLIS   (4) - Manual List
        /// 
        /// Default Value: RSUPV_ANALYZER_SWEEP_CTRL_OFF    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The band-pass sweep / band-stop sweep is deactivated; 
        /// 
        /// (2) Auto Sweep: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed automatically; the sweep axis is calculated from the start value, stop value and step size or point number.
        /// 
        /// (3) Auto List: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed automatically; the sweep axis is determined from the predefined list of sweep points (usually loaded as a file).
        /// 
        /// (4) Manual Sweep: The band-pass sweep / band-stop sweep is activated; the sweep steeping is performed manually; the sweep axis is calculated from the start value, stop value and step size or point number.
        /// 
        /// (5) Manual List: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed manually; the sweep axis is determined from the predefined list of sweep points (usually loaded as a file).
        /// </param>
        /// <param name="Spacing">
        /// This control selects the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axis. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINP  (0) - Lin Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINS  (1) - Lin Steps
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGP  (2) - Log Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGS  (3) - Log Steps
        /// 
        /// Default Value: RSUPV_ANALYZER_SWEEP_SPAC_LINP  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Lin Points: The sweep range is divided linearly by specifying a number of points (linear sweep). This number is entered in the "Points" parameter field.
        /// 
        /// (2) Lin Steps: The sweep range is divided into intervals of a specified linear step size starting at "Start" (linear sweep). This step size is entered in the "Step" parameter field.
        /// 
        /// (3) Log Points: The sweep range is divided logarithmically by specifying a number of points (logarithmic sweep). This number is entered in the "Points" parameter field.
        /// 
        /// (4) Log Steps: The sweep range is divided into intervals of a specified logarithmic step size starting at "Start" (logarithmic sweep). Each sweep point is calculated by multiplying the previous point by a constant factor. This factor is entered in the "Step" parameter field.
        /// </param>
        /// <param name="Points">
        /// This control sets the number of sweep points for the band-pass / bandstop center frequency. Only visible for activated band-pass / bandstop sweep if "Lin Points" or "Log Points" is set for "Spacing".
        /// 
        /// Valid Values: 2 to 1024
        /// 
        /// Default Value: 30
        /// 
        /// Notes:
        /// 
        /// (1) The sweep range is divided into "Points - 1" (linear or logarithmic) equidistant steps. At least 2 points (start and stop value) are required. A maximum of 1024 points can be selected.
        /// </param>
        /// <param name="Start">
        /// This control sets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If the start value is less than the stop value, an upward sweep is performed, otherwise a downward sweep will be performed. If a start value identical to the stop value is entered, the stop value is automatically loaded with the old start value. In this way, it is possible to change the sweep direction by entering just one value.
        /// </param>
        /// <param name="Start_Units">
        /// This control sets the units of Start entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <param name="Stop">
        /// This control sets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If a stop value identical to the start value is entered, the start value is automatically loaded with the old stop value.
        /// </param>
        /// <param name="Stop_Units">
        /// This control sets the units of Stop entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <param name="Step">
        /// This control sets the (linear or logarithmic) step size for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep if "Lin Steps" or "Log Steps" is set for "Spacing".
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) With linear step, the size of the step must always be entered, i.e. the numeric value is positive even if the start value is greater than the stop value. The physical unit is the same as that used when specifying "Start" and "Stop".
        /// 
        /// (2) With logarithmic step, the factor must be entered by which each sweep point is to be multiplied in order to move to the next sweep point. Swapping the start and stop value (reversal of the sweep direction) therefore produces the reciprocal value. The closer the numeric value is to 1.0, the more sweep steps will be performed.
        /// </param>
        /// <param name="Step_Units">
        /// This control sets the units of Step entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerSweep(int Sweep_Control, int Spacing, int Points, double Start, int Start_Units, double Stop, int Stop_Units, double Step, int Step_Units)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerSweep(this._handle, Sweep_Control, Spacing, Points, Start, Start_Units, Stop, Stop_Units, Step, Step_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates and configures or deactivates the band-pass sweep / band-stop sweep in the analyzer sweep system.
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:CONTrol OFF | ASWeep | ALISt | MSWeep | MLISt
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control activates and configures or deactivates the band-pass sweep / band-stop sweep in the analyzer sweep system.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_CTRL_OFF    (0) - Off
        /// RSUPV_ANALYZER_SWEEP_CTRL_ASW    (1) - Auto Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_ALIS   (2) - Auto List
        /// RSUPV_ANALYZER_SWEEP_CTRL_MSW    (3) - Manual Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_MLIS   (4) - Manual List
        /// 
        /// Default Value: RSUPV_ANALYZER_SWEEP_CTRL_OFF    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The band-pass sweep / band-stop sweep is deactivated; 
        /// 
        /// (2) Auto Sweep: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed automatically; the sweep axis is calculated from the start value, stop value and step size or point number.
        /// 
        /// (3) Auto List: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed automatically; the sweep axis is determined from the predefined list of sweep points (usually loaded as a file).
        /// 
        /// (4) Manual Sweep: The band-pass sweep / band-stop sweep is activated; the sweep steeping is performed manually; the sweep axis is calculated from the start value, stop value and step size or point number.
        /// 
        /// (5) Manual List: The band-pass sweep / band-stop sweep is activated; the sweep stepping is performed manually; the sweep axis is determined from the predefined list of sweep points (usually loaded as a file).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepControl(int Sweep_Control)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepControl(this._handle, Sweep_Control);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the band-pass sweep / band-stop sweep in the analyzer sweep system.
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:CONTrol?
        /// </summary>
        /// <param name="Sweep_Control">
        /// This control gets the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_CTRL_OFF    (0) - Off
        /// RSUPV_ANALYZER_SWEEP_CTRL_ASW    (1) - Auto Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_ALIS   (2) - Auto List
        /// RSUPV_ANALYZER_SWEEP_CTRL_MSW    (3) - Manual Sweep
        /// RSUPV_ANALYZER_SWEEP_CTRL_MLIS   (4) - Manual List
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepControl(out int Sweep_Control)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepControl(this._handle, out Sweep_Control);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axis. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:SPACing LINPoints | LINSteps | LOGPoints | LOGSteps
        /// </summary>
        /// <param name="Spacing">
        /// This control selects the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axis. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINP  (0) - Lin Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINS  (1) - Lin Steps
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGP  (2) - Log Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGS  (3) - Log Steps
        /// 
        /// Default Value: RSUPV_ANALYZER_SWEEP_SPAC_LINP  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Lin Points: The sweep range is divided linearly by specifying a number of points (linear sweep). This number is entered in the "Points" parameter field.
        /// 
        /// (2) Lin Steps: The sweep range is divided into intervals of a specified linear step size starting at "Start" (linear sweep). This step size is entered in the "Step" parameter field.
        /// 
        /// (3) Log Points: The sweep range is divided logarithmically by specifying a number of points (logarithmic sweep). This number is entered in the "Points" parameter field.
        /// 
        /// (4) Log Steps: The sweep range is divided into intervals of a specified logarithmic step size starting at "Start" (logarithmic sweep). Each sweep point is calculated by multiplying the previous point by a constant factor. This factor is entered in the "Step" parameter field.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepSpacing(int Spacing)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepSpacing(this._handle, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axis. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:SPACing?
        /// </summary>
        /// <param name="Spacing">
        /// This control gets the sweep range spacing, i.e. the way in which the sweep points are distributed on the sweep axis. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINP  (0) - Lin Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LINS  (1) - Lin Steps
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGP  (2) - Log Points
        /// RSUPV_ANALYZER_SWEEP_SPAC_LOGS  (3) - Log Steps
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepSpacing(out int Spacing)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepSpacing(this._handle, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STARt
        /// </summary>
        /// <param name="Start">
        /// This control sets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If the start value is less than the stop value, an upward sweep is performed, otherwise a downward sweep will be performed. If a start value identical to the stop value is entered, the stop value is automatically loaded with the old start value. In this way, it is possible to change the sweep direction by entering just one value.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Start entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepStart(double Start, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepStart(this._handle, Start, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the start value for the band-pass / band-stop center frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STARt?
        /// </summary>
        /// <param name="Start">
        /// This control gets the start value for the band-pass / band-stop center frequency. 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Start.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepStart(out double Start, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepStart(this._handle, out Start, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STOP
        /// </summary>
        /// <param name="Stop">
        /// This control sets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If a stop value identical to the start value is entered, the start value is automatically loaded with the old stop value.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Stop entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepStop(double Stop, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepStop(this._handle, Stop, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the stop value for the band-pass / band-stop center frequency. 
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STOP?
        /// </summary>
        /// <param name="Stop">
        /// This control gets the stop value for the band-pass / band-stop center frequency. 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Stop.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepStop(out double Stop, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepStop(this._handle, out Stop, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of sweep points for the band-pass / bandstop center frequency. Only visible for activated band-pass / bandstop sweep if "Lin Points" or "Log Points" is set for "Spacing".
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:POINts
        /// </summary>
        /// <param name="Points">
        /// This control sets the number of sweep points for the band-pass / bandstop center frequency. Only visible for activated band-pass / bandstop sweep if "Lin Points" or "Log Points" is set for "Spacing".
        /// 
        /// Valid Values: 2 to 1024
        /// 
        /// Default Value: 30
        /// 
        /// Notes:
        /// 
        /// (1) The sweep range is divided into "Points - 1" (linear or logarithmic) equidistant steps. At least 2 points (start and stop value) are required. A maximum of 1024 points can be selected.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepPoints(int Points)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepPoints(this._handle, Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the number of sweep points for the band-pass / bandstop center frequency. 
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:POINts?
        /// </summary>
        /// <param name="Points">
        /// This control gets the number of sweep points for the band-pass / bandstop center frequency. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepPoints(out int Points)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepPoints(this._handle, out Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the (linear or logarithmic) step size for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep if "Lin Steps" or "Log Steps" is set for "Spacing".
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:STEP
        /// </summary>
        /// <param name="Step">
        /// This control sets the (linear or logarithmic) step size for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep if "Lin Steps" or "Log Steps" is set for "Spacing".
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) With linear step, the size of the step must always be entered, i.e. the numeric value is positive even if the start value is greater than the stop value. The physical unit is the same as that used when specifying "Start" and "Stop".
        /// 
        /// (2) With logarithmic step, the factor must be entered by which each sweep point is to be multiplied in order to move to the next sweep point. Swapping the start and stop value (reversal of the sweep direction) therefore produces the reciprocal value. The closer the numeric value is to 1.0, the more sweep steps will be performed.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Step entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSweepSteps(double Step, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSweepSteps(this._handle, Step, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the (linear or logarithmic) step size for the band-pass / band-stop center frequency. 
        /// 
        /// Remote-control command(s):
        /// SENSe:SWEep:STEP?
        /// </summary>
        /// <param name="Step">
        /// This control gets the (linear or logarithmic) step size for the band-pass / band-stop center frequency. 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of Step.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSweepSteps(out double Step, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSweepSteps(this._handle, out Step, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement time for adapting the measurement speed to the signal shape or (with single-tone signals) to the signal frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE AFASt | AUTo | VALue | GENTrack  | FAST | SFASt | SLOW
        /// </summary>
        /// <param name="Meas_Time">
        /// This control selects the measurement time for adapting the measurement speed to the signal shape or (with single-tone signals) to the signal frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_GENT    (3) - Gen Track  
        /// RSUPV_ANALYZER_MEAS_TIME_SFAS    (4) - Fast Settling
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fast
        /// RSUPV_ANALYZER_MEAS_TIME_SLOW    (6) - Slow
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_TIME_AFAS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto Fast: Where possible, the RMS measurement is
        /// performed over entire AC periods; with high frequencies, the measurement time is increased so that the maximum algorithmic error does not exceed 1 %.
        /// With very weak, low-frequency or pure DC signals, the maximum measurement time is limited to 100 ms (corresponding to 1 period at 10 Hz).
        /// 
        /// (2) Auto: Where possible, the RMS measurement is performed over entire AC periods; with medium or high frequencies, the measurement time is increased so that the maximum algorithmic error does not exceed 0.05 %.
        /// With very weak, low-frequency or pure DC signals, the maximum measurement time is limited to 200 ms (corresponding to 2 periods at 10 Hz).
        /// 
        /// (3) Value: The RMS measurement is performed over a preset
        /// time which must be entered using a remote-control command SENSe[1]:VOLTage:APERture, or function Set Analyzer Level Meas Time Value.
        /// 
        /// (4) Gen Track: The RMS measurement is performed over (at least) 1 whole period of the generator signal; to allow this, the generator frequency is adapted to the sampling rate of the analyzer, if necessary. With high frequencies, the measurement time is increased to several periods in order to improve measurement accuracy.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasTime(int Meas_Time)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasTime(this._handle, Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the measurement time for adapting the measurement speed to the signal shape or (with single-tone signals) to the signal frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE?
        /// </summary>
        /// <param name="Meas_Time">
        /// This control gets the measurement time for adapting the measurement speed to the signal shape or (with single-tone signals) to the signal frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_GENT    (3) - Gen Track
        /// RSUPV_ANALYZER_MEAS_TIME_SFAS    (4) - Fast Settling
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fast
        /// RSUPV_ANALYZER_MEAS_TIME_SLOW    (7) - Slow
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasTime(out int Meas_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasTime(this._handle, out Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value of the measurement time.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:APERture
        /// </summary>
        /// <param name="Meas_Time_Value">
        /// This control sets the value of the measurement time.
        /// 
        /// Valid Range: 100.0e-6 to 10.0 s
        /// 
        /// Default Value: 0.00300 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasTimeValue(double Meas_Time_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasTimeValue(this._handle, Meas_Time_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the value of the measurement time.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:APERture?
        /// </summary>
        /// <param name="Meas_Time_Value">
        /// This control gets the value of the measurement time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasTimeValue(out double Meas_Time_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasTimeValue(this._handle, out Meas_Time_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the S/N sequence in order to determine the signal to noise.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SNSequence
        /// </summary>
        /// <param name="S_N_Enable">
        /// This control enable the S/N sequence in order to determine the signal to noise.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSNSequenceState(bool S_N_Enable)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSNSequenceState(this._handle, System.Convert.ToUInt16(S_N_Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the S/N state.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:SNSequence?
        /// </summary>
        /// <param name="S_N_Enable">
        /// This control returns the S/N sequence state in order to determine the signal to noise.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSNSequenceState(out bool S_N_Enable)
        {
            ushort S_N_EnableAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerSNSequenceState(this._handle, out S_N_EnableAsUShort);
            S_N_Enable = System.Convert.ToBoolean(S_N_EnableAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures analyzer peak measurement.
        /// 
        /// Notes:
        /// 
        /// (1) The Interval Time Value is valid only if Interval Time is set to Value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe PPEak | NPEak | PTOPeak | PABSolut
        /// SENSe[1]:VOLTage:INTVtime:MODE SFASt | FAST | SLOW | VALue | FIX
        /// SENSe[1]:VOLTage:INTVtime
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the measurement mode.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PPE    (0) - Pos Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_NPE    (1) - Neg Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PTOP   (2) - Peak to Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PABS   (3) - Abs Peak
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAK_MEAS_MODE_PPE    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Pos Peak: The highest positive voltage value is measured.
        /// 
        /// (2) Neg Peak: The (numerically) highest negative voltage value is measured.
        /// 
        /// (3) Peak to Peak: The difference between the highest and lowest level is measured (peak-to-peak voltage).
        /// 
        /// (4) Abs Peak: The numerically highest (positive or negative) voltage value is measured.
        /// </param>
        /// <param name="Interval_Time">
        /// This control selects the measurement interval within which the peak search is to be performed. When the interval time has expired, the peak value memory is reset and the next peak value is sought.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SFAS   (0) - Fix 50 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FAST   (1) - Fix 200 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SLOW   (2) - Fix 1000 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_VAL    (3) - Value
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FIX    (4) - Fix 3 s
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SFAS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Value: The interval time is entered using the remote-control command SENSe[1]:VOLTage:INTVtime, or function Set Analyzer Peak Meas Intv Time Value.
        /// 
        /// (2) Fix 3 s: Used only in Quasi Peak measurement.
        /// </param>
        /// <param name="Interval_Time_Value">
        /// This control sets the peak measurement interval time value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerPeakMeasurement(int Meas_Mode, int Interval_Time, double Interval_Time_Value)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerPeakMeasurement(this._handle, Meas_Mode, Interval_Time, Interval_Time_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement mode.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe PPEak | NPEak | PTOPeak | PABSolut
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the measurement mode.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PPE    (0) - Pos Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_NPE    (1) - Neg Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PTOP   (2) - Peak to Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PABS   (3) - Abs Peak
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAK_MEAS_MODE_PPE    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Pos Peak: The highest positive voltage value is measured.
        /// 
        /// (2) Neg Peak: The (numerically) highest negative voltage value is measured.
        /// 
        /// (3) Peak to Peak: The difference between the highest and lowest level is measured (peak-to-peak voltage).
        /// 
        /// (4) Abs Peak: The numerically highest (positive or negative) voltage value is measured.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPeakMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPeakMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the measurement mode.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control gets the measurement mode.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PPE    (0) - Pos Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_NPE    (1) - Neg Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PTOP   (2) - Peak to Peak
        /// RSUPV_ANALYZER_PEAK_MEAS_MODE_PABS   (3) - Abs Peak
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPeakMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPeakMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement interval within which the peak search is to be performed. When the interval time has expired, the peak value memory is reset and the next peak value is sought.
        /// 
        /// Note(s):
        /// 
        /// (1) Interval time 'Fix 3s' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:INTVtime:MODE SFASt | FAST | SLOW | VALue | FIX
        /// </summary>
        /// <param name="Interval_Time">
        /// This control selects the measurement interval within which the peak search is to be performed. When the interval time has expired, the peak value memory is reset and the next peak value is sought.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SFAS   (0) - Fix 50 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FAST   (1) - Fix 200 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SLOW   (2) - Fix 1000 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_VAL    (3) - Value
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FIX    (4) - Fix 3 s
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SFAS    (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Value: The interval time is entered using the remote-control command SENSe[1]:VOLTage:INTVtime, or function Set Analyzer Peak Meas Intv Time Value.
        /// 
        /// (2) Fix 3 s: Used only in Quasi Peak measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPeakMeasIntervalTime(int Interval_Time)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPeakMeasIntervalTime(this._handle, Interval_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the measurement interval within which the peak search is to be performed. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:INTVtime:MODE?
        /// </summary>
        /// <param name="Interval_Time">
        /// This control gets the measurement interval within which the peak search is to be performed. 
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SFAS   (0) - Fix 50 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FAST   (1) - Fix 200 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_SLOW   (2) - Fix 1000 ms
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_VAL    (3) - Value
        /// RSUPV_ANALYZER_PEAK_MEAS_INTV_TIME_FIX    (4) - Fix 3 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPeakMeasIntervalTime(out int Interval_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPeakMeasIntervalTime(this._handle, out Interval_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the peak measurement interval time value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:INTVtime
        /// </summary>
        /// <param name="Interval_Time_Value">
        /// This control sets the peak measurement interval time value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPeakMeasIntervalTimeValue(double Interval_Time_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPeakMeasIntervalTimeValue(this._handle, Interval_Time_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the peak measurement interval time value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:INTVtime?
        /// </summary>
        /// <param name="Interval_Time_Value">
        /// This control gets the peak measurement interval time value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPeakMeasIntervalTimeValue(out double Interval_Time_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPeakMeasIntervalTimeValue(this._handle, out Interval_Time_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the bandwidth and filter type (band-pass filter BP... or band-stop filter BS...).
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:BANDwidth:MODE PPCT1 | PPCT3 | POCT12 | PTOC | PFAS | PFIX | SPCT1 | SPCT3 | SOCT12 | STOC | SFAS | SFIX
        /// 
        /// </summary>
        /// <param name="Bandwidth">
        /// This control selects the bandwidth and filter type (band-pass filter BP... or band-stop filter BS...).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_BAND_PPCT1    (0) - BP 1 %
        /// RSUPV_ANALYZER_MEAS_BAND_PPCT3    (1) - BP 3 %
        /// RSUPV_ANALYZER_MEAS_BAND_POCT12   (2) - BP 1/12 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_PTOC     (3) - BP 1/3 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_PFAS     (4) - BP 1/3 Oct Fast
        /// RSUPV_ANALYZER_MEAS_BAND_PFIX     (5) - BP Fix
        /// RSUPV_ANALYZER_MEAS_BAND_SPCT1    (6) - SP 1 %
        /// RSUPV_ANALYZER_MEAS_BAND_SPCT3    (7) - SP 3 %
        /// RSUPV_ANALYZER_MEAS_BAND_SOCT12   (8) - SP 1/12 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_STOC     (9) - SP 1/3 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_SFAS     (10) - SP 1/3 Oct Fast
        /// RSUPV_ANALYZER_MEAS_BAND_SFIX     (11) - SP Fix
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_BAND_PPCT1    (0)
        /// 
        /// Notes:
        /// 
        /// (1) BP 1 % and BS 1 %: Band-pass filter / band-stop filter with the relative width of 1 % (geometrically symmetrical around the
        /// center frequency).
        /// 
        /// (2) BP 3 % and BS 3 %: Band-pass filter / band-stop filter with the relative width of 3 % (geometrically symmetrical around the
        /// center frequency).
        /// 
        /// (3) BP 1/12 Oct and BS 1/12 Oct: Band-pass filter / band-stop filter with the relative width of one twelfth octave (geometrically symmetrical around the center frequency).
        /// 
        /// (4) BP 1/3 Oct and BS 1/3 Oct: Band-pass filter / band-stop filter with the relative width of one third octave (geometrically symmetrical around the center frequency).
        /// 
        /// (5) BP 1/3 Oct Fast and BS 1/3 Oct Fast: Very fast settling third-octave filter (see above) with only 40 % attenuation.
        /// 
        /// (6) BP Fix and BS Fix: Band-pass filter / band-stop filter with selectable, arithmetically symmetrical bandwidth which must be entered in the parameter field below.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasBandwidth(int Bandwidth)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bandwidth and filter type (band-pass filter BP... or band-stop filter BS...).
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:BANDwidth:MODE?
        /// </summary>
        /// <param name="Bandwidth">
        /// This control returns the bandwidth and filter type (band-pass filter BP... or band-stop filter BS...).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_BAND_PPCT1    (0) - BP 1 %
        /// RSUPV_ANALYZER_MEAS_BAND_PPCT3    (1) - BP 3 %
        /// RSUPV_ANALYZER_MEAS_BAND_POCT12   (2) - BP 1/12 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_PTOC     (3) - BP 1/3 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_PFAS     (4) - BP 1/3 Oct Fast
        /// RSUPV_ANALYZER_MEAS_BAND_PFIX     (5) - BP Fix
        /// RSUPV_ANALYZER_MEAS_BAND_SPCT1    (6) - SP 1 %
        /// RSUPV_ANALYZER_MEAS_BAND_SPCT3    (7) - SP 3 %
        /// RSUPV_ANALYZER_MEAS_BAND_SOCT12   (8) - SP 1/12 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_STOC     (9) - SP 1/3 Oct
        /// RSUPV_ANALYZER_MEAS_BAND_SFAS     (10) - SP 1/3 Oct Fast
        /// RSUPV_ANALYZER_MEAS_BAND_SFIX     (11) - SP Fix
        /// 
        /// Notes:
        /// 
        /// (1) BP 1 % and BS 1 %: Band-pass filter / band-stop filter with the relative width of 1 % (geometrically symmetrical around the
        /// center frequency).
        /// 
        /// (2) BP 3 % and BS 3 %: Band-pass filter / band-stop filter with the relative width of 3 % (geometrically symmetrical around the
        /// center frequency).
        /// 
        /// (3) BP 1/12 Oct and BS 1/12 Oct: Band-pass filter / band-stop filter with the relative width of one twelfth octave (geometrically symmetrical around the center frequency).
        /// 
        /// (4) BP 1/3 Oct and BS 1/3 Oct: Band-pass filter / band-stop filter with the relative width of one third octave (geometrically symmetrical around the center frequency).
        /// 
        /// (5) BP 1/3 Oct Fast and BS 1/3 Oct Fast: Very fast settling third-octave filter (see above) with only 40 % attenuation.
        /// 
        /// (6) BP Fix and BS Fix: Band-pass filter / band-stop filter with selectable, arithmetically symmetrical bandwidth which must be entered in the parameter field below.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasBandwidth(out int Bandwidth)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the bandwidth.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:BANDwidth
        /// </summary>
        /// <param name="Bandwidth_Value">
        /// This control sets the bandwidth.
        /// 
        /// Valid Range: 20.0 to 16.0e3 Hz
        /// 
        /// Default Value: 100.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasBandwidthValue(double Bandwidth_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasBandwidthValue(this._handle, Bandwidth_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the bandwidth.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:BANDwidth?
        /// </summary>
        /// <param name="Bandwidth_Value">
        /// This control gets the bandwidth.
        /// 
        /// Valid Range: 20.0 to 16.0e3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasBandwidthValue(out double Bandwidth_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasBandwidthValue(this._handle, out Bandwidth_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the band-pass / band-stop center frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) Frequency modes 'Freq Ch1' and 'Freq Ch2' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:SELect FIX | GENTrack | CH1F | CH2F | AUTO | REFFrequency
        /// 
        /// </summary>
        /// <param name="Frequency_Mode">
        /// This control selects the band-pass / band-stop center frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_FMODE_FIX    (0) - Fix
        /// RSUPV_ANALYZER_MEAS_FMODE_GENT   (1) - Gen Track
        /// RSUPV_ANALYZER_MEAS_FMODE_CH1F   (2) - Freq Ch1
        /// RSUPV_ANALYZER_MEAS_FMODE_CH2F   (3) - Freq Ch2
        /// RSUPV_ANALYZER_MEAS_FMODE_AUTO   (4) - Auto Both
        /// RSUPV_ANALYZER_MEAS_FMODE_REFF   (5) - Ref Freq
        /// 
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_FMODE_FIX    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Fix: Fixed band-pass / band-stop center frequency. The center frequency must be entered using the function SetAnalyzerLevelMeasFrequencyValue.
        /// 
        /// (2) Gen Track: The band-pass / band-stop center frequency changes with the generator (nominal) frequency. The factor can be entered using the function SetAnalyzerLevelMeasFrequencyFactor.
        /// 
        /// (3) Freq Ch1: The band-pass / band-stop center frequency - in the analog analyzers, also the notch frequency if notch is activated - changes with the frequency measured in Channel 1.
        /// 
        /// (4) Freq Ch2: The band-pass / band-stop center frequency - in the analog analyzers, also the notch frequency if notch is activated - changes with the frequency measured in Channel 2.
        /// 
        /// (5) Auto Both: In each channel the bandpass/bandstop center frequency tracks the measured frequency in the channel concerned, as does the notch frequency when notch is active in analog analyzers.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasFrequencyMode(int Frequency_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasFrequencyMode(this._handle, Frequency_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the band-pass / band-stop center frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:SELect?
        /// 
        /// </summary>
        /// <param name="Frequency_Mode">
        /// This control returns the band-pass / band-stop center frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_FMODE_FIX    (0) - Fix
        /// RSUPV_ANALYZER_MEAS_FMODE_GENT   (1) - Gen Track
        /// RSUPV_ANALYZER_MEAS_FMODE_CH1F   (2) - Freq Ch1
        /// RSUPV_ANALYZER_MEAS_FMODE_CH2F   (3) - Freq Ch2
        /// RSUPV_ANALYZER_MEAS_FMODE_AUTO   (4) - Auto Both
        /// RSUPV_ANALYZER_MEAS_FMODE_REFF   (5) - Ref Freq
        /// 
        /// Notes:
        /// 
        /// (1) Fix: Fixed band-pass / band-stop center frequency. The center frequency must be entered using the function SetAnalyzerLevelMeasFrequencyValue.
        /// 
        /// (2) Gen Track: The band-pass / band-stop center frequency changes with the generator (nominal) frequency. The factor can be entered using the function SetAnalyzerLevelMeasFrequencyFactor.
        /// 
        /// (3) Freq Ch1: The band-pass / band-stop center frequency - in the analog analyzers, also the notch frequency if notch is activated - changes with the frequency measured in Channel 1.
        /// 
        /// (4) Freq Ch2: The band-pass / band-stop center frequency - in the analog analyzers, also the notch frequency if notch is activated - changes with the frequency measured in Channel 2.
        /// 
        /// (5) Auto Both: In each channel the bandpass/bandstop center frequency tracks the measured frequency in the channel concerned, as does the notch frequency when notch is active in analog analyzers.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasFrequencyMode(out int Frequency_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasFrequencyMode(this._handle, out Frequency_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency
        /// </summary>
        /// <param name="Frequency_Value">
        /// This control sets the frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 100.0 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This function will work right only when the Frequency Mode is set to Fix.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasFrequencyValue(double Frequency_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasFrequencyValue(this._handle, Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency?
        /// </summary>
        /// <param name="Frequency_Value">
        /// This control gets the frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasFrequencyValue(out double Frequency_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasFrequencyValue(this._handle, out Frequency_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency factor.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:FACTor
        /// </summary>
        /// <param name="Frequency_Factor">
        /// This control sets the frequency factor.
        /// 
        /// Valid Range: 1.0 to 20.0 MLT
        /// 
        /// Default Value: 1.0 MLT
        /// 
        /// Note(s):
        /// 
        /// (1) This function will work right only when the Frequency Mode is set to Gen Track.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasFrequencyFactor(double Frequency_Factor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasFrequencyFactor(this._handle, Frequency_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency factor.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:FACTor?
        /// </summary>
        /// <param name="Frequency_Factor">
        /// This control gets the frequency factor.
        /// 
        /// Valid Range: 1.0 to 20.0 MLT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasFrequencyFactor(out double Frequency_Factor)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasFrequencyFactor(this._handle, out Frequency_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STARt
        /// </summary>
        /// <param name="Frequency_Start">
        /// This control sets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If the start value is less than the stop value, an upward sweep is performed, otherwise a downward sweep will be performed. If a start value identical to the stop value is entered, the stop value is automatically loaded with the old start value. In this way, it is possible to change the sweep direction by entering just one value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasFrequencyStart(double Frequency_Start)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasFrequencyStart(this._handle, Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the start value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STARt?
        /// </summary>
        /// <param name="Frequency_Start">
        /// This control gets the start value for the band-pass / band-stop center frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasFrequencyStart(out double Frequency_Start)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasFrequencyStart(this._handle, out Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STOP
        /// </summary>
        /// <param name="Frequency_Stop">
        /// This control sets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The start and stop value implicitly determine the sweep direction:
        /// If a stop value identical to the start value is entered, the start value is automatically loaded with the old stop value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMeasFrequencyStop(double Frequency_Stop)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMeasFrequencyStop(this._handle, Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the stop value for the band-pass / band-stop center frequency. Only visible for activated band-pass / band-stop sweep.
        /// 
        /// Remote-control command(s):
        /// SENSe:FREQuency:STOP?
        /// </summary>
        /// <param name="Frequency_Stop">
        /// This control gets the stop value for the band-pass / band-stop center frequency. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMeasFrequencyStop(out double Frequency_Stop)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMeasFrequencyStop(this._handle, out Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement time to adapt the measurement speed to the signal shape or to the signal frequency of a superimposed AC component.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE AFASt | AUTO | VALue | FAST
        /// </summary>
        /// <param name="Meas_Time">
        /// This control selects the measurement time to adapt the measurement speed to the signal shape or to the signal frequency of a superimposed AC component.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fast
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_TIME_AFAS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto Fast: Where possible, the measurement is performed over
        /// complete periods of a superimposed AC component; with high frequencies, the measurement time is increased so that the maximum algorithmic error does not exceed 1 %.
        /// With extremely weak or AC-free signals, the upper limit for the measurement time is increased to 100 ms.
        /// 
        /// (2) Auto: Measurement is performed by FFT analysis of the
        /// measurement signal. This allows the DC component
        /// to be precisely determined even in the case of a
        /// superimposed multi-tone signal.
        /// 
        /// (3) Value: The RMS measurement is performed over a preset
        /// time which must be entered using a remote-control command SENSe[1]:VOLTage:APERture, or function Set Analyzer Level Meas Time Value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelDCMeasTime(int Meas_Time)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelDCMeasTime(this._handle, Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement time to adapt the measurement speed to the signal shape or to the signal frequency of a superimposed AC component.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE?
        /// </summary>
        /// <param name="Meas_Time">
        /// This control returns the measurement time to adapt the measurement speed to the signal shape or to the signal frequency of a superimposed AC component.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fast
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelDCMeasTime(out int Meas_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelDCMeasTime(this._handle, out Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adapts the attainable dynamic range to the quality of the DUT. Only available in the analog analyzer; the digital analyzer always performs measurements with the full dynamic range (without any reduction in speed).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DMODe FAST | PRECision
        /// </summary>
        /// <param name="Dynamic_Mode">
        /// This control adapts the attainable dynamic range to the quality of the DUT. Only available in the analog analyzer; the digital analyzer always performs measurements with the full dynamic range (without any reduction in speed).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DMODE_FAST   (0) - Fast
        /// RSUPV_ANALYZER_DMODE_PREC   (1) - Precision
        /// 
        /// Default Value: RSUPV_ANALYZER_DMODE_FAST (0)
        /// 
        /// Notes:
        /// 
        /// (1) Fast: A fast measurement with low dynamic range is performed (fast measurement).
        /// 
        /// (2) Precision: A precision measurement with maximum dynamic range but a longer measurement time is performed. Following preliminary measurement to determine the fundamental frequency and the total level, the main measurement is performed with activated analog notch filter (to reject the fundamental) and post-gain of the residual signal (to increase the dynamic range). The total measurement time is just over twice that required for the "Fast" dynamic mode.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerDynamicMode(int Dynamic_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerDynamicMode(this._handle, Dynamic_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the attainable dynamic range to the quality of the DUT. Only available in the analog analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DMODe?
        /// </summary>
        /// <param name="Dynamic_Mode">
        /// This control gets the attainable dynamic range to the quality of the DUT. Only available in the analog analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DMODE_FAST   (0) - Fast
        /// RSUPV_ANALYZER_DMODE_PREC   (1) - Precision
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerDynamicMode(out int Dynamic_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerDynamicMode(this._handle, out Dynamic_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state for the bargraph computation. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:BARGraph ON | OFF
        /// </summary>
        /// <param name="Bargraph_State">
        /// This control sets the state for the bargraph computation.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE    (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerBargraphState(bool Bargraph_State)
        {
            int pInvokeResult = PInvoke.SetAnalyzerBargraphState(this._handle, System.Convert.ToUInt16(Bargraph_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state for the bargraph computation. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:BARGraph?
        /// </summary>
        /// <param name="Bargraph_State">
        /// This control gets the state for the bargraph computation.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE    (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerBargraphState(out bool Bargraph_State)
        {
            ushort Bargraph_StateAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerBargraphState(this._handle, out Bargraph_StateAsUShort);
            Bargraph_State = System.Convert.ToBoolean(Bargraph_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Improvement of the signal-to-noise ratio.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:REFNment N1 | N2 | N4 | N8
        /// </summary>
        /// <param name="Refinement">
        /// This control sets the refinement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REFINEMENT_N1   (0) - 1
        /// RSUPV_ANALYZER_REFINEMENT_N2   (1) - 2
        /// RSUPV_ANALYZER_REFINEMENT_N4   (2) - 4
        /// RSUPV_ANALYZER_REFINEMENT_N8   (3) - 8
        /// 
        /// Default Value: RSUPV_ANALYZER_REFINEMENT_N1 (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "1" - The refinement factor 1 is suitable for the THD measurement on signals with good S/N ratio.
        /// 
        /// 
        /// (2) "2, 4, 8" - With an adverse S/N ratio and low total harmonic distortion, the noise signal can receive a higher level than the distortion product in the analysis bandwidth, thereby leading to hardly any informative measurement results. With the refinement factors 2, 4 or 8, the analysis bandwidth is reduced accordingly, thereby increasing the frequency resolution, which leads to an improvement in the S/N ratio in increments of 3 dB
        /// each.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRefinement(int Refinement)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRefinement(this._handle, Refinement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the refinement value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:REFNment?
        /// </summary>
        /// <param name="Refinement">
        /// This control returns the refinement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REFINEMENT_N1   (0) - 1
        /// RSUPV_ANALYZER_REFINEMENT_N2   (1) - 2
        /// RSUPV_ANALYZER_REFINEMENT_N4   (2) - 4
        /// RSUPV_ANALYZER_REFINEMENT_N8   (3) - 8
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "1" - The refinement factor 1 is suitable for the THD measurement on signals with good S/N ratio.
        /// 
        /// 
        /// (2) "2, 4, 8" - With an adverse S/N ratio and low total harmonic distortion, the noise signal can receive a higher level than the distortion product in the analysis bandwidth, thereby leading to hardly any informative measurement results. With the refinement factors 2, 4 or 8, the analysis bandwidth is reduced accordingly, thereby increasing the frequency resolution, which leads to an improvement in the S/N ratio in increments of 3 dB
        /// each.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRefinement(out int Refinement)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRefinement(this._handle, out Refinement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the analyzer fundamental.
        /// 
        /// Notes:
        /// 
        /// (1) This function is only valid if the Analyzer Function is set to TDH or TDH+n, SINAD.
        /// 
        /// (2) To set the Fundamental Value the Fundamental has to be set to Value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:FUNDamental:MODE AUTo | VALue | GENTrack
        /// SENSe[1]:VOLTage:FUNDamental
        /// </summary>
        /// <param name="Fundamental">
        /// This control determines the fundamental frequency. With precision measurement (in the analog analyzer only), this field is also used to determine the notch frequency of the automatically activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_FUND_AUTO   (0) - Auto
        /// RSUPV_ANALYZER_THD_FUND_VAL    (1) - Value
        /// RSUPV_ANALYZER_THD_FUND_GENT   (2) - Gen Track
        /// 
        /// Default Value: RSUPV_ANALYZER_THD_FUND_AUTO    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto: The fundamental frequency is determined (separately for each channel) by means of internal frequency measurement.
        /// Recommended when using the low-distortion generator or an external signal source.
        /// 
        /// (2) Value: Fixed fundamental frequency; the value must be
        /// entered using remote-control command SENSe[1]:VOLTage:FUNDamental, or function Set Analyzer THD, THDN Fundamental Value.
        /// 
        /// (3) Gen Track: The fundamental frequency changes with the generator (nominal) frequency. The generator frequency may change as a result of manual entries in the Generator Function panel or owing to a generator frequency sweep. Setting reliability in the case of signals with a high noise component is thus improved and measurement speed is increased.
        /// </param>
        /// <param name="Fundamental_Value">
        /// This control sets the THD fundamental value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerFundamental(int Fundamental, double Fundamental_Value)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerFundamental(this._handle, Fundamental, Fundamental_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the fundamental frequency. With precision measurement (in the analog analyzer only), this field is also used to determine the notch frequency of the automatically activated analog notch filter.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:FUNDamental:MODE AUTo | VALue | GENTrack
        /// </summary>
        /// <param name="Fundamental">
        /// This control determines the fundamental frequency. With precision measurement (in the analog analyzer only), this field is also used to determine the notch frequency of the automatically activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_FUND_AUTO   (0) - Auto
        /// RSUPV_ANALYZER_THD_FUND_VAL    (1) - Value
        /// RSUPV_ANALYZER_THD_FUND_GENT   (2) - Gen Track
        /// 
        /// Default Value: RSUPV_ANALYZER_THD_FUND_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto: The fundamental frequency is determined (separately for each channel) by means of internal frequency measurement.
        /// Recommended when using the low-distortion generator or an external signal source.
        /// 
        /// (2) Value: Fixed fundamental frequency; the value must be entered using remote-control command SENSe[1]:VOLTage:FUNDamental, or function Set Analyzer THD, THDN Fundamental Value.
        /// 
        /// (3) Gen Track: The fundamental frequency changes with the generator (nominal) frequency. The generator frequency may change as a result of manual entries in the Generator Function panel or owing to a generator frequency sweep. Setting reliability in the case of signals with a high noise component is thus improved and measurement speed is increased.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDFundamental(int Fundamental)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDFundamental(this._handle, Fundamental);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the fundamental frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:FUNDamental:MODE?
        /// </summary>
        /// <param name="Fundamental">
        /// This control gets the attainable dynamic range to the quality of the DUT. Only available in the analog analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_FUND_AUTO   (0) - Auto
        /// RSUPV_ANALYZER_THD_FUND_VAL    (1) - Value
        /// RSUPV_ANALYZER_THD_FUND_GENT   (2) - Gen Track
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDFundamental(out int Fundamental)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDFundamental(this._handle, out Fundamental);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the THD fundamental value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:FUNDamental
        /// </summary>
        /// <param name="Fundamental_Value">
        /// This control sets the THD fundamental value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDFundamentalValue(double Fundamental_Value)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDFundamentalValue(this._handle, Fundamental_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the THD fundamental value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:FUNDamental?
        /// </summary>
        /// <param name="Fundamental_Value">
        /// This control gets the THD fundamental value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDFundamentalValue(out double Fundamental_Value)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDFundamentalValue(this._handle, out Fundamental_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the analyzer THD measurement mode and THD harmonic state.
        /// 
        /// Notes:
        /// 
        /// (1) This function is only valid if the Analyzer Function is set to TDH.
        /// 
        /// (2) Harmonic and harmonic state is available only if (Level) Select di is selected under Meas Mode.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe SELectdi | DEVen | DODD | DALL | LSELectdi | LDEVen | LDODd | LDALl
        /// SENSe[1]:FUNCtion:DISTortion&lt;2..9&gt; ON | OFF
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the harmonics to be taken into consideration in the THD measurement value and selects the calculation formula for the measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_MMODE_SEL    (0) - Select di
        /// RSUPV_ANALYZER_THD_MMODE_DEV    (1) - All even di
        /// RSUPV_ANALYZER_THD_MMODE_DODD   (2) - All odd di
        /// RSUPV_ANALYZER_THD_MMODE_DALL   (3) - All di
        /// RSUPV_ANALYZER_THD_MMODE_LSEL   (4) - Level Select di
        /// RSUPV_ANALYZER_THD_MMODE_LDEV   (5) - Level even di
        /// RSUPV_ANALYZER_THD_MMODE_LDOD   (6) - Level odd di
        /// RSUPV_ANALYZER_THD_MMODE_LDAL   (7) - Level All di
        /// 
        /// Default Value: RSUPV_ANALYZER_THD_MMODE_DALL    (3)
        /// 
        /// Notes:
        /// 
        /// (1) Select di: The distortion of any given combination of harmonics d2 to d9 (root from the squared sum of the selected harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (2) All even di: The distortion of all even harmonics d2 to d8 (root from the squared sum of the even harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (3) All odd di: The distortion of all odd harmonics d3 to d9 (root from the squared sum of the odd harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (4) All di: The distortion of all harmonics d2 to d9 (root from
        /// the squared sum of all 8 harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (5) Level Select di: The distortion voltage of any given combination of harmonics d2 to d9 (root from the squared sum of
        /// the selected harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (6) Level even di: The distortion voltage of all even harmonics d2 to d8 (root from the squared sum of the even harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (7) Level odd di: The distortion voltage of all odd harmonics d3 to d9 (root from the squared sum of the even harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (8) Level All di: The distortion voltage of all harmonics d2 to d9 (root from the squared sum of all 8 harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// </param>
        /// <param name="Harmonic">
        /// This control selects the harmonic.
        /// 
        /// Valid Values: 2 to 9
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Harmonic_State">
        /// This control sets the harmonic state.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerTHD(int Meas_Mode, int Harmonic, bool Harmonic_State)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerTHD(this._handle, Meas_Mode, Harmonic, System.Convert.ToUInt16(Harmonic_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the harmonics to be taken into consideration in the THD measurement value and selects the calculation formula for the measurement value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe SELectdi | DEVen | DODD | DALL | LSELectdi | LDEVen | LDODd | LDALl
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the harmonics to be taken into consideration in the THD measurement value and selects the calculation formula for the measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_MMODE_SEL    (0) - Select di
        /// RSUPV_ANALYZER_THD_MMODE_DEV    (1) - All even di
        /// RSUPV_ANALYZER_THD_MMODE_DODD   (2) - All odd di
        /// RSUPV_ANALYZER_THD_MMODE_DALL   (3) - All di
        /// RSUPV_ANALYZER_THD_MMODE_LSEL   (4) - Level Select di
        /// RSUPV_ANALYZER_THD_MMODE_LDEV   (5) - Level even di
        /// RSUPV_ANALYZER_THD_MMODE_LDOD   (6) - Level odd di
        /// RSUPV_ANALYZER_THD_MMODE_LDAL   (7) - Level All di
        /// 
        /// Default Value: RSUPV_ANALYZER_THD_MMODE_DALL    (3)
        /// 
        /// Notes:
        /// 
        /// (1) Select di: The distortion of any given combination of harmonics d2 to d9 (root from the squared sum of the selected harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (2) All even di: The distortion of all even harmonics d2 to d8 (root from the squared sum of the even harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (3) All odd di: The distortion of all odd harmonics d3 to d9 (root from the squared sum of the odd harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (4) All di: The distortion of all harmonics d2 to d9 (root from
        /// the squared sum of all 8 harmonics) is measured referenced to the total RMS. The measurement value can be displayed in % as well as in dB.
        /// 
        /// (5) Level Select di: The distortion voltage of any given combination of harmonics d2 to d9 (root from the squared sum of
        /// the selected harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (6) Level even di: The distortion voltage of all even harmonics d2 to d8 (root from the squared sum of the even harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (7) Level odd di: The distortion voltage of all odd harmonics d3 to d9 (root from the squared sum of the even harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (8) Level All di: The distortion voltage of all harmonics d2 to d9 (root from the squared sum of all 8 harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the harmonics to be taken into consideration in the THD measurement value and the calculation formula for the measurement value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control gets the harmonics to be taken into consideration in the THD measurement value and the calculation formula for the measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THD_MMODE_SEL    (0) - Select di
        /// RSUPV_ANALYZER_THD_MMODE_DEV    (1) - All even di
        /// RSUPV_ANALYZER_THD_MMODE_DODD   (2) - All odd di
        /// RSUPV_ANALYZER_THD_MMODE_DALL   (3) - All di
        /// RSUPV_ANALYZER_THD_MMODE_LSEL   (4) - Level Select di
        /// RSUPV_ANALYZER_THD_MMODE_LDEV   (5) - Level even di
        /// RSUPV_ANALYZER_THD_MMODE_LDOD   (6) - Level odd di
        /// RSUPV_ANALYZER_THD_MMODE_LDAL   (7) - Level All di
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the desired harmonics; only available if "(Level) Select di" is selected under "Meas Mode".
        /// 
        /// Notes:
        /// 
        /// (1) Harmonic and harmonic state is available only if (Level) Select di is selected under Meas Mode by the Set Analyzer THD Meas Mode function.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DISTortion&lt;2..9&gt; ON | OFF
        /// </summary>
        /// <param name="Harmonic">
        /// This control selects the harmonic.
        /// 
        /// Valid Values: 2 to 9
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Harmonic_State">
        /// This control sets the harmonic state.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDHarmonicState(int Harmonic, bool Harmonic_State)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDHarmonicState(this._handle, Harmonic, System.Convert.ToUInt16(Harmonic_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the desired harmonics; only available if "(Level) Select di" is selected under "Meas Mode".
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DISTortion&lt;2..9&gt;?
        /// </summary>
        /// <param name="Harmonic">
        /// This control selects the harmonic.
        /// 
        /// Valid Values: 2 to 9
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Harmonic_State">
        /// This control gets the harmonic state.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDHarmonicState(int Harmonic, out bool Harmonic_State)
        {
            ushort Harmonic_StateAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerTHDHarmonicState(this._handle, Harmonic, out Harmonic_StateAsUShort);
            Harmonic_State = System.Convert.ToBoolean(Harmonic_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the THD+N measurement method and the calculation formula for the measurement value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe THDN | SNDRatio | NOISe | LTHDn | LNOIse
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects the harmonics to be taken into consideration in the THD measurement value and selects the calculation formula for the measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_MMODE_THDN   (0) - THD+N
        /// RSUPV_ANALYZER_THDN_MMODE_SNDR   (1) - SINAD
        /// RSUPV_ANALYZER_THDN_MMODE_NOIS   (2) - Noise
        /// RSUPV_ANALYZER_THDN_MMODE_LTHD   (3) - Level THD+N
        /// RSUPV_ANALYZER_THDN_MMODE_LNO    (4) - Level Noise
        /// 
        /// Default Value: RSUPV_ANALYZER_THDN_MMODE_THDN    (0)
        /// 
        /// Notes:
        /// 
        /// (1) THD+N: The total distortion (broadband noise and harmonics, referenced to the total RMS) is measured. The total RMS is band-limited to "Frq Lim Upp". The measurement value can be displayed in % as well as in dB.
        /// 
        /// (2) SINAD: Measurement method similar to THD+N, but the result is displayed as a positive dB value, i.e. the total RMS is referenced to the residual signal (overall spectrum without fundamental).
        /// 
        /// (3) Noise: The noise factor (broadband noise without harmonics, referenced to the total RMS) is measured. The total RMS is band-limited to "Frq Lim Upp". The measurement value can be displayed in % as well as in dB.
        /// 
        /// (4) Level THD+N: The total distortion voltage (comprising of broadband noise and the harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// 
        /// (5) Level Noise: The noise voltage (broadband noise without the harmonics) is measured. The measurement value is displayed in voltage units (volts or FS).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the THD+N measurement method and the calculation formula for the measurement value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control gets the harmonics to be taken into consideration in the THD measurement value and selects the calculation formula for the measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_MMODE_THDN   (0) - THD+N
        /// RSUPV_ANALYZER_THDN_MMODE_SNDR   (1) - SINAD
        /// RSUPV_ANALYZER_THDN_MMODE_NOIS   (2) - Noise
        /// RSUPV_ANALYZER_THDN_MMODE_LTHD   (3) - Level THD+N
        /// RSUPV_ANALYZER_THDN_MMODE_LNO    (4) - Level Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDNMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the fundamental rejection. Only available in "Dynamic Mode Fast" or in the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:THDN:REJection NARRow | WIDE
        /// </summary>
        /// <param name="Rejection">
        /// This control selects the fundamental rejection. Only available in "Dynamic Mode Fast" or in the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_REJ_NARR   (0) - Narrow
        /// RSUPV_ANALYZER_THDN_REJ_WIDE   (1) - Wide
        /// 
        /// Default Value: RSUPV_ANALYZER_THDN_REJ_NARR    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Narrow: The fundamental is suppressed extremely narrowly.
        /// As a result, it is also possible to detect noise components which are immediately next to the carrier.
        /// 
        /// (2) Wide:  A digital notch filter with properties identical to those previously implemented in analog measuring instruments is used to reject the fundamental. The broader filtering range produces slightly better measurement values since noise components close to the carrier are also suppressed.
        /// Recommended if the measurement results are to be comparable to those of analog measuring instruments.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNRejection(int Rejection)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNRejection(this._handle, Rejection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the fundamental rejection. Only available in "Dynamic Mode Fast" or in the digital analyzer.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:THDN:REJection?
        /// </summary>
        /// <param name="Rejection">
        /// This control gets the fundamental rejection. Only available in "Dynamic Mode Fast" or in the digital analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_REJ_NARR   (0) - Narrow
        /// RSUPV_ANALYZER_THDN_REJ_WIDE   (1) - Wide
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNRejection(out int Rejection)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDNRejection(this._handle, out Rejection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the rejection bandwidth by implicitly entering the initial FFT value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE WIDE | MEDium | NARRow
        /// </summary>
        /// <param name="Reject_Bandwidth">
        /// This control selects the rejection bandwidth by implicitly entering the initial FFT value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_REJECTBW_WIDE   (0) - 1 kHz
        /// RSUPV_ANALYZER_THDN_REJECTBW_MED    (1) - 240 Hz
        /// RSUPV_ANALYZER_THDN_REJECTBW_NARR   (2) - 60 Hz
        /// 
        /// Default Value: RSUPV_ANALYZER_THDN_REJECTBW_WIDE    (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1 kHz: The rejection bandwidth is 1 kHz, i.e. 500 Hz below
        /// and above the fundamental. The initial FFT value is very small (e.g. 1 k at 22 kHz analog bandwidth and 48 kHz sampling
        /// rate) and the measurement time is very short (especially at high frequencies). Non-harmonic signal components close to the
        /// fundamental are not measured. Recommended for fast measurement of the harmonics.
        /// 
        /// (2) 240 Hz: The rejection bandwidth is 240 Hz, i.e. 120 Hz below and above the fundamental. The initial FFT value is at least 4 k. Compromise between measurement time and loss of sideband energy.
        /// 
        /// (3) 60 Hz: The rejection bandwidth is 60 Hz, i.e. only 30 Hz below and above the fundamental. The initial FFT value is not below 16 k. Recommended for measuring signal components close to the fundamental and especially for noise measurements as this bandwidth ensures that the fundamentals and harmonics are suppressed as narrowly as possible.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNRejectBandwidth(int Reject_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNRejectBandwidth(this._handle, Reject_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the rejection bandwidth by implicitly entering the initial FFT value.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE?
        /// </summary>
        /// <param name="Reject_Bandwidth">
        /// This control gets the rejection bandwidth by implicitly entering the initial FFT value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_THDN_REJECTBW_WIDE   (0) - 1 kHz
        /// RSUPV_ANALYZER_THDN_REJECTBW_MED    (1) - 240 Hz
        /// RSUPV_ANALYZER_THDN_REJECTBW_NARE   (2) - 60 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNRejectBandwidth(out int Reject_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDNRejectBandwidth(this._handle, out Reject_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates an equalization table which contains frequency information and the associated voltage gain factors. This table can be used to, for example, equalize the frequency response of a transmission path so that the measurement point can be transformed to a different reference point.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:EQUalize OFF | ON
        /// </summary>
        /// <param name="Equalizer">
        /// This control activates an equalization table which contains frequency information and the associated voltage gain factors. 
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNEqualizer(bool Equalizer)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNEqualizer(this._handle, System.Convert.ToUInt16(Equalizer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets an equalization table which contains frequency information and the associated voltage gain factors. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:EQUalize?
        /// </summary>
        /// <param name="Equalizer">
        /// This control gets an equalization table which contains frequency information and the associated voltage gain factors. 
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNEqualizer(out bool Equalizer)
        {
            ushort EqualizerAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerTHDNEqualizer(this._handle, out EqualizerAsUShort);
            Equalizer = System.Convert.ToBoolean(EqualizerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the equalization file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:IEQualize 'filename'
        /// </summary>
        /// <param name="Equal_File">
        /// This control selects the equalization file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNEqualizerFile(string Equal_File)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNEqualizerFile(this._handle, Equal_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the lower band limit for calculating the distortion voltage; this limit does not affect calculation of the total RMS.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:LOWer
        /// </summary>
        /// <param name="Freq_Lim_Low">
        /// This control sets the lower band limit for calculating the distortion voltage; this limit does not affect calculation of the total RMS.
        /// 
        /// Valid Values: 10.0 to 21.9331e+3 Hz
        /// 
        /// Default Value: 10.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNFrequencyLimLow(double Freq_Lim_Low)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNFrequencyLimLow(this._handle, Freq_Lim_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the lower band limit for calculating the distortion voltage; this limit does not affect calculation of the total RMS.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:LOWer?
        /// </summary>
        /// <param name="Freq_Lim_Low">
        /// This control gets the lower band limit for calculating the distortion voltage; this limit does not affect calculation of the total RMS.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNFrequencyLimLow(out double Freq_Lim_Low)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDNFrequencyLimLow(this._handle, out Freq_Lim_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the upper band limit for calculating the distortion voltage and the total RMS.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:UPPer
        /// </summary>
        /// <param name="Freq_Lim_Upp">
        /// This control sets the upper band limit for calculating the distortion voltage and the total RMS.
        /// 
        /// Valid Values: 18.7891 to 22.5e+3 Hz
        /// 
        /// Default Value: 21.0e+3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerTHDNFrequencyLimUpp(double Freq_Lim_Upp)
        {
            int pInvokeResult = PInvoke.SetAnalyzerTHDNFrequencyLimUpp(this._handle, Freq_Lim_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the upper band limit for calculating the distortion voltage and the total RMS.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:UPPer?
        /// </summary>
        /// <param name="Freq_Lim_Upp">
        /// This control gets the upper band limit for calculating the distortion voltage and the total RMS.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerTHDNFrequencyLimUpp(out double Freq_Lim_Upp)
        {
            int pInvokeResult = PInvoke.GetAnalyzerTHDNFrequencyLimUpp(this._handle, out Freq_Lim_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the order of the intermodulation products and the measurement standard.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe D2_268 | D3_268 | D2_118 | D3_118
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects the order of the intermodulation products and the measurement standard.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DFD_MMODE_D2_268   (0) - d2 (IEC 268)
        /// RSUPV_ANALYZER_DFD_MMODE_D3_268   (1) - d3 (IEC 268)
        /// RSUPV_ANALYZER_DFD_MMODE_D2_118   (2) - d2 (IEC 118)
        /// RSUPV_ANALYZER_DFD_MMODE_D3_118   (3) - d3 (IEC 118)
        /// 
        /// Default Value: RSUPV_ANALYZER_DFD_MMODE_D2_268    (0)
        /// 
        /// Notes:
        /// 
        /// (1) d2 (IEC 268): Measurement of the 2nd order intermodulation product referenced to double the upper frequency level (to IEC 60268).
        /// 
        /// (2) d3 (IEC 268): Measurement of the 3rd order intermodulation products referenced to double the upper frequency level (to IEC 60268).
        /// 
        /// (3) d2 (IEC 118): Measurement of the 2nd order intermodulation product referenced to the undoubled upper frequency level (to IEC 60118).
        /// 
        /// (4) d3 (IEC 118): Measurement of the lower 3rd order intermodulation product referenced to the undoubled upper frequency level (to IEC 60118).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerDFDMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerDFDMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the order of the intermodulation products and the measurement standard.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control gets the order of the intermodulation products and the measurement standard.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_DFD_MMODE_D2_268   (0) - d2 (IEC 268)
        /// RSUPV_ANALYZER_DFD_MMODE_D3_268   (1) - d3 (IEC 268)
        /// RSUPV_ANALYZER_DFD_MMODE_D2_118   (2) - d2 (IEC 118)
        /// RSUPV_ANALYZER_DFD_MMODE_D3_118   (3) - d3 (IEC 118)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerDFDMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerDFDMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates a precorrector table for the FFT bins.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:EQUalize OFF | ON
        /// </summary>
        /// <param name="Equalizer">
        /// This control activates/deactivates the precorrector table for the FFT bins. 
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTEqualizer(bool Equalizer)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTEqualizer(this._handle, System.Convert.ToUInt16(Equalizer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets an equalization table which contains frequency information and the associated voltage gain factors. 
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:VOLTage:EQUalize?
        /// </summary>
        /// <param name="Equalizer">
        /// This control gets an equalization table which contains frequency information and the associated voltage gain factors. 
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTEqualizer(out bool Equalizer)
        {
            ushort EqualizerAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFFTEqualizer(this._handle, out EqualizerAsUShort);
            Equalizer = System.Convert.ToBoolean(EqualizerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the equalization file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:IEQualize 'filename'
        /// </summary>
        /// <param name="Equal_File">
        /// This control selects the equalization file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTEqualizerFile(string Equal_File)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTEqualizerFile(this._handle, Equal_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the frequency limit settings.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit
        /// SENSe[1]:FREQuency:LIMit:LOWer
        /// SENSe[1]:FREQuency:LIMit:UPPer
        /// </summary>
        /// <param name="Limit_Enable">
        /// This control activates/deactivates the frequency limit.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Freq_Lim_Low">
        /// This control sets the lower band limit.
        /// 
        /// Valid Values: 0.0 to 22.5e+3 Hz
        /// 
        /// Default Value: 20.0 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Limit Enable is set to ON.
        /// </param>
        /// <param name="Freq_Lim_Upp">
        /// This control sets the upper band limit.
        /// 
        /// Valid Values: 20.0 to 22.5e+3 Hz
        /// 
        /// Default Value: 22.5e+3 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Limit Enable is set to ON.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerFFTFrequencyLimit(bool Limit_Enable, double Freq_Lim_Low, double Freq_Lim_Upp)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerFFTFrequencyLimit(this._handle, System.Convert.ToUInt16(Limit_Enable), Freq_Lim_Low, Freq_Lim_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the frequency limit.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FREQuency:LIMit
        /// </summary>
        /// <param name="Limit_Enable">
        /// This control activates/deactivates the frequency limit.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTFrequencyLimitState(bool Limit_Enable)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTFrequencyLimitState(this._handle, System.Convert.ToUInt16(Limit_Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of frequency limit.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FREQuency:LIMit?
        /// </summary>
        /// <param name="Limit_Enable">
        /// This control returns the state of the frequency limit.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTFrequencyLimitState(out bool Limit_Enable)
        {
            ushort Limit_EnableAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFFTFrequencyLimitState(this._handle, out Limit_EnableAsUShort);
            Limit_Enable = System.Convert.ToBoolean(Limit_EnableAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the lower band limit.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:LOWer
        /// </summary>
        /// <param name="Freq_Lim_Low">
        /// This control sets the lower band limit.
        /// 
        /// Valid Values: 0.0 to 22.5e+3 Hz
        /// 
        /// Default Value: 20.0 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Limit Enable is set to ON.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTFrequencyLimitLow(double Freq_Lim_Low)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTFrequencyLimitLow(this._handle, Freq_Lim_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the lower band limit.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:LOWer
        /// </summary>
        /// <param name="Freq_Lim_Low">
        /// This control gets the lower band limit.
        /// 
        /// Valid Values: 0.0 to 22.5e+3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTFrequencyLimitLow(out double Freq_Lim_Low)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTFrequencyLimitLow(this._handle, out Freq_Lim_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the upper band limit.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:UPPer
        /// </summary>
        /// <param name="Freq_Lim_Upp">
        /// This control sets the upper band limit.
        /// 
        /// Valid Values: 20.0 to 22.5e+3 Hz
        /// 
        /// Default Value: 22.5e+3 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available when Limit Enable is set to ON.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTFrequencyLimitUpp(double Freq_Lim_Upp)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTFrequencyLimitUpp(this._handle, Freq_Lim_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the upper band limit.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FREQuency:LIMit:UPPer?
        /// </summary>
        /// <param name="Freq_Lim_Upp">
        /// This control gets the upper band limit.
        /// 
        /// Valid Values: 18.7891 to 22.5e+3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTFrequencyLimitUpp(out double Freq_Lim_Upp)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTFrequencyLimitUpp(this._handle, out Freq_Lim_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the size of the Function FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:SIZE S512 | S1K | S2K | S4K | S8K | S16K | S32K | S64K | S128K | S256K
        /// </summary>
        /// <param name="FFT_Size">
        /// This function sets the size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_SIZE_S512   (0) - 0.5 k
        /// RSUPV_ANALYZER_FFT_SIZE_S1K    (1) - 1 k
        /// RSUPV_ANALYZER_FFT_SIZE_S2K    (2) - 2 k
        /// RSUPV_ANALYZER_FFT_SIZE_S4K    (3) - 4 k
        /// RSUPV_ANALYZER_FFT_SIZE_S8K    (4) - 8 k
        /// RSUPV_ANALYZER_FFT_SIZE_S16K   (5) - 16 k
        /// RSUPV_ANALYZER_FFT_SIZE_S32K   (6) - 32 k
        /// RSUPV_ANALYZER_FFT_SIZE_S64K   (7) - 64 k
        /// RSUPV_ANALYZER_FFT_SIZE_S128K  (8) - 128 k
        /// RSUPV_ANALYZER_FFT_SIZE_S256K  (9) - 256 k
        /// 
        /// Default Value: RSUPV_ANALYZER_FFT_SIZE_S8K    (4)
        /// 
        /// Notes:
        /// 
        /// (1) The measurement time also doubles with each increase in FFT size. Unnecessarily high FFT sizes should be avoided in order to reduce measurement times.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTSize(int FFT_Size)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTSize(this._handle, FFT_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the size of the Function FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:SIZE?
        /// </summary>
        /// <param name="FFT_Size">
        /// This function gets the size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_SIZE_S512   (0) - 0.5 k
        /// RSUPV_ANALYZER_FFT_SIZE_S1K    (1) - 1 k
        /// RSUPV_ANALYZER_FFT_SIZE_S2K    (2) - 2 k
        /// RSUPV_ANALYZER_FFT_SIZE_S4K    (3) - 4 k
        /// RSUPV_ANALYZER_FFT_SIZE_S8K    (4) - 8 k
        /// RSUPV_ANALYZER_FFT_SIZE_S16K   (5) - 16 k
        /// RSUPV_ANALYZER_FFT_SIZE_S32K   (6) - 32 k
        /// RSUPV_ANALYZER_FFT_SIZE_S64K   (7) - 64 k
        /// RSUPV_ANALYZER_FFT_SIZE_S128K  (8) - 128 k
        /// RSUPV_ANALYZER_FFT_SIZE_S256K  (9) - 256 k
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTSize(out int FFT_Size)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTSize(this._handle, out FFT_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the max size of the Function FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe:MAX:FFT:SIZE S512 | S1K | S2K | S4K | S8K | S16K | S32K | S64K | S128K | S256K
        /// </summary>
        /// <param name="FFT_Size">
        /// This function sets the max size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_SIZE_S512   (0) - 0.5 k
        /// RSUPV_ANALYZER_FFT_SIZE_S1K    (1) - 1 k
        /// RSUPV_ANALYZER_FFT_SIZE_S2K    (2) - 2 k
        /// RSUPV_ANALYZER_FFT_SIZE_S4K    (3) - 4 k
        /// RSUPV_ANALYZER_FFT_SIZE_S8K    (4) - 8 k
        /// RSUPV_ANALYZER_FFT_SIZE_S16K   (5) - 16 k
        /// RSUPV_ANALYZER_FFT_SIZE_S32K   (6) - 32 k
        /// RSUPV_ANALYZER_FFT_SIZE_S64K   (7) - 64 k
        /// RSUPV_ANALYZER_FFT_SIZE_S128K  (8) - 128 k
        /// RSUPV_ANALYZER_FFT_SIZE_S256K  (9) - 256 k
        /// 
        /// Default Value: RSUPV_ANALYZER_FFT_SIZE_S8K    (4)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTMaxSize(int FFT_Size)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTMaxSize(this._handle, FFT_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the max size of the Function FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe:MAX:FFT:SIZE?
        /// </summary>
        /// <param name="FFT_Size">
        /// This function gets the max size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_SIZE_S512   (0) - 0.5 k
        /// RSUPV_ANALYZER_FFT_SIZE_S1K    (1) - 1 k
        /// RSUPV_ANALYZER_FFT_SIZE_S2K    (2) - 2 k
        /// RSUPV_ANALYZER_FFT_SIZE_S4K    (3) - 4 k
        /// RSUPV_ANALYZER_FFT_SIZE_S8K    (4) - 8 k
        /// RSUPV_ANALYZER_FFT_SIZE_S16K   (5) - 16 k
        /// RSUPV_ANALYZER_FFT_SIZE_S32K   (6) - 32 k
        /// RSUPV_ANALYZER_FFT_SIZE_S64K   (7) - 64 k
        /// RSUPV_ANALYZER_FFT_SIZE_S128K  (8) - 128 k
        /// RSUPV_ANALYZER_FFT_SIZE_S256K  (9) - 256 k
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTMaxSize(out int FFT_Size)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTMaxSize(this._handle, out FFT_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the frequency resolution.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:RESolution?
        /// </summary>
        /// <param name="Resolution">
        /// This indicator displays the frequency resolution.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTResolution(out double Resolution)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTResolution(this._handle, out Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the integration time.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:MTIMe?
        /// </summary>
        /// <param name="Meas_Time">
        /// This indicator displays the integration time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTMeasurementTime(out double Meas_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTMeasurementTime(this._handle, out Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the window function.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:WINDow HANNing | RECTangular | BLACkman_harris | RIF1 | RIF2 | RIF3 | HAMMing | FLATtop
        /// </summary>
        /// <param name="Window">
        /// This function sets the size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_WIND_HANN   (0) - Hann
        /// RSUPV_ANALYZER_FFT_WIND_RECT   (1) - Rectangular
        /// RSUPV_ANALYZER_FFT_WIND_BLAC   (2) - Blackman Harris
        /// RSUPV_ANALYZER_FFT_WIND_RIF1   (3) - Rife Vincent 1
        /// RSUPV_ANALYZER_FFT_WIND_RIF2   (4) - Rife Vincent 2
        /// RSUPV_ANALYZER_FFT_WIND_RIF3   (5) - Rife Vincent 3
        /// RSUPV_ANALYZER_FFT_WIND_HAMM   (6) - Hamming
        /// RSUPV_ANALYZER_FFT_WIND_FLAT   (7) - Flat Top
        /// 
        /// Default Value: RSUPV_ANALYZER_FFT_WIND_HANN (0)
        /// 
        /// Notes:
        /// 
        /// (1) Hann: This window combines selectivity with good leakage suppression in the "far-off range " but has a relatively wide bell-shaped curve around the signal lines. Recommended application: Standard window.
        /// 
        /// (2) Rectangular: Window function deactivated (by using a rectangular window with a constant weighting of 1). If the signal fits in the section for the FFT exactly with an integer multiple of periods, there is no discontinuity at the section boundaries. A window is then not required and the maximum frequency resolution is possible. This feature may be of advantage when using a special generator signal ("FFT noise") as it allows fast measurement of frequency responses at specific frequencies. (see Noise, Fast Frequency Response Measurement)
        /// Recommended application: Only suitable for special signals.
        /// 
        /// (3) Blackman Harris: Only for Function FFT. The slope of the bell-shaped curve up to approx. 80 dB is very steep; however, this window has considerable "leakage" for values under 80 dB.
        /// 
        /// (4) Rife Vincent 1,
        ///     Rife Vincent 2,
        ///     Rife Vincent 3: The suppression of far-off interference is very good for all 3 windows. The width of the bell-shaped curve at the bottom of the individual lines drops and the width at the top increases as the Rife Vincent number increases. It is therefore possible to set various compromises between frequency resolution and the suppression of adjacent lines. Recommended application: For precise frequency determination.
        /// 
        /// (7) Hamming: This window does not provide any significant advantages; it was implemented simply to complete the range.
        /// 
        /// (8) Flat Top: Only for Function FFT. Here, the region around the carrier is deliberately distorted to such an extent that at least two adjacent lines (in the case of excitation with one sinewave line only) always have roughly the same magnitude.
        /// This allows the amplitude to be read off very precisely from the graph. In contrast, the frequency selectivity is rather poor. Recommended application: For precise level determination.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTWindow(int Window)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTWindow(this._handle, Window);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the window function.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:WINDow?
        /// </summary>
        /// <param name="Window">
        /// This function gets the size of the Function FFT.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_WIND_HANN   (0) - Hann
        /// RSUPV_ANALYZER_FFT_WIND_RECT   (1) - Rectangular
        /// RSUPV_ANALYZER_FFT_WIND_BLAC   (2) - Blackman Harris
        /// RSUPV_ANALYZER_FFT_WIND_RIF1   (3) - Rife Vincent 1
        /// RSUPV_ANALYZER_FFT_WIND_RIF2   (4) - Rife Vincent 2
        /// RSUPV_ANALYZER_FFT_WIND_RIF3   (5) - Rife Vincent 3
        /// RSUPV_ANALYZER_FFT_WIND_HAMM   (6) - Hamming
        /// RSUPV_ANALYZER_FFT_WIND_FLAT   (7) - Flat Top
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTWindow(out int Window)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTWindow(this._handle, out Window);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the FFT Monitor.
        /// 
        /// Remote-control command(s):
        /// SENSe5:FUNCtion OFF | ON
        /// </summary>
        /// <param name="FFT_Monitor">
        /// This control activates/deactivates the FFT Monitor.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTMonitorState(bool FFT_Monitor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTMonitorState(this._handle, System.Convert.ToUInt16(FFT_Monitor));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the FFT Monitor state.
        /// 
        /// Remote-control command(s):
        /// SENSe5:FUNCtion?
        /// </summary>
        /// <param name="FFT_Monitor">
        /// This control gets the FFT Monitor state.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTMonitorState(out bool FFT_Monitor)
        {
            ushort FFT_MonitorAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFFTMonitorState(this._handle, out FFT_MonitorAsUShort);
            FFT_Monitor = System.Convert.ToBoolean(FFT_MonitorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the Post FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:STATe OFF | ON
        /// </summary>
        /// <param name="Post_FFT">
        /// This control activates/deactivates the Post FFT.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPostFFTState(bool Post_FFT)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPostFFTState(this._handle, System.Convert.ToUInt16(Post_FFT));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the Post FFT state.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:STATe?
        /// </summary>
        /// <param name="Post_FFT">
        /// This control gets the Post FFT state.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPostFFTState(out bool Post_FFT)
        {
            ushort Post_FFTAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerPostFFTState(this._handle, out Post_FFTAsUShort);
            Post_FFT = System.Convert.ToBoolean(Post_FFTAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the delay compensation.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:CHANnel:DELay
        /// </summary>
        /// <param name="Delay_Channel_1">
        /// This control sets the delay compensation.
        /// 
        /// Valid Values: -10.0 to 10.0 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Notes:
        /// 
        /// (1) This compensates delay differences of the DUT. The time by which Channel 1 is to be delayed relative to Channel 2 is entered. If the delay of Channel 2 is shorter than that of Channel 1, this can be compensated by entering a negative time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTDelayCh1(double Delay_Channel_1)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTDelayCh1(this._handle, Delay_Channel_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the delay compensation.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:CHANnel:DELay?
        /// </summary>
        /// <param name="Delay_Channel_1">
        /// This control gets the delay compensation.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTDelayCh1(out double Delay_Channel_1)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTDelayCh1(this._handle, out Delay_Channel_1);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the averaging function and select the averaging method.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:AVERage:MODE OFF | EXPonential | NORMal
        /// </summary>
        /// <param name="Avg_Mode">
        /// This control activates the averaging function and select the averaging method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_AVER_MODE_OFF   (0) - Off
        /// RSUPV_ANALYZER_FFT_AVER_MODE_EXP   (1) - Exponencial
        /// RSUPV_ANALYZER_FFT_AVER_MODE_NORM  (2) - Normal
        /// 
        /// Default Value: RSUPV_ANALYZER_FFT_AVER_MODE_OFF    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: No averaging; each FFT analysis result is displayed immediately and is independent of previous analyses.
        /// 
        /// (2) Exponencial: Averaging is performed continuously and displayed. When the current result is calculated, the previous measurements are taken into consideration using a constant factor. 
        /// 
        /// (3) Normal: The specified number of FFT cycles is performed, the partial results added together and then divided by this number. The result does not appear until all "k" cycles have been completed.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTAvgMode(int Avg_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTAvgMode(this._handle, Avg_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the averaging function and the averaging method.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:AVERage:MODE?
        /// </summary>
        /// <param name="Avg_Mode">
        /// This control gets the averaging function and the averaging method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FFT_AVER_MODE_OFF   (0) - Off
        /// RSUPV_ANALYZER_FFT_AVER_MODE_EXP   (1) - Exponencial
        /// RSUPV_ANALYZER_FFT_AVER_MODE_NORM  (2) - Normal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTAvgMode(out int Avg_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTAvgMode(this._handle, out Avg_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the average count; only if averaging is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:AVERage
        /// </summary>
        /// <param name="Avg_Count">
        /// This control sets the average count; only if averaging is activated.
        /// 
        /// Valid Values: 1 to 10000
        /// 
        /// Default Value: 2
        /// 
        /// Notes:
        /// 
        /// (1) With "normal averaging", the number entered here determines how many consecutive FFTs are used for averaging.
        /// With "exponential averaging", the number "k" entered here determines the extent to which the previous measurements are taken into consideration in the result. The weighting of the previous measurements is (k-1)/k.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTAvgCount(int Avg_Count)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTAvgCount(this._handle, Avg_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the average count; only if averaging is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:AVERage?
        /// </summary>
        /// <param name="Avg_Count">
        /// This control gets the average count; only if averaging is activated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTAvgCount(out int Avg_Count)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTAvgCount(this._handle, out Avg_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the triggered FFT analysis.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:FFT:TRIGgered
        /// </summary>
        /// <param name="Triggered_FFT_Enable">
        /// This control activates/deactivates triggered FFT function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTTriggeredState(bool Triggered_FFT_Enable)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTTriggeredState(this._handle, System.Convert.ToUInt16(Triggered_FFT_Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the FFT analysis.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n1&gt;:FUNCtion:FFT:TRIGgered?
        /// </summary>
        /// <param name="Triggered_FFT_Enable">
        /// This control returns the state of the FFT function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTTriggeredState(out bool Triggered_FFT_Enable)
        {
            ushort Triggered_FFT_EnableAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFFTTriggeredState(this._handle, out Triggered_FFT_EnableAsUShort);
            Triggered_FFT_Enable = System.Convert.ToBoolean(Triggered_FFT_EnableAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the Undersample FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:USAMple OFF | ON
        /// </summary>
        /// <param name="Undersample">
        /// This control activates/deactivates the Undersample FFT.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTUndersampleState(bool Undersample)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTUndersampleState(this._handle, System.Convert.ToUInt16(Undersample));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets state of the Undersample FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:USAMple?
        /// </summary>
        /// <param name="Undersample">
        /// This control returns the Undersample FFT.
        /// 
        /// Valid Values: 
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTUndersampleState(out bool Undersample)
        {
            ushort UndersampleAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFFTUndersampleState(this._handle, out UndersampleAsUShort);
            Undersample = System.Convert.ToBoolean(UndersampleAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets compression factor in undersample FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:CMPFactor
        /// </summary>
        /// <param name="Comp_Factor">
        /// This control sets compression factor in undersample FFT.
        /// 
        /// Valid Values:
        /// 1,2,4,8,16,32,64,128,256,512,1024
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTCompFactor(int Comp_Factor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTCompFactor(this._handle, Comp_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets compression factor in undersample FFT.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:CMPFactor?
        /// </summary>
        /// <param name="Comp_Factor">
        /// This control gets compression factor in undersample FFT.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTCompFactor(out int Comp_Factor)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTCompFactor(this._handle, out Comp_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the FFT center frequency; only if the Zoom FFT is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:CENTer
        /// </summary>
        /// <param name="Center">
        /// This control sets the FFT center frequency; only if the Zoom FFT is activated.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 10000.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFFTZoomCenter(double Center)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFFTZoomCenter(this._handle, Center);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the FFT center frequency; only if the Zoom FFT is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:CENTer?
        /// </summary>
        /// <param name="Center">
        /// This control gets the FFT center frequency; only if the Zoom FFT is activated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTZoomCenter(out double Center)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTZoomCenter(this._handle, out Center);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the start value of the FFT frequency band.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:STARt?
        /// </summary>
        /// <param name="Start">
        /// This indicator gets the start value of the FFT frequency band.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTZoomStart(out double Start)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTZoomStart(this._handle, out Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the end value of the FFT frequency band.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:FFT:STOP?
        /// </summary>
        /// <param name="Stop">
        /// This indicator gets the end value of the FFT frequency band.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFFTZoomStop(out double Stop)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFFTZoomStop(this._handle, out Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures audio quality measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:VERSion BASic | ADVanced
        /// SENSe[1]:FUNCtion:MMODe DUT | OFFLine
        /// MMEMory:STORe:PWAVeform 'filename'
        /// MMEMory:LOAD:PWAVeform 'filename'
        /// </summary>
        /// <param name="Model_Version">
        /// This control specifies whether the Basic or the Advanced model is to be used.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MODEL_BAS  (0) - Basic
        /// RSUPV_ANALYZER_PEAQ_DMODE_ADV  (1) - Advanced
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAQ_MODEL_BAS  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Basic - The measurement value is based on the ITU-R BS-
        ///     1387 basic procedure with just one ear model.
        /// 
        /// (2) Advanced - The measurement value is based on the advanced
        ///     procedure with a second ear model for refining the
        ///     time resolution.
        /// </param>
        /// <param name="Measurement_Mode">
        /// This control selects the measurement mode for PEAQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PEAQ_MMODE_OFFLINE (1) - Offline
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAQ_MMODE_DUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) DUT: The PEAQ measurement is to be performed in real
        /// time. The reference WAV file is run; the measurement signal is simultaneously recorded at the analyzer. The analysis takes place as soon as the reference signal has been run completely
        /// 
        /// (2) Offline: The PEAQ measurement is to be performed on previously stored WAV files. After the files containing the reference signal and the measurement signal are specified, the evaluation can be started by pressing the START button.
        /// The sample rate of the stored WAV files must be 48 kHz. The length of the recorded signals must not be shorter than that of the reference signal selected in the generator
        /// </param>
        /// <param name="Store_WAV_To_Filename">
        /// This control selects the WAV file.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Valid only for Meas Mode = DUT or Meas Mode = Offline
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerPEAQ(int Model_Version, int Measurement_Mode, string Store_WAV_To_Filename)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerPEAQ(this._handle, Model_Version, Measurement_Mode, Store_WAV_To_Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies whether the Basic or the Advanced model is to be used.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:VERSion BASic | ADVanced
        /// </summary>
        /// <param name="Model_Version">
        /// This control specifies whether the Basic or the Advanced model is to be used.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MODEL_BAS  (0) - Basic
        /// RSUPV_ANALYZER_PEAQ_DMODE_ADV  (1) - Advanced
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAQ_MODEL_BAS  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Basic - The measurement value is based on the ITU-R BS-
        ///     1387 basic procedure with just one ear model.
        /// 
        /// (2) Advanced - The measurement value is based on the advanced
        ///     procedure with a second ear model for refining the
        ///     time resolution.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPEAQModel(int Model_Version)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPEAQModel(this._handle, Model_Version);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the Basic or the Advanced model is to be used.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:VERSion?
        /// </summary>
        /// <param name="Model_Version">
        /// This control displays whether the Basic or the Advanced model is to be used.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MODEL_BAS  (0) - Basic
        /// RSUPV_ANALYZER_PEAQ_DMODE_ADV  (1) - Advanced
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQModel(out int Model_Version)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQModel(this._handle, out Model_Version);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement mode for PEAQ measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe DUT | OFFLine
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects the measurement mode for PEAQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PEAQ_MMODE_OFFLINE (1) - Offline
        /// 
        /// Default Value: RSUPV_ANALYZER_PEAQ_MMODE_DUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) DUT: The PEAQ measurement is to be performed in real time. The reference WAV file is run; the measurement signal is simultaneously recorded at the analyzer. The analysis takes place as soon as the reference signal has been run completely
        /// 
        /// (2) Offline: The PEAQ measurement is to be performed on previously stored WAV files. After the files containing the reference signal and the measurement signal are specified, the evaluation can be started by pressing the START button. The sample rate of the stored WAV files must be 48 kHz. The length of the recorded signals must not be shorter than that of the reference signal selected in the generator
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPEAQMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPEAQMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement mode for PEAQ measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control returns the measurement mode for PEAQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PEAQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PEAQ_MMODE_OFFLINE (1) - Offline
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the WAV file to which measured signal will be stored.
        /// 
        /// Note(s):
        /// 
        /// (1) The WAV file is always stored in the same sample rate in which the reference signal is present.
        /// 
        /// (2) Valid only for Meas Mode = DUT
        /// 
        /// (3) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:PWAVeform 'filename'
        /// </summary>
        /// <param name="Store_WAV_To">
        /// This control selects the WAV file
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPEAQStoreWAVTo(string Store_WAV_To)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPEAQStoreWAVTo(this._handle, Store_WAV_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the WAV file containing measurement data.
        /// 
        /// Note(s):
        /// 
        /// (1) Valid only for Meas Mode = Offline
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:PWAVeform 'filename'
        /// </summary>
        /// <param name="Filename">
        /// This control select the WAV file containing measurement data.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPEAQFilename(string Filename)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPEAQFilename(this._handle, Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the peak value of the reference signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:REFLevel?
        /// </summary>
        /// <param name="Reference_Level">
        /// This control returns the peak value of the reference signal (after the measurement).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQReferenceLevel(out double Reference_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQReferenceLevel(this._handle, out Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the peak value of the measurement signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:DEGLevel?
        /// </summary>
        /// <param name="Deg_Level">
        /// This control returns the peak value of the measurement signal (after the measurement)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQDegLevel(out double Deg_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQDegLevel(this._handle, out Deg_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the average time offset between the reference signal and the measurement signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:AVGDelay?
        /// </summary>
        /// <param name="Avg_Delay">
        /// This control returns the average time offset between the reference signal and the measurement signal (after the measurement).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQAvgDelay(out double Avg_Delay)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQAvgDelay(this._handle, out Avg_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the average time offset between the reference signal and the measurement signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PEAQ:DELDetect?
        /// </summary>
        /// <param name="Delay_Detect">
        /// This control displays (after the measurement) how good the algorithm could compensate the time offset between the reference and the measurement signal.
        /// 
        /// The value should be close to 100 %. For strongly periodic signals and/or signals with severe distortions this value can be significantly lower. Values below 70 % indicate that the ODG and DI values may become uncertain. In this case a subjective verification ? by listening to the signals - is recommended.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPEAQDelayDetect(out double Delay_Detect)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPEAQDelayDetect(this._handle, out Delay_Detect);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures speech quality measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:ACCording PP862 | PPSI862 | PPSP862 | MP8621 | MPSI8621 | MPSP8621 | MP8622 | MPSI8622 | MPSP8622
        /// SENSe[1]:FUNCtion:MMODe DUT | OFFLine
        /// MMEMory:STORe:PWAVeform 'filename'
        /// MMEMory:LOAD:PWAVeform 'filename'
        /// </summary>
        /// <param name="According_To">
        /// This control selects the display mode for PESQ or MOS value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_DMODE_PP862    (0) - PESQ P.862
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSI862  (1) - PESQ Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSP862  (2) - PESQ Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8621   (3) - MOS P862.1
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8621 (4) - MOS P862.1 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8621 (5) - MOS P862.1 Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8622   (6) - MOS P862.2
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8622 (7) - MOS P862.2 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8622 (8) - MOS P862.2 Speech
        /// 
        /// Default Value: RSUPV_ANALYZER_PESQ_DMODE_PP862 (0)
        /// 
        /// Notes:
        /// 
        /// (1) PESQ P.862: The measured value is referenced to the entire reference signal. The mapping of the PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (2) PESQ Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the
        /// PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (3) PESQ Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (4) MOS P862.1: The measured value is referenced to the entire reference signal. The mapping of the MOS measurement conforms to the ITU P.862.1 standard.
        /// 
        /// (5) MOS P862.1 Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.1 standard.
        /// 
        /// (6) MOS P862.1 Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the
        /// MOS measurement conforms to the ITU P.862.1 standard
        /// 
        /// (7) MOS P862.2: The measured value is referenced to the entire reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// 
        /// (8) MOS P862.2 Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// 
        /// (9) MOS P862.2 Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// </param>
        /// <param name="Measurement_Mode">
        /// This control selects the measurement mode for PESQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PESQ_MMODE_OFFLINE (1) - Offline
        /// 
        /// Default Value: RSUPV_ANALYZER_PESQ_MMODE_DUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) DUT: The PESQ measurement is to be made in realtime. The reference WAV file will be played back, and the measurement signal will be recorded by the analyzer at the same time. The evaluation is performed immediately after playback of the reference signal is finished.
        /// 
        /// (2) Offline: The PESQ measurement is to be performed on previously stored WAV files. The evaluation will be performed immediately after the files containing the reference signal and the measurement signal are specified.
        /// Possible sample rate of the stored WAV files are 8, 16, 48 or 96 kHz. The length of the recorded signal must be at least the length of the generator reference signal.
        /// </param>
        /// <param name="Store_WAV_To_Filename">
        /// This control selects the WAV file.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Valid only for Meas Mode = DUT or Meas Mode = Offline
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerPESQ(int According_To, int Measurement_Mode, string Store_WAV_To_Filename)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerPESQ(this._handle, According_To, Measurement_Mode, Store_WAV_To_Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the display mode for the PESQ or MOS value.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:ACCording PP862 | PPSI862 | PPSP862 | MP8621 | MPSI8621 | MPSP8621 | MP8622 | MPSI8622 | MPSP8622
        /// </summary>
        /// <param name="According_To">
        /// This control selects the display mode for PESQ or MOS value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_DMODE_PP862    (0) - PESQ P.862
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSI862  (1) - PESQ Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSP862  (2) - PESQ Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8621   (3) - MOS P862.1
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8621 (4) - MOS P862.1 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8621 (5) - MOS P862.1 Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8622   (6) - MOS P862.2
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8622 (7) - MOS P862.2 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8622 (8) - MOS P862.2 Speech
        /// 
        /// Default Value: RSUPV_ANALYZER_PESQ_DMODE_PP862 (0)
        /// 
        /// Notes:
        /// 
        /// (1) PESQ P.862: The measured value is referenced to the entire reference signal. The mapping of the PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (2) PESQ Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the
        /// PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (3) PESQ Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the PESQ measurement conforms to the ITU P.862 standard.
        /// 
        /// (4) MOS P862.1: The measured value is referenced to the entire reference signal. The mapping of the MOS measurement conforms to the ITU P.862.1 standard.
        /// 
        /// (5) MOS P862.1 Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.1 standard.
        /// 
        /// (6) MOS P862.1 Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the
        /// MOS measurement conforms to the ITU P.862.1 standard
        /// 
        /// (7) MOS P862.2: The measured value is referenced to the entire reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// 
        /// (8) MOS P862.2 Silence: The measured value is referenced to the silence portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// 
        /// (9) MOS P862.2 Speech: The measured value is referenced to the speech portion of the reference signal. The mapping of the MOS measurement conforms to the ITU P.862.2 standard.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPESQAccordingTo(int According_To)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPESQAccordingTo(this._handle, According_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the display mode for the PESQ or MOS value.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:ACCording?
        /// </summary>
        /// <param name="According_To">
        /// This control returns the display mode for PESQ or MOS value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_DMODE_PP862    (0) - PESQ P.862
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSI862  (1) - PESQ Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_PPSP862  (2) - PESQ Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8621   (3) - MOS P862.1
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8621 (4) - MOS P862.1 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8621 (5) - MOS P862.1 Speech
        /// RSUPV_ANALYZER_PESQ_DMODE_MP8622   (6) - MOS P862.2
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSI8622 (7) - MOS P862.2 Silence
        /// RSUPV_ANALYZER_PESQ_DMODE_MPSP8622 (8) - MOS P862.2 Speech
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPESQAccordingTo(out int According_To)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPESQAccordingTo(this._handle, out According_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement mode for PESQ measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe DUT | OFFLine
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects the measurement mode for PESQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PESQ_MMODE_OFFLINE (1) - Offline
        /// 
        /// Default Value: RSUPV_ANALYZER_PESQ_MMODE_DUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) DUT: The PESQ measurement is to be made in realtime. The reference WAV file will be played back, and the measurement signal will be recorded by the analyzer at the same time. The evaluation is performed immediately after playback of the reference signal is finished.
        /// 
        /// (2) Offline: The PESQ measurement is to be performed on previously stored WAV files. The evaluation will be performed immediately after the files containing the reference signal and the measurement signal are specified.
        /// Possible sample rate of the stored WAV files are 8, 16, 48 or 96 kHz. The length of the recorded signal must be at least the length of the generator reference signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPESQMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPESQMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement mode for PESQ measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control returns the measurement mode for PESQ measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PESQ_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_PESQ_MMODE_OFFLINE (1) - Offline
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPESQMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPESQMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the WAV file to which measured signal will be stored.
        /// 
        /// Note(s):
        /// 
        /// (1) The WAV file is always stored in the same sample rate in which the reference signal is present.
        /// 
        /// (2) Valid only for Meas Mode = DUT
        /// 
        /// (3) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:PWAVeform 'filename'
        /// </summary>
        /// <param name="Store_WAV_To">
        /// This control selects the WAV file
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPESQStoreWAVTo(string Store_WAV_To)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPESQStoreWAVTo(this._handle, Store_WAV_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the WAV file containing measurement data.
        /// 
        /// Note(s):
        /// 
        /// (1) Valid only for Meas Mode = Offline
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:PWAVeform 'filename'
        /// </summary>
        /// <param name="Filename">
        /// This control select the WAV file containing measurement data.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPESQFilename(string Filename)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPESQFilename(this._handle, Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the peak value of the reference signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:REFLevel?
        /// </summary>
        /// <param name="Reference_Level">
        /// This control returns the peak value of the reference signal (after the measurement).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPESQReferenceLevel(out double Reference_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPESQReferenceLevel(this._handle, out Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the peak value of the measurement signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:DEGLevel?
        /// </summary>
        /// <param name="Deg_Level">
        /// This control returns the peak value of the measurement signal (after the measurement)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPESQDegLevel(out double Deg_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPESQDegLevel(this._handle, out Deg_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the average time offset between the reference signal and the measurement signal (after the measurement).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:PESQ:AVGDelay?
        /// </summary>
        /// <param name="Avg_Delay">
        /// This control returns the average time offset between the reference signal and the measurement signal (after the measurement).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPESQAvgDelay(out double Avg_Delay)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPESQAvgDelay(this._handle, out Avg_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the analysis method for the POLQA algorithm.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:BAND NARRow | WIDE
        /// </summary>
        /// <param name="Band">
        /// This control specifies the analysis method for the POLQA algorithm.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_POLQA_BAND_NARROW (0) - Narrow
        /// RSUPV_ANALYZER_POLQA_BAND_WIDE   (1) - Wide
        /// 
        /// Default Value: RSUPV_ANALYZER_POLQA_BAND_NARROW  (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "Narrow" -  Measurement based on ITU-T P.861 specification
        /// 
        /// (2) "Wide" - Measurement based on ITU-T P.862 or P.863 specification
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPOLQABand(int Band)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPOLQABand(this._handle, Band);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the analysis method for the POLQA algorithm.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:BAND?
        /// </summary>
        /// <param name="Band">
        /// This control returns the analysis method for the POLQA algorithm.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_POLQA_BAND_NARROW (0) - Narrow
        /// RSUPV_ANALYZER_POLQA_BAND_WIDE   (1) - Wide
        /// 
        /// Notes:
        /// 
        /// (1) "Narrow" -  Measurement based on ITU-T P.861 specification
        /// 
        /// (2) "Wide" - Measurement based on ITU-T P.862 or P.863 specification
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQABand(out int Band)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQABand(this._handle, out Band);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement mode for POLQA measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe DUT | OFFLine
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects the measurement mode for POLQA measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_POLQA_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_POLQA_MMODE_OFFLINE (1) - Offline
        /// 
        /// Default Value: RSUPV_ANALYZER_POLQA_MMODE_DUT (0)
        /// 
        /// Notes:
        /// 
        /// (1) "DUT"  - The POLQA measurement is performed in realtime. The reference WAV file will be played back, and the measurement signal will be recorded by the analyzer at the same time. The evaluation is performed immediately after playback of the reference signal is finished.
        /// 
        /// (2) "Offline" - The POLQA measurement is to be performed for already stored WAV files. After the files containing the reference signal and the measurement signal are specified, the evaluation can be started by pressing the START button.
        /// The sample rate of the stored WAV files must be an integer multiple of 8kHz. The length of the recorded signal must be at least the length of the generator reference signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPOLQAMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPOLQAMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement mode for POLQA measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control returns the measurement mode for POLQA measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_POLQA_MMODE_DUT     (0) - DUT
        /// RSUPV_ANALYZER_POLQA_MMODE_OFFLINE (1) - Offline
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function allows compensating additional gains or attenuations of then transmission path. 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:GAIN
        /// </summary>
        /// <param name="Gain">
        /// This control sets the compensating additional gains or attenuations of then transmission path. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPOLQAGain(double Gain)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPOLQAGain(this._handle, Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the gains or attenuations of then transmission path. 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:GAIN?
        /// </summary>
        /// <param name="Gain">
        /// This control returns the compensating additional gains or attenuations of then transmission path. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAGain(out double Gain)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAGain(this._handle, out Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the RMS value of the reference signal after measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:PEAQ:REFLevel?
        /// </summary>
        /// <param name="Ref_Level">
        /// This control returns the RMS value of the reference signal after measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAReferenceLevel(out double Ref_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAReferenceLevel(this._handle, out Ref_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the RMS value of the measurement signal after measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) The "RMS" value of the measurement signal is shown in dB referenced to the full scale value of the measurement signal file for the "POLQA" algorithm. The POLQA algorithm is configured properly if the difference between Ref Level and Deg
        /// Level is as small as possible. See also the description of the "Attenuation" display value.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:PEAQ:DEGLevel?
        /// </summary>
        /// <param name="Deg_Level">
        /// This control returns the RMS value of the measurement signal after measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQADegLevel(out double Deg_Level)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQADegLevel(this._handle, out Deg_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the gain between reference and measurement signal after measurement determined by the POLQA algorithm. 
        /// 
        /// Note(s):
        /// 
        /// (1) Since this value affects the overall result of the measurement, the transmission path to and from the DUT must be adjusted prior to the actual measurement.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:ATTenuation?
        /// </summary>
        /// <param name="Attenuation">
        /// This control returns the gain between reference and measurement signal after measurement determined by the POLQA algorithm.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAAttenuation(out double Attenuation)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAAttenuation(this._handle, out Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the S/N value in dB across the entire reference signal after the measurement
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:SNRRef?
        /// </summary>
        /// <param name="SNR_Ref">
        /// This control returns the S/N value in dB across the entire reference signal after the measurement
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQASNRRef(out double SNR_Ref)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQASNRRef(this._handle, out SNR_Ref);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the S/N value in dB across the entire measurement signal after the measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:SNRDeg?
        /// </summary>
        /// <param name="SNR_Degraded">
        /// This control returns the S/N value in dB across the entire measurement signal after the measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQASNRDegraded(out double SNR_Degraded)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQASNRDegraded(this._handle, out SNR_Degraded);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time ratio between voice/music and silence in the reference signal after the measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) The reference signal is internally divided into small time frames. For each of these frames, the ratio between useful signal (voice/music) and silence (noise) is determined. This value indicates the overall ratio across all frames.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:REFSpratio?
        /// </summary>
        /// <param name="Ref_Sp__Ratio">
        /// This control returns the time ratio between voice/music and silence in the reference signal after the measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQARefSpRatio(out double Ref_Sp__Ratio)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQARefSpRatio(this._handle, out Ref_Sp__Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time ratio between voice/music and silence in the measurement signal after the measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) The measurement signal is internally divided into small time frames. For each of these frames, the ratio between useful signal (voice/music) and silence (noise) is determined. This value indicates the overall ratio across all frames.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:DEGSpratio?
        /// </summary>
        /// <param name="Deg_Sp__Ratio">
        /// This control returns the time ratio between voice/music and silence in the measurement signal after the measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQADegSpRatio(out double Deg_Sp__Ratio)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQADegSpRatio(this._handle, out Deg_Sp__Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum time offset between the reference and the measurement signals after measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) The reference and measurement signals are internally divided into small time frames. The time offset between the two signal paths is measured for each of these frames. The displayed value is the smallest determined value for the entire signal
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:MINDelay?
        /// </summary>
        /// <param name="Min_Delay">
        /// This control returns the minimum time offset between the reference and the measurement signals after measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAMinDelay(out double Min_Delay)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAMinDelay(this._handle, out Min_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum time offset between the reference and the measurement signals after measurement.
        /// 
        /// Note(s):
        ///  
        /// (1)The reference and measurement signals are internally divided into small time frames. The time offset between the two signal paths is measured for each of these frames. The displayed value is the largest determined value for the entire signal.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe:FUNCtion:POLQa:MAXDelay?
        /// </summary>
        /// <param name="Max_Delay">
        /// This control returns the maximum time offset between the reference and the measurement signals after measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPOLQAMaxDelay(out double Max_Delay)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPOLQAMaxDelay(this._handle, out Max_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the waveform monitor.
        /// 
        /// Remote-control command(s):
        /// SENSe7:FUNCtion OFF | ON
        /// </summary>
        /// <param name="Waveform_Monitor">
        /// This control activates/deactivates the waveform monitor.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorState(bool Waveform_Monitor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorState(this._handle, System.Convert.ToUInt16(Waveform_Monitor));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the waveform monitor.
        /// 
        /// Remote-control command(s):
        /// SENSe7:FUNCtion?
        /// </summary>
        /// <param name="Waveform_Monitor">
        /// This control gets the waveform monitor state.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorState(out bool Waveform_Monitor)
        {
            ushort Waveform_MonitorAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorState(this._handle, out Waveform_MonitorAsUShort);
            Waveform_Monitor = System.Convert.ToBoolean(Waveform_MonitorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the operating mode.
        /// 
        /// Remote-control command(s):
        /// SENSe7:MMODe STANdard | COMPressed | USAMple
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_MMODE_STAN (0) - Standard
        /// RSUPV_ANALYZER_WAV_MMODE_COMP (1) - Compressed
        /// RSUPV_ANALYZER_WAV_MMODE_USAM (2) - Undersample
        /// 
        /// Default Value: RSUPV_ANALYZER_WAV_MMODE_STAN (0)
        /// 
        /// Note(s):
        /// 
        /// (1) In certain measurement functions (e.g. "Record") "Meas Mode" cannot be selected, but instead stays at "Standard".
        /// 
        /// (2) Standard - Uncompressed recording of all samples. A maximum of 480000 samples can be stored. The possible recording length depends only on the bandwidth (analog) or sampling rate (digital). At a sampling rate of 48 kHz or an analog bandwidth of 22 kHz, the probable time is 10 s. Recommended for short recordings (maximum of a few seconds) and for periodic signals.
        /// 
        /// (3) Compressed - Compressed recording of the samples produced by peak value rectification. Specifying a value (n) for the "Comp Fact" (compression factor) in the next operator field means that the highest value out of every n consecutive samples is determined and this peak value is used as the input signal for the waveform function. The maximum recording time increases in proportion to the factor n. Since this waveform contains only positive data, a logarithmic display is possible. Recommended for recording low-frequency signals if the Standard recording time is too short or the only aspect of interest is the peak value trace (envelope).
        /// 
        /// (4) Undersample -  Compressed recording of the samples produced by undersampling. Specifying a value (n) for the "Comp Fact" (compression factor) in the next operator field means that only every nth sample is recorded. The maximum recording time increases in proportion to the factor n. Recommended for recording low-frequency signals if the Standard recording time is too short and the aspect of interest is the signal trace over time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the operating mode.
        /// 
        /// Remote-control command(s):
        /// SENSe7:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control returns the operating mode.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_MMODE_STAN (0) - Standard
        /// RSUPV_ANALYZER_WAV_MMODE_COMP (1) - Compressed
        /// RSUPV_ANALYZER_WAV_MMODE_USAM (2) - Undersample
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) In certain measurement functions (e.g. "Record") "Meas Mode" cannot be selected, but instead stays at "Standard".
        /// 
        /// (2) Standard - Uncompressed recording of all samples. A maximum of 480000 samples can be stored. The possible recording length depends only on the bandwidth (analog) or sampling rate (digital). At a sampling rate of 48 kHz or an analog bandwidth of 22 kHz, the probable time is 10 s. Recommended for short recordings (maximum of a few seconds) and for periodic signals.
        /// 
        /// (3) Compressed - Compressed recording of the samples produced by peak value rectification. Specifying a value (n) for the "Comp Fact" (compression factor) in the next operator field means that the highest value out of every n consecutive samples is determined and this peak value is used as the input signal for the waveform function. The maximum recording time increases in proportion to the factor n. Since this waveform contains only positive data, a logarithmic display is possible. Recommended for recording low-frequency signals if the Standard recording time is too short or the only aspect of interest is the peak value trace (envelope).
        /// 
        /// (4) Undersample -  Compressed recording of the samples produced by undersampling. Specifying a value (n) for the "Comp Fact" (compression factor) in the next operator field means that only every nth sample is recorded. The maximum recording time increases in proportion to the factor n. Recommended for recording low-frequency signals if the Standard recording time is too short and the aspect of interest is the signal trace over time.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the compression factor in compressed recording.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the meas mode is set to Compression or Undersample.
        /// 
        /// Remote-control command(s):
        /// SENSe7:COMPression
        /// </summary>
        /// <param name="Compression_Factor">
        /// This control sets the compression factor in compressed recording.
        /// 
        /// Valid Values:
        /// 2 to 1024
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorCompressionFactor(int Compression_Factor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorCompressionFactor(this._handle, Compression_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the compression factor in compressed recording.
        /// 
        /// Remote-control command(s):
        /// SENSe7:COMPression?
        /// </summary>
        /// <param name="Compression_Factor">
        /// This control gets the compression factor in compressed recording.
        /// 
        /// Valid Values:
        /// 2 to 1024
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorCompressionFactor(out int Compression_Factor)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorCompressionFactor(this._handle, out Compression_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the recording length (memory depth), including an optional pretrigger.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:TRCLength
        /// </summary>
        /// <param name="Trace_Length">
        /// This control sets the recording length (memory depth), including an optional pretrigger. Unit is seconds.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 0.01 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorTraceLength(double Trace_Length)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorTraceLength(this._handle, Trace_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the recording length (memory depth), including an optional pretrigger.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:TRCLength?
        /// </summary>
        /// <param name="Trace_Length">
        /// This control gets the recording length (memory depth), including an optional pretrigger. Unit is seconds.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorTraceLength(out double Trace_Length)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorTraceLength(this._handle, out Trace_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the trigger and selects the source (usually one of the measurement channels) which is to trigger measurement recording if the trigger threshold is overranged or underranged.
        /// 
        /// Note(s):
        /// 
        /// (1) Trigger sources 'Channel 1' and 'Channel 2' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:SOURce CH1 | CH2 | MANual | GENBurst | TRGChannel
        /// </summary>
        /// <param name="Trigger_Source">
        /// This control selects the source (usually one of the measurement channels) which is to trigger measurement recording if the trigger threshold is overranged or underranged.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_TRG_SRC_CH1  (0) - Channel 1
        /// RSUPV_ANALYZER_WAV_TRG_SRC_CH2  (1) - Channel 2
        /// RSUPV_ANALYZER_WAV_TRG_SRC_MAN  (2) - Manual
        /// RSUPV_ANALYZER_WAV_TRG_SRC_GENB (3) - Gen Burst
        /// RSUPV_ANALYZER_WAV_TRG_SRC_TRGC (4) - Trigger Channel
        /// 
        /// Default Value: RSUPV_ANALYZER_WAV_TRG_SRC_CH1 (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Channel 1 - Measurement channel 1 triggers recording. Only available if measurement channel 1 (or both channels) is activated.
        /// 
        /// (2) Channel 2 - Measurement channel 2 triggers recording. Only available if measurement channel 2 (or both channels) is activated.
        /// 
        /// (3) Manual - Recording is triggered as soon as the measurement starts.
        /// 
        /// (4) Gen Burst - Recording is synchronized to the start of the
        /// generator signal (preferably Sine Burst). Not available in multichannel analyzers. The generator signal is first muted briefly (approx. 3 ms) and then restarted with zero-degree phase
        /// (?Burst On? phase). Measurement data recording is started at the same time, taking internal signal delays into account. In this mode, the settling time of any filter that may be enabled is not taken into account for starting the measurement. In other words, the measurement starts without any delay and thus includes the settling time response of the filter.
        /// 
        /// (5) Trigger Channel - The measurement channel selected as "Trigger Channel" triggers the recording.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorTriggerSource(int Trigger_Source)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorTriggerSource(this._handle, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger source (usually one of the measurement channels) which is to trigger measurement recording if the trigger threshold is overranged or underranged.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:SOURce?
        /// </summary>
        /// <param name="Trigger_Source">
        /// This control returns the trigger source (usually one of the measurement channels) which is to trigger measurement recording if the trigger threshold is overranged or underranged.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_TRG_SRC_CH1  (0) - Channel 1
        /// RSUPV_ANALYZER_WAV_TRG_SRC_CH2  (1) - Channel 2
        /// RSUPV_ANALYZER_WAV_TRG_SRC_MAN  (2) - Manual
        /// RSUPV_ANALYZER_WAV_TRG_SRC_GENB (3) - Gen Burst
        /// RSUPV_ANALYZER_WAV_TRG_SRC_TRGC (4) - Trigger Channel
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorTriggerSource(out int Trigger_Source)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorTriggerSource(this._handle, out Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the trigger threshold.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the trigger source is set to Channel 1 or 2.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:LEVel &lt;nu&gt;
        /// </summary>
        /// <param name="Trigger_Level">
        /// This control sets the trigger threshold.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of Trigger Level entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorTriggerLevel(double Trigger_Level, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorTriggerLevel(this._handle, Trigger_Level, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the trigger threshold.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:LEVel?
        /// </summary>
        /// <param name="Trigger_Level">
        /// This control gets the trigger threshold.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of Trigger Level.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorTriggerLevel(out double Trigger_Level, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorTriggerLevel(this._handle, out Trigger_Level, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the signal edge on which measurement is to be triggered (trigger slope).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the trigger source is set to Channel 1 or 2.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:SLOPe RISing | FALLing
        /// </summary>
        /// <param name="Trigger_Slope">
        /// This control selects the signal edge on which measurement is to be triggered (trigger slope).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_TRG_SLOPE_RIS  (0) - Rising
        /// RSUPV_ANALYZER_WAV_TRG_SLOPE_FALL (1) - Falling
        /// 
        /// Default Value: RSUPV_ANALYZER_WAV_TRG_SLOPE_RIS  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Rising - Triggering occurs when the level on the measurement channel selected as the "Trigger Source" exceeds the trigger threshold for the first time. (Re-)arming occurs as soon as a level below the trigger threshold exists.
        /// 
        /// (2) Falling - Triggering occurs when the level on the measurement channel selected as the "Trigger Source" drops below the trigger threshold for the first time. (Re-)arming occurs as soon as a level above the trigger threshold exists.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorTriggerSlope(int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorTriggerSlope(this._handle, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the signal edge on which measurement is to be triggered (trigger slope).
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:SLOPe?
        /// </summary>
        /// <param name="Trigger_Slope">
        /// This control returns the signal edge on which measurement is to be triggered (trigger slope).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_WAV_TRG_SLOPE_RIS  (0) - Rising
        /// RSUPV_ANALYZER_WAV_TRG_SLOPE_FALL (1) - Falling
        /// 
        /// Note(s):
        /// 
        /// (1) Rising - Triggering occurs when the level on the measurement channel selected as the "Trigger Source" exceeds the trigger threshold for the first time. (Re-)arming occurs as soon as a level below the trigger threshold exists.
        /// 
        /// (2) Falling - Triggering occurs when the level on the measurement channel selected as the "Trigger Source" drops below the trigger threshold for the first time. (Re-)arming occurs as soon as a level above the trigger threshold exists.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorTriggerSlope(out int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorTriggerSlope(this._handle, out Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the pretrigger and sets the pretrigger interval in seconds. The pretrigger is deactivated by entering a pretrigger time of 0.0 s.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the trigger source is set to Channel 1 or 2.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:PREtrigger &lt;nu&gt;
        /// </summary>
        /// <param name="Pretrigger">
        /// This control sets the pretrigger interval in seconds.
        /// 
        /// Valid Values: 
        /// 0.0 to 0.4 s
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorPretrigger(double Pretrigger)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorPretrigger(this._handle, Pretrigger);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the pretrigger interval in seconds.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:PREtrigger?
        /// </summary>
        /// <param name="Pretrigger">
        /// This control gets the pretrigger interval in seconds.
        /// 
        /// Valid Values: 
        /// 0.0 to 0.4 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorPretrigger(out double Pretrigger)
        {
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorPretrigger(this._handle, out Pretrigger);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the autotrigger, that is, forced triggering, when the trigger condition is not fulfilled ("true") within the time selected as "Trace Length".
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if the trigger source is set to Channel 1 or 2.
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:AUTO ON | OFF
        /// </summary>
        /// <param name="Autotrigger">
        /// This control activates the autotrigger, that is, forced triggering, when the trigger condition is not fulfilled ("true") within the time selected as "Trace Length".
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) On: When the trace length has expired, forced triggering occurs, that is, the waveform is then displayed untriggered, as in the case of manual triggering. This setting is recommended if you wish to ensure that the measurement terminates, or in the case of an unknown signal trace.
        /// 
        /// (2) Off: The triggering of waveform recording - and thus the termination of a single measurement that has been started - occurs only when the trigger event has occurred (i.e. has changed to "true"). If an unfavorable trigger condition is chosen (e.g. the trigger level is too high) the measurement continues indefinitely and must be interrupted manually (STOP key). This setting is recommended if the waveform is to be displayed only if the trigger condition is fulfilled.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerWaveformMonitorAutotrigger(bool Autotrigger)
        {
            int pInvokeResult = PInvoke.SetAnalyzerWaveformMonitorAutotrigger(this._handle, System.Convert.ToUInt16(Autotrigger));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the autotrigger, that is, forced triggering, when the trigger condition is not fulfilled ("true") within the time selected as "Trace Length".
        /// 
        /// Remote-control command(s):
        /// SENSe7:TRIGger:AUTO?
        /// </summary>
        /// <param name="Autotrigger">
        /// This control returns the state of the autotrigger, that is, forced triggering, when the trigger condition is not fulfilled ("true") within the time selected as "Trace Length".
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) On: When the trace length has expired, forced triggering occurs, that is, the waveform is then displayed untriggered, as in the case of manual triggering. This setting is recommended if you wish to ensure that the measurement terminates, or in the case of an unknown signal trace.
        /// 
        /// (2) Off: The triggering of waveform recording - and thus the termination of a single measurement that has been started - occurs only when the trigger event has occurred (i.e. has changed to "true"). If an unfavorable trigger condition is chosen (e.g. the trigger level is too high) the measurement continues indefinitely and must be interrupted manually (STOP key). This setting is recommended if the waveform is to be displayed only if the trigger condition is fulfilled.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerWaveformMonitorAutotrigger(out bool Autotrigger)
        {
            ushort AutotriggerAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerWaveformMonitorAutotrigger(this._handle, out AutotriggerAsUShort);
            Autotrigger = System.Convert.ToBoolean(AutotriggerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the frequency measurement and selects the 2nd frequency measurement value. The frequency measurement and combined frequency/phase/group delay measurement are performed.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FUNCtion OFF | FREQuency | FQPHase | FQGRoupdelay | SFRequency | ON | FQSamplefrequency
        /// </summary>
        /// <param name="Combined_Measurement">
        /// This control activates the frequency measurement and selects the 2nd frequency measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ_PHASE_OFF   (0) - Off
        /// RSUPV_ANALYZER_FREQ_PHASE_FREQ  (1) - Frequency
        /// RSUPV_ANALYZER_FREQ_PHASE_FQPH  (2) - Freq &amp; Phase
        /// RSUPV_ANALYZER_FREQ_PHASE_FQGR  (3) - Freq &amp; Group Delay
        /// RSUPV_ANALYZER_FREQ_PHASE_SFR   (4) - Sample Freq
        /// RSUPV_ANALYZER_FREQ_PHASE_FQS   (5) - Freq &amp; Samplefreq
        ///  
        /// Default Value: RSUPV_ANALYZER_FREQ_PHASE_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: Frequency measurement is deactivated.
        /// 
        /// (2) Frequency: Frequency measurement is performed on channel 1 and/or channel 2.
        /// 
        /// (3) Freq &amp; Phase: Only available for two-channel measuring mode. Frequency measurement is performed on channel 1; the measurement window of channel 2 contains the phase of channel 2 referenced to channel 1.
        /// 
        /// (4) Freq &amp; Group Delay: Only available for two-channel measuring mode. Frequency measurement is performed on channel 1; the measurement window of channel 2 contains the group delay of channel 2 referenced to channel 1.
        /// 
        /// (5) Sample Freq: Only available in the digital analyzer. The measurement windows contain the sampling frequency.
        /// 
        /// (6) Freq &amp; Samplefreq: Only available for two-channel or multichannel measuring mode in the digital analyzer. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerCombinedMeasurement(int Combined_Measurement)
        {
            int pInvokeResult = PInvoke.SetAnalyzerCombinedMeasurement(this._handle, Combined_Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency measurement and the 2nd frequency measurement value.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FUNCtion?
        /// </summary>
        /// <param name="Combined_Measurement">
        /// This control gets the frequency measurement and the 2nd frequency measurement value.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FREQ_PHASE_OFF   (0) - Off
        /// RSUPV_ANALYZER_FREQ_PHASE_FREQ  (1) - Frequency
        /// RSUPV_ANALYZER_FREQ_PHASE_FQPH  (2) - Freq &amp; Phase
        /// RSUPV_ANALYZER_FREQ_PHASE_FQGR  (3) - Freq &amp; Group Delay
        /// RSUPV_ANALYZER_FREQ_PHASE_SFR   (4) - Sample Freq
        /// RSUPV_ANALYZER_FREQ_PHASE_FQS   (5) - Freq &amp; Samplefreq
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerCombinedMeasurement(out int Combined_Measurement)
        {
            int pInvokeResult = PInvoke.GetAnalyzerCombinedMeasurement(this._handle, out Combined_Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement speed.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:APERture:MODE FAST | PRECision
        /// </summary>
        /// <param name="Meas_Time">
        /// This control selects the measurement speed.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_FAST   (0) - Fast
        /// RSUPV_ANALYZER_MEAS_TIME_PREC   (1) - Precision
        ///  
        /// Default Value: RSUPV_ANALYZER_MEAS_TIME_FAST (0)
        /// 
        /// Notes:
        /// 
        /// (1) Fast: The frequency and (if applicable) phase measurement is optimized with respect to speed.
        /// 
        /// (2) Precision: The frequency and (if applicable) phase measurement is optimized with respect to precision.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerMeasurementTime(int Meas_Time)
        {
            int pInvokeResult = PInvoke.SetAnalyzerMeasurementTime(this._handle, Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the measurement speed.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:APERture:MODE?
        /// </summary>
        /// <param name="Meas_Time">
        /// This control gets the measurement speed.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_FAST   (0) - Fast
        /// RSUPV_ANALYZER_MEAS_TIME_PREC   (1) - Precision
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerMeasurementTime(out int Meas_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerMeasurementTime(this._handle, out Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the phase display format; only available if phase measurement is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe3:PHASe:FORMat POSitive | POSNegative | NEGative | RAD | RADBipolar | RADNegative | INFinite
        /// </summary>
        /// <param name="Format_Phase">
        /// This control selects the phase display format; only available if phase measurement is activated.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PHASE_FORMAT_POS    (0) - 0..360 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_POSN   (1) - -180..180 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_NEG    (2) - -360..0 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_RAD    (3) - 0..2 PI
        /// RSUPV_ANALYZER_PHASE_FORMAT_RADB   (4) - - PI..+PI
        /// RSUPV_ANALYZER_PHASE_FORMAT_RADN   (5) - -2 PI..0
        /// RSUPV_ANALYZER_PHASE_FORMAT_INF    (6) - Infinite
        ///  
        /// Default Value: RSUPV_ANALYZER_PHASE_FORMAT_POS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) 0..360 DEG: The phase is displayed in the range 0 DEG to 360 DEG; only available if " DEG" has been selected for the phase unit.
        /// 
        /// (2) -180..180 DEG: The phase is displayed in the range +/- 180 DEG; only available if " DEG" has been selected for the phase unit.
        /// 
        /// (3) -360..0 DEG: The phase is displayed in the range -360 DEG to 0 DEG; only available if " DEG" has been selected for the phase unit.
        /// 
        /// (4) 0..2 PI: The phase is displayed as a radian from 0 to 2 PI; only available if "RAD" has been selected for the phase unit.
        /// 
        /// (5) - PI..+PI: The phase is displayed as a radian from -PI to +PI; only available if "RAD" has been selected for the phase unit.
        /// 
        /// (6) -2 PI..0: The phase is displayed as a radian from -2 PI to 0; only available if "RAD" has been selected for the phase unit.
        /// 
        /// (7) Infinite: The phase is displayed continuously (-inf to +inf).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFormatPhase(int Format_Phase)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFormatPhase(this._handle, Format_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the phase display format; only available if phase measurement is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe3:PHASe:FORMat?
        /// </summary>
        /// <param name="Format_Phase">
        /// This control gets the phase display format; only available if phase measurement is activated.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PHASE_FORMAT_POS    (0) - 0..360 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_POSN   (1) - -180..180 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_NEG    (2) - -360..0 DEG
        /// RSUPV_ANALYZER_PHASE_FORMAT_RAD    (3) - 0..2 PI
        /// RSUPV_ANALYZER_PHASE_FORMAT_RADB   (4) - - PI..+PI
        /// RSUPV_ANALYZER_PHASE_FORMAT_RADN   (5) - -2 PI..0
        /// RSUPV_ANALYZER_PHASE_FORMAT_INF    (6) - Infinite
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFormatPhase(out int Format_Phase)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFormatPhase(this._handle, out Format_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the input level meter and selects the measurement method.
        /// 
        /// Note(s):
        /// 
        /// (1) Input monitors 'Phase To Ref' and 'Dig Inp Amp' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe2:FUNCtion OFF | IPEak | PHASetoref | DIGinpampl
        /// </summary>
        /// <param name="Input_Monitor">
        /// This control activates the input level meter and selects the measurement method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_INPUT_MON_OFF   (0) - Off
        /// RSUPV_ANALYZER_INPUT_MON_IPEA  (1) - Peak
        /// RSUPV_ANALYZER_INPUT_MON_PHAS  (2) - Phase To Ref
        /// RSUPV_ANALYZER_INPUT_MON_DIG   (3) - Dig Inp Amp
        /// 
        /// Default Value: RSUPV_ANALYZER_INPUT_MON_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The input monitor is deactivated.
        /// 
        /// (2) Peak: The peak input value is measured. The numerically highest input sample is determined within a preset interval.
        /// 
        /// (3) Phase To Ref: Measurement of the phase between the selected digital input and the reference input. Selectable only in the digital analyzer when the jitter/phase measurement mode is activated.
        /// 
        /// (4) Dig Inp Amp: Measurement of the digital input amplitude at the selected digital input ("Bal" or "Unbal"). Selectable only in the digital analyzer when the common/input measurement mode is activated.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerInputMonitor(int Input_Monitor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerInputMonitor(this._handle, Input_Monitor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the input level meter and the measurement method.
        /// 
        /// Remote-control command(s):
        /// SENSe2:FUNCtion?
        /// </summary>
        /// <param name="Input_Monitor">
        /// This control gets the input level meter and the measurement method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_INPUT_MON_OFF   (0) - Off
        /// RSUPV_ANALYZER_INPUT_MON_IPEA  (1) - Peak
        /// RSUPV_ANALYZER_INPUT_MON_PHAS  (2) - Phase To Ref
        /// RSUPV_ANALYZER_INPUT_MON_DIG   (3) - Dig Inp Amp
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerInputMonitor(out int Input_Monitor)
        {
            int pInvokeResult = PInvoke.GetAnalyzerInputMonitor(this._handle, out Input_Monitor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the level monitor and selects the measurement method.
        /// 
        /// Remote-control command(s):
        /// SENSe6:FUNCtion OFF | LRMS | DC | PEAK
        /// </summary>
        /// <param name="Level_Monitor">
        /// This control activates the averaging function and select the averaging method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_LEV_MON_OFF   (0) - Off
        /// RSUPV_ANALYZER_LEV_MON_RMS   (1) - RMS
        /// RSUPV_ANALYZER_LEV_MON_DC    (2) - DC
        /// RSUPV_ANALYZER_LEV_MON_IMAX  (3) - Peak
        /// 
        /// Default Value: RSUPV_ANALYZER_LEV_MON_OFF    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The level monitor is deactivated.
        /// 
        /// (2) RMS: A broadband RMS measurement with automatic period detection is performed.
        /// 
        /// (3) DC: A DC voltage measurement with automatic AC suppression is performed.
        /// 
        /// (4) Peak: The peak value is measured.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerLevelMonitor(int Level_Monitor)
        {
            int pInvokeResult = PInvoke.SetAnalyzerLevelMonitor(this._handle, Level_Monitor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the level monitor and the measurement method.
        /// 
        /// Remote-control command(s):
        /// SENSe6:FUNCtion?
        /// </summary>
        /// <param name="Level_Monitor">
        /// This control gets the averaging function and the averaging method.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_LEV_MON_OFF   (0) - Off
        /// RSUPV_ANALYZER_LEV_MON_RMS   (1) - RMS
        /// RSUPV_ANALYZER_LEV_MON_DC    (2) - DC
        /// RSUPV_ANALYZER_LEV_MON_IMAX  (3) - IMAX
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerLevelMonitor(out int Level_Monitor)
        {
            int pInvokeResult = PInvoke.GetAnalyzerLevelMonitor(this._handle, out Level_Monitor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects prefilter that affects all measurement functions. This means that prefiltering is possible without having to select the required filter for every single measurement function.
        /// 
        /// Remote-control command(s):
        /// INPut:FILTer OFF | UFIL1 .. UFIL9 | AWE | CARM | CCIU | CCIR | CCIT | CMES | DCN | DEMP17 | DEMP5015 | DEMP50 | DEMP75 | IECT | JITT | URUM | WRUM | PEMP17 | PEMP5015 | PEMP50 | PEMP75 | HP22 | HP400 | LP22 | LP30 | LP80 | AES17 | CWE
        /// </summary>
        /// <param name="Pre_nFilter">
        /// This control selects pre filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PREFILTER_OFF       (0) - Off
        ///  User-definable filters:
        /// RSUPV_ANALYZER_PREFILTER_UFIL1     (1) - Filter 01
        /// RSUPV_ANALYZER_PREFILTER_UFIL2     (2) - Filter 02
        /// RSUPV_ANALYZER_PREFILTER_UFIL3     (3) - Filter 03
        /// RSUPV_ANALYZER_PREFILTER_UFIL4     (4) - Filter 04
        /// RSUPV_ANALYZER_PREFILTER_UFIL5     (5) - Filter 05
        /// RSUPV_ANALYZER_PREFILTER_UFIL6     (6) - Filter 06
        /// RSUPV_ANALYZER_PREFILTER_UFIL7     (7) - Filter 07
        /// RSUPV_ANALYZER_PREFILTER_UFIL8     (8) - Filter 08
        /// RSUPV_ANALYZER_PREFILTER_UFIL9     (9) - Filter 09
        ///  Weighting filters:
        /// RSUPV_ANALYZER_PREFILTER_AWE       (10) - A Weighting
        /// RSUPV_ANALYZER_PREFILTER_CCIR      (11) - CCIR 1k wtd
        /// RSUPV_ANALYZER_PREFILTER_CARM      (12) - CCIR 2k wtd
        /// RSUPV_ANALYZER_PREFILTER_CCIU      (13) - CCIR unwtd
        /// RSUPV_ANALYZER_PREFILTER_CCIT      (14) - CCITT
        /// RSUPV_ANALYZER_PREFILTER_CMES      (15) - C Message
        /// RSUPV_ANALYZER_PREFILTER_DCN       (16) - DC Noise HP
        /// RSUPV_ANALYZER_PREFILTER_DEMP17    (17) - Deemph J.17
        /// RSUPV_ANALYZER_PREFILTER_DEMP5015  (18) - Deemph 50/15
        /// RSUPV_ANALYZER_PREFILTER_DEMP50    (19) - Deemph 50
        /// RSUPV_ANALYZER_PREFILTER_DEMP75    (20) - Deemph 75
        /// RSUPV_ANALYZER_PREFILTER_IECT      (21) - IEC Tuner
        /// RSUPV_ANALYZER_PREFILTER_JITT      (22) - Jitter wtd
        /// RSUPV_ANALYZER_PREFILTER_URUM      (23) - Rumble unwtd
        /// RSUPV_ANALYZER_PREFILTER_WRUM      (24) - Rumble wtd
        /// RSUPV_ANALYZER_PREFILTER_PEMP17    (25) - Preemph J.17
        /// RSUPV_ANALYZER_PREFILTER_PEMP5015  (26) - Preemph 50/15
        /// RSUPV_ANALYZER_PREFILTER_PEMP50    (27) - Preemph 50
        /// RSUPV_ANALYZER_PREFILTER_PEMP75    (28) - Preemph 75
        /// RSUPV_ANALYZER_PREFILTER_HP22      (29) - HighPass 22 Hz
        /// RSUPV_ANALYZER_PREFILTER_HP400     (30) - HighPass 400 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP22      (31) - LowPass 22 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP30      (32) - LowPass 30 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP80      (33) - LowPass 80 Hz
        /// RSUPV_ANALYZER_PREFILTER_AES17     (34) - AES 17
        /// RSUPV_ANALYZER_PREFILTER_CWE       (35) - C Weighting
        /// 
        /// Default Value: RSUPV_ANALYZER_PREFILTER_OFF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPrefilter(int Pre_nFilter)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPrefilter(this._handle, Pre_nFilter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets prefilter that affects all measurement functions. This means that prefiltering is possible without having to select the required filter for every single measurement function.
        /// 
        /// Remote-control command(s):
        /// INPut:FILTer?
        /// </summary>
        /// <param name="Pre_nFilter">
        /// This control gets pre filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PREFILTER_OFF       (0) - Off
        ///  User-definable filters:
        /// RSUPV_ANALYZER_PREFILTER_UFIL1     (1) - Filter 01
        /// RSUPV_ANALYZER_PREFILTER_UFIL2     (2) - Filter 02
        /// RSUPV_ANALYZER_PREFILTER_UFIL3     (3) - Filter 03
        /// RSUPV_ANALYZER_PREFILTER_UFIL4     (4) - Filter 04
        /// RSUPV_ANALYZER_PREFILTER_UFIL5     (5) - Filter 05
        /// RSUPV_ANALYZER_PREFILTER_UFIL6     (6) - Filter 06
        /// RSUPV_ANALYZER_PREFILTER_UFIL7     (7) - Filter 07
        /// RSUPV_ANALYZER_PREFILTER_UFIL8     (8) - Filter 08
        /// RSUPV_ANALYZER_PREFILTER_UFIL9     (9) - Filter 09
        ///  Weighting filters:
        /// RSUPV_ANALYZER_PREFILTER_AWE       (10) - A Weighting
        /// RSUPV_ANALYZER_PREFILTER_CCIR      (11) - CCIR 1k wtd
        /// RSUPV_ANALYZER_PREFILTER_CARM      (12) - CCIR 2k wtd
        /// RSUPV_ANALYZER_PREFILTER_CCIU      (13) - CCIR unwtd
        /// RSUPV_ANALYZER_PREFILTER_CCIT      (14) - CCITT
        /// RSUPV_ANALYZER_PREFILTER_CMES      (15) - C Message
        /// RSUPV_ANALYZER_PREFILTER_DCN       (16) - DC Noise HP
        /// RSUPV_ANALYZER_PREFILTER_DEMP17    (17) - Deemph J.17
        /// RSUPV_ANALYZER_PREFILTER_DEMP5015  (18) - Deemph 50/15
        /// RSUPV_ANALYZER_PREFILTER_DEMP50    (19) - Deemph 50
        /// RSUPV_ANALYZER_PREFILTER_DEMP75    (20) - Deemph 75
        /// RSUPV_ANALYZER_PREFILTER_IECT      (21) - IEC Tuner
        /// RSUPV_ANALYZER_PREFILTER_JITT      (22) - Jitter wtd
        /// RSUPV_ANALYZER_PREFILTER_URUM      (23) - Rumble unwtd
        /// RSUPV_ANALYZER_PREFILTER_WRUM      (24) - Rumble wtd
        /// RSUPV_ANALYZER_PREFILTER_PEMP17    (25) - Preemph J.17
        /// RSUPV_ANALYZER_PREFILTER_PEMP5015  (26) - Preemph 50/15
        /// RSUPV_ANALYZER_PREFILTER_PEMP50    (27) - Preemph 50
        /// RSUPV_ANALYZER_PREFILTER_PEMP75    (28) - Preemph 75
        /// RSUPV_ANALYZER_PREFILTER_HP22      (29) - HighPass 22 Hz
        /// RSUPV_ANALYZER_PREFILTER_HP400     (30) - HighPass 400 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP22      (31) - LowPass 22 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP30      (32) - LowPass 30 Hz
        /// RSUPV_ANALYZER_PREFILTER_LP80      (33) - LowPass 80 Hz
        /// RSUPV_ANALYZER_PREFILTER_AES17     (34) - AES 17
        /// RSUPV_ANALYZER_PREFILTER_CWE       (35) - C Weighting
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPrefilter(out int Pre_nFilter)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPrefilter(this._handle, out Pre_nFilter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates a digital filter in the measurement path. Depending on the selected level measurement method, up to 3 user-defined filters or weighting filters can be looped into the measurement path:
        /// 
        /// - RMS: max. 3 filters
        /// - RMS Selective: max. 1 filter in addition to selection filter
        /// - Peak: max. 3 filters
        /// - Quasi Peak: max. 3 filters
        /// - DC: no filters
        /// - FFT: max. 3 filters
        /// 
        /// Note(s):
        /// 
        /// (1) Filter Number 3 is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FILTer&lt;1..4&gt; OFF | UFIL1 | UFIL2 | UFIL3 | UFIL4 | UFIL5 | UFIL6 | UFIL7 | UFIL8 | UFIL9 | AWE | CARM | CCIU | CCIR | CCIT | CMES | DEMP17 | DCN | DEMP5015 | DEMP50 | DEMP75 | IECT | JITT | URUM | WRUM | PEMP5015 | PEMP17 | PEMP50 | PEMP75 | HP22 | HP400 | LP22 | LP30 | LP80 | AES17 | CWE
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter">
        /// This control selects filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FILTER_OFF       (0) - Off
        ///  User-definable filters:
        /// RSUPV_ANALYZER_FILTER_UFIL1     (1) - Filter 01
        /// RSUPV_ANALYZER_FILTER_UFIL2     (2) - Filter 02
        /// RSUPV_ANALYZER_FILTER_UFIL3     (3) - Filter 03
        /// RSUPV_ANALYZER_FILTER_UFIL4     (4) - Filter 04
        /// RSUPV_ANALYZER_FILTER_UFIL5     (5) - Filter 05
        /// RSUPV_ANALYZER_FILTER_UFIL6     (6) - Filter 06
        /// RSUPV_ANALYZER_FILTER_UFIL7     (7) - Filter 07
        /// RSUPV_ANALYZER_FILTER_UFIL8     (8) - Filter 08
        /// RSUPV_ANALYZER_FILTER_UFIL9     (9) - Filter 09
        ///  Weighting filters:
        /// RSUPV_ANALYZER_FILTER_AWE       (10) - A Weighting
        /// RSUPV_ANALYZER_FILTER_CCIR      (11) - CCIR 1k wtd
        /// RSUPV_ANALYZER_FILTER_CARM      (12) - CCIR 2k wtd
        /// RSUPV_ANALYZER_FILTER_CCIU      (13) - CCIR unwtd
        /// RSUPV_ANALYZER_FILTER_CCIT      (14) - CCITT
        /// RSUPV_ANALYZER_FILTER_CMES      (15) - C Message
        /// RSUPV_ANALYZER_FILTER_DCN       (16) - DC Noise HP
        /// RSUPV_ANALYZER_FILTER_DEMP17    (17) - Deemph J.17
        /// RSUPV_ANALYZER_FILTER_DEMP5015  (18) - Deemph 50/15
        /// RSUPV_ANALYZER_FILTER_DEMP50    (19) - Deemph 50
        /// RSUPV_ANALYZER_FILTER_DEMP75    (20) - Deemph 75
        /// RSUPV_ANALYZER_FILTER_IECT      (21) - IEC Tuner
        /// RSUPV_ANALYZER_FILTER_JITT      (22) - Jitter wtd
        /// RSUPV_ANALYZER_FILTER_URUM      (23) - Rumble unwtd
        /// RSUPV_ANALYZER_FILTER_WRUM      (24) - Rumble wtd
        /// RSUPV_ANALYZER_FILTER_PEMP17    (25) - Preemph J.17
        /// RSUPV_ANALYZER_FILTER_PEMP5015  (26) - Preemph 50/15
        /// RSUPV_ANALYZER_FILTER_PEMP50    (27) - Preemph 50
        /// RSUPV_ANALYZER_FILTER_PEMP75    (28) - Preemph 75
        /// RSUPV_ANALYZER_FILTER_HP22      (29) - HighPass 22 Hz
        /// RSUPV_ANALYZER_FILTER_HP400     (30) - HighPass 400 Hz
        /// RSUPV_ANALYZER_FILTER_LP22      (31) - LowPass 22 Hz
        /// RSUPV_ANALYZER_FILTER_LP30      (32) - LowPass 30 Hz
        /// RSUPV_ANALYZER_FILTER_LP80      (33) - LowPass 80 Hz
        /// RSUPV_ANALYZER_FILTER_AES17     (34) - AES 17
        /// RSUPV_ANALYZER_FILTER_CWE       (35) - C Weighting
        /// 
        /// Default Value: RSUPV_ANALYZER_FILTER_OFF (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFilter(int Filter_Number, int Filter)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFilter(this._handle, Filter_Number, Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets a digital filter in the measurement path. 
        /// 
        /// Note(s):
        /// 
        /// (1) Filter Number 3 is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FILTer&lt;1..4&gt;?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter">
        /// This control gets analyzer filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FILTER_OFF       (0) - Off
        ///  User-definable filters:
        /// RSUPV_ANALYZER_FILTER_UFIL1     (1) - Filter 01
        /// RSUPV_ANALYZER_FILTER_UFIL2     (2) - Filter 02
        /// RSUPV_ANALYZER_FILTER_UFIL3     (3) - Filter 03
        /// RSUPV_ANALYZER_FILTER_UFIL4     (4) - Filter 04
        /// RSUPV_ANALYZER_FILTER_UFIL5     (5) - Filter 05
        /// RSUPV_ANALYZER_FILTER_UFIL6     (6) - Filter 06
        /// RSUPV_ANALYZER_FILTER_UFIL7     (7) - Filter 07
        /// RSUPV_ANALYZER_FILTER_UFIL8     (8) - Filter 08
        /// RSUPV_ANALYZER_FILTER_UFIL9     (9) - Filter 09
        ///  Weighting filters:
        /// RSUPV_ANALYZER_FILTER_AWE       (10) - A Weighting
        /// RSUPV_ANALYZER_FILTER_CCIR      (11) - CCIR 1k wtd
        /// RSUPV_ANALYZER_FILTER_CARM      (12) - CCIR 2k wtd
        /// RSUPV_ANALYZER_FILTER_CCIU      (13) - CCIR unwtd
        /// RSUPV_ANALYZER_FILTER_CCIT      (14) - CCITT
        /// RSUPV_ANALYZER_FILTER_CMES      (15) - C Message
        /// RSUPV_ANALYZER_FILTER_DCN       (16) - DC Noise HP
        /// RSUPV_ANALYZER_FILTER_DEMP17    (17) - Deemph J.17
        /// RSUPV_ANALYZER_FILTER_DEMP5015  (18) - Deemph 50/15
        /// RSUPV_ANALYZER_FILTER_DEMP50    (19) - Deemph 50
        /// RSUPV_ANALYZER_FILTER_DEMP75    (20) - Deemph 75
        /// RSUPV_ANALYZER_FILTER_IECT      (21) - IEC Tuner
        /// RSUPV_ANALYZER_FILTER_JITT      (22) - Jitter wtd
        /// RSUPV_ANALYZER_FILTER_URUM      (23) - Rumble unwtd
        /// RSUPV_ANALYZER_FILTER_WRUM      (24) - Rumble wtd
        /// RSUPV_ANALYZER_FILTER_PEMP17    (25) - Preemph J.17
        /// RSUPV_ANALYZER_FILTER_PEMP5015  (26) - Preemph 50/15
        /// RSUPV_ANALYZER_FILTER_PEMP50    (27) - Preemph 50
        /// RSUPV_ANALYZER_FILTER_PEMP75    (28) - Preemph 75
        /// RSUPV_ANALYZER_FILTER_HP22      (29) - HighPass 22 Hz
        /// RSUPV_ANALYZER_FILTER_HP400     (30) - HighPass 400 Hz
        /// RSUPV_ANALYZER_FILTER_LP22      (31) - LowPass 22 Hz
        /// RSUPV_ANALYZER_FILTER_LP30      (32) - LowPass 30 Hz
        /// RSUPV_ANALYZER_FILTER_LP80      (33) - LowPass 80 Hz
        /// RSUPV_ANALYZER_FILTER_AES17     (34) - AES 17
        /// RSUPV_ANALYZER_FILTER_CWE       (35) - C Weighting
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFilter(int Filter_Number, out int Filter)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFilter(this._handle, Filter_Number, out Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the analyzer notch.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This function is only valid if Analog Analyzer is selected and the Analyzer Function is set different than to Off.
        /// 
        /// (2) To select the Notch Freq the Notch Gain different than Off has to be selected.
        /// 
        /// (3) To set the Notch Freq Value the Notch Freq has to be set to Value.
        /// 
        /// (4) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh OFF | DB0 | DB12 | DB30
        /// SENSe[1]:NOTCh:FREQuency:MODE FIXed | GENTrack
        /// SENSe[1]:NOTCh:FREQuency
        /// 
        /// </summary>
        /// <param name="Notch_Gain">
        /// This control activates/deactivates the analog notch filter and select the postgain. Only with AC level measurements in the analog analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_GAIN_OFF    (0) - Off
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB0    (1) - 0 dB
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB12   (2) - 12 dB Auto
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB30   (3) - 30 dB Auto
        /// 
        /// Default Value: RSUPV_ANALYZER_NOTCH_GAIN_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The notch filter is deactivated; no additional parameter fields are displayed.
        /// 
        /// (2) 0 dB: The notch filter is activated; the notch gain is deactivated. The notch frequency can be selected.
        /// 
        /// (3) 12 dB Auto: The notch filter is activated; the notch gain is 12 dB (is deactivated if out-of-band signals occur). The
        /// notch frequency can be selected.
        /// 
        /// (4) 30 dB Auto: The notch filter is activated; the notch gain is 30 dB (is reduced gradually to 12 or 0 dB if out-of-band
        /// signals occur). The notch frequency can be selected.
        /// </param>
        /// <param name="Notch_Frequency">
        /// This control selects the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_FREQ_FIX    (0) - Value
        /// RSUPV_ANALYZER_NOTCH_FREQ_GENT   (1) - Gen Track
        /// 
        /// Default Value: RSUPV_ANALYZER_NOTCH_FREQ_FIX (0)
        /// 
        /// Notes:
        /// 
        /// (1) Value: If "Value" is selected, the center frequency last active is displayed. The user can enter the notch-filter center frequency.
        /// 
        /// (2) Gen Track: The notch-filter center frequency is adopted from the generator panel (if possible). If the generator frequency is changed, the notch frequency also changes. If an unsuitable generator signal (e.g. noise) is set, an error message is output and the center frequency last valid is retained.
        /// If the Low-Distortion Generator option is used, "Gen Track" should be avoided on account of the rigid coupling to the generator's nominal frequency, otherwise measuring inaccuracy
        /// resulting from slight frequency offset could occur.
        /// </param>
        /// <param name="Notch_Center_Frequency">
        /// This control sets the notch-filter center frequency.
        /// 
        /// Valid Range: 10.0 to 115.0e3 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAnalyzerNotchFilter(int Notch_Gain, int Notch_Frequency, double Notch_Center_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureAnalyzerNotchFilter(this._handle, Notch_Gain, Notch_Frequency, Notch_Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the analog notch filter and select the postgain. Only with AC level measurements in the analog analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh OFF | DB0 | DB12 | DB30
        /// </summary>
        /// <param name="Notch_Gain">
        /// This control activates/deactivates the analog notch filter and select the postgain. Only with AC level measurements in the analog analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_GAIN_OFF    (0) - Off
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB0    (1) - 0 dB
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB12   (2) - 12 dB Auto
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB30   (3) - 30 dB Auto
        /// 
        /// Default Value: RSUPV_ANALYZER_NOTCH_GAIN_OFF    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The notch filter is deactivated; no additional parameter fields are displayed.
        /// 
        /// (2) 0 dB: The notch filter is activated; the notch gain is deactivated. The notch frequency can be selected.
        /// 
        /// (3) 12 dB Auto: The notch filter is activated; the notch gain is 12 dB (is deactivated if out-of-band signals occur). The
        /// notch frequency can be selected.
        /// 
        /// (4) 30 dB Auto: The notch filter is activated; the notch gain is 30 dB (is reduced gradually to 12 or 0 dB if out-of-band
        /// signals occur). The notch frequency can be selected.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerNotchGain(int Notch_Gain)
        {
            int pInvokeResult = PInvoke.SetAnalyzerNotchGain(this._handle, Notch_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the analog notch filter and the postgain. Only with AC level measurements in the analog analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh?
        /// </summary>
        /// <param name="Notch_Gain">
        /// This control gets the analog notch filter and the postgain. Only with AC level measurements in the analog analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_GAIN_OFF    (0) - Off
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB0    (1) - 0 dB
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB12   (2) - 12 dB Auto
        /// RSUPV_ANALYZER_NOTCH_GAIN_DB30   (3) - 30 dB Auto
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerNotchGain(out int Notch_Gain)
        {
            int pInvokeResult = PInvoke.GetAnalyzerNotchGain(this._handle, out Notch_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh:FREQuency:MODE VALue | GENTrack
        /// </summary>
        /// <param name="Notch_Frequency">
        /// This control selects the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_FREQ_FIX    (0) - Value
        /// RSUPV_ANALYZER_NOTCH_FREQ_GENT   (1) - Gen Track
        /// 
        /// Default Value: RSUPV_ANALYZER_NOTCH_FREQ_FIX    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Value: If "Value" is selected, the center frequency last active is displayed. The user can enter the notch-filter center frequency.
        /// 
        /// (2) Gen Track: The notch-filter center frequency is adopted from the generator panel (if possible). If the generator frequency is changed, the notch frequency also changes. If an unsuitable generator signal (e.g. noise) is set, an error message is output and the center frequency last valid is retained.
        /// If the Low-Distortion Generator option is used, "Gen Track" should be avoided on account of the rigid coupling to the generator's nominal frequency, otherwise measuring inaccuracy
        /// resulting from slight frequency offset could occur.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerNotchFrequency(int Notch_Frequency)
        {
            int pInvokeResult = PInvoke.SetAnalyzerNotchFrequency(this._handle, Notch_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh:FREQuency:MODE?
        /// </summary>
        /// <param name="Notch_Frequency">
        /// This control gets the center frequency of the notch filter (notch frequency); only with activated analog notch filter.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOTCH_FREQ_FIX    (0) - Value
        /// RSUPV_ANALYZER_NOTCH_FREQ_GENT   (1) - Gen Track
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerNotchFrequency(out int Notch_Frequency)
        {
            int pInvokeResult = PInvoke.GetAnalyzerNotchFrequency(this._handle, out Notch_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the notch-filter center frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh:FREQuency
        /// </summary>
        /// <param name="Notch_Center_Frequency">
        /// This control sets the notch-filter center frequency.
        /// 
        /// Valid Range: 10.0 to 115.0e3 Hz
        /// 
        /// Default Value: 1000.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerNotchCenterFrequency(double Notch_Center_Frequency)
        {
            int pInvokeResult = PInvoke.SetAnalyzerNotchCenterFrequency(this._handle, Notch_Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the notch-filter center frequency.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:NOTCh:FREQuency?
        /// </summary>
        /// <param name="Notch_Center_Frequency">
        /// This control gets the notch-filter center frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerNotchCenterFrequency(out double Notch_Center_Frequency)
        {
            int pInvokeResult = PInvoke.GetAnalyzerNotchCenterFrequency(this._handle, out Notch_Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates DC suppression (in the digital analyzer only).
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DCSuppression OFF | ON
        /// </summary>
        /// <param name="DC_Suppression">
        /// This control activates/deactivates DC suppression function.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerDCSuppression(bool DC_Suppression)
        {
            int pInvokeResult = PInvoke.SetAnalyzerDCSuppression(this._handle, System.Convert.ToUInt16(DC_Suppression));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether is DC suppression activated or not (in the digital analyzer only).
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:DCSuppression?
        /// </summary>
        /// <param name="DC_Suppression">
        /// This control returns whether is DC suppression activated or not.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off 
        /// VI_TRUE  (1) - On 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerDCSuppression(out bool DC_Suppression)
        {
            ushort DC_SuppressionAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerDCSuppression(this._handle, out DC_SuppressionAsUShort);
            DC_Suppression = System.Convert.ToBoolean(DC_SuppressionAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the level weighting method for signal measurement and noise measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) Measurement mode 'Quasi Peak' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe RMS | QPE | PPEak | NPEak | PTOPeak | PABSolut
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the level weighting method for signal measurement and noise measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SN_MEAS_MODE_RMS    (0) - RMS
        /// RSUPV_ANALYZER_SN_MEAS_MODE_QPE    (1) - Quasi Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PPE    (2) - Pos Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_NPE    (3) - Neg Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PTOP   (4) - Peak to Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PABS   (5) - Abs Peak
        /// 
        /// Default Value: RSUPV_ANALYZER_SN_MEAS_MODE_RMS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) RMS: Both level measurements are carried out in the form of broadband RMS measurements.
        /// 
        /// (2) Quasi Peak: Both level measurements are carried out in the form of peak value measurements with the aid of a quasi peak rectifier, that is, the level measurement value tracks the signal trace using defined rise and fall times.
        /// 
        /// (3) Pos Peak: Both level measurements are carried out in the form of peak value measurements of the highest positive level.
        /// 
        /// (4) Neg Peak: Both the level measurements are carried out in the form of peak value measurements of the highest negative level
        /// 
        /// (5) Peak to Peak: Both level measurements are carried out in the form of peak to peak measurements
        /// 
        /// (6) Abs Peak: Both the level measurements are carried out in the form of peak value measurements of the absolute magnitude of the highest level.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSNMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSNMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level weighting method for signal measurement and noise measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control returns the level weighting method for signal measurement and noise measurement.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_SN_MEAS_MODE_RMS    (0) - RMS
        /// RSUPV_ANALYZER_SN_MEAS_MODE_QPE    (1) - Quasi Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PPE    (2) - Pos Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_NPE    (3) - Neg Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PTOP   (4) - Peak to Peak
        /// RSUPV_ANALYZER_SN_MEAS_MODE_PABS   (5) - Abs Peak
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSNMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSNMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement time for the purpose of adapting the measurement speed to the waveform or, in the case of single tone signals, to the signal frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE AFASt | AUTo | VALue | GENTrack | SFASt | FAST | SLOW | FIXed
        /// </summary>
        /// <param name="Meas_Time">
        /// This control selects the measurement time for the purpose of adapting the measurement speed to the waveform or, in the case of single tone signals, to the signal frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_GENT    (3) - Gen Track
        /// RSUPV_ANALYZER_MEAS_TIME_SFAS    (4) - Fix 50 ms
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fix 200 ms
        /// RSUPV_ANALYZER_MEAS_TIME_SLOW    (6) - Fix 1000 ms
        /// RSUPV_ANALYZER_MEAS_TIME_FIX     (7) - Fix 3 s
        /// 
        /// Default Value: RSUPV_ANALYZER_MEAS_TIME_AFAS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto Fast: For use with the "RMS" measurement mode only. Level measurements are performed as far as possible over whole AC periods. In the case of high frequencies the measurement time is extended so that a maximum algorithmic error of 1 % is not
        /// exceeded. In the case of low-noise DUTs the upward measurement time for noise measurement is limited to 100 ms (corresponding to 1 period at 10 Hz).
        /// 
        /// (2) Auto: For use with the "RMS" measurement mode only. Level measurements are performed as far as possible over whole AC periods. In the case of center or high frequencies the measurement time is extended so that a maximum algorithmic error of 0.05 % is not exceeded. In the case of low-noise DUTs the upward measurement time for noise measurement is limited to 200 ms (corresponding to 2 periods at 10 Hz).
        /// 
        /// (3) Value: Measurement is performed inside a predefined time which must be entered using a remote-control command SENSe[1]:VOLTage:APERture, or function Set Analyzer Level Meas Time Value.
        /// 
        /// (4) Gen Track: For use with the "RMS" measurement mode only. Level measurements are performed over at least 1 whole period of the generator signal. For this purpose the generator frequency is adapted as necessary to the sampling rate of the analyzer. In the case of high frequencies the measurement time is extended to several periods in order to increase the measurement accuracy.
        /// 
        /// (5) Fix 50 ms: For use with the peak measurement mode only.
        /// The measurement time is 50 ms.
        /// 
        /// (6) Fix 200 ms: For use with the peak measurement mode only.
        /// The measurement time is 200 ms.
        /// 
        /// (7) Fix 1000 ms: For use with the peak measurement mode only.
        /// The measurement time is 1000 ms.
        /// 
        /// (8) Fix 3 s: For use with the "Quasi Peak" measurement mode
        /// only. 3000 ms is the recommended measurement time for quasi peak measurements.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerSNMeasTime(int Meas_Time)
        {
            int pInvokeResult = PInvoke.SetAnalyzerSNMeasTime(this._handle, Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement time for the purpose of adapting the measurement speed to the waveform or, in the case of single tone signals, to the signal frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:APERture:MODE?
        /// </summary>
        /// <param name="Meas_Time">
        /// This control returns the measurement time for the purpose of adapting the measurement speed to the waveform or, in the case of single tone signals, to the signal frequency.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_MEAS_TIME_AFAS    (0) - Auto Fast
        /// RSUPV_ANALYZER_MEAS_TIME_AUTO    (1) - Auto
        /// RSUPV_ANALYZER_MEAS_TIME_VAL     (2) - Value
        /// RSUPV_ANALYZER_MEAS_TIME_GENT    (3) - Gen Track
        /// RSUPV_ANALYZER_MEAS_TIME_SFAS    (4) - Fix 50 ms
        /// RSUPV_ANALYZER_MEAS_TIME_FAS     (5) - Fix 200 ms
        /// RSUPV_ANALYZER_MEAS_TIME_SLOW    (6) - Fix 1000 ms
        /// RSUPV_ANALYZER_MEAS_TIME_FIX     (7) - Fix 3 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerSNMeasTime(out int Meas_Time)
        {
            int pInvokeResult = PInvoke.GetAnalyzerSNMeasTime(this._handle, out Meas_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement mode and thus implicitly the center frequencies and relative bandwidth of the bandpass filters.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe OCT1 | OCT3 | OCT6 | OCT12 | OCT24
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control selects the measurement mode and thus implicitly the center frequencies and relative bandwidth of the bandpass filters.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT1    (0) - Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT3    (1) - 1/3 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT6    (2) - 1/6 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT12   (3) - 1/12 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT24   (4) - 1/24 Octave
        /// 
        /// Default Value: RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT1    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Octave: The audio range is divided into octave bands.
        /// 
        /// (2) 1/3 Octave: The audio range is divided into third octave bands.
        /// 
        /// (3) 1/6 Octave: The audio range is divided into sixth octave bands.
        /// 
        /// (4) 1/12 Octave: The audio range is divided into twelfth octave bands.
        /// 
        /// (5) 1/24 Octave: The audio range is divided into twenty-fourth octave bands. Due to the extremely narrow bands, analysis is only possible with effect from 21.5 Hz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerNOCTMeasMode(int Meas_Mode)
        {
            int pInvokeResult = PInvoke.SetAnalyzerNOCTMeasMode(this._handle, Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement mode and thus implicitly the center frequencies and relative bandwidth of the bandpass filters.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:MMODe?
        /// </summary>
        /// <param name="Meas_Mode">
        /// This control returns the measurement mode and thus implicitly the center frequencies and relative bandwidth of the bandpass filters.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT1    (0) - Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT3    (1) - 1/3 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT6    (2) - 1/6 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT12   (3) - 1/12 Octave
        /// RSUPV_ANALYZER_NOCT_MEAS_MODE_OCT24   (4) - 1/24 Octave
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerNOCTMeasMode(out int Meas_Mode)
        {
            int pInvokeResult = PInvoke.GetAnalyzerNOCTMeasMode(this._handle, out Meas_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used for entering the drive, path and file name of the WAV file.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:FILE 'filename'
        /// </summary>
        /// <param name="Record_File">
        /// This control is used for entering the drive, path and file name of the WAV file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordFile(string Record_File)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordFile(this._handle, Record_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the recording time.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:LENGth
        /// </summary>
        /// <param name="Record_Length">
        /// This control sets the recording time.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The maximum recording time depends on the following parameters:
        /// - The amount of memory available on the proposed data medium; around 30 % of the current storage capacity can be used
        /// - The maximum size of a WAV file, being around 4 GByte (232-1 bytes for samples plus header information)
        /// - The number of channels to be acquired (1 or 2)
        /// - The sampling rate (in the analog analyzer this is determined from the selected bandwidth)
        /// - The word width (8, 16, or 32; always 32 in the analog analyzer)
        /// </param>
        /// <param name="Units">
        /// This control sets the units of record length entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S      (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordLength(double Record_Length, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordLength(this._handle, Record_Length, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the recording time.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:LENGth?
        /// </summary>
        /// <param name="Record_Length">
        /// This control gets the recording time.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of record length entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordLength(out double Record_Length, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordLength(this._handle, out Record_Length, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the file length in bytes.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:FLENgth?
        /// </summary>
        /// <param name="File_Length">
        /// This control gets the file length in bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordFileLength(out int File_Length)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordFileLength(this._handle, out File_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trigger source.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:SOURce CH1 | CH2 | MANual | GENBurst
        /// </summary>
        /// <param name="Trigger_Source">
        /// This control selects the trigger source.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REC_TRG_SRC_CH1  (0) - Channel 1
        /// RSUPV_ANALYZER_REC_TRG_SRC_CH2  (1) - Channel 2
        /// RSUPV_ANALYZER_REC_TRG_SRC_MAN  (2) - Manual
        /// RSUPV_ANALYZER_REC_TRG_SRC_GENB (3) - Gen Burst
        /// 
        /// Default Value: RSUPV_ANALYZER_REC_TRG_SRC_CH1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) Channel 1: For activating the Record trigger system; measurement channel 1 triggers recording. Only selectable if measurement channel 1 is switched on (or both channels). 
        /// 
        /// (2) Channel 2: For activating the Record trigger system; measurement channel 2 triggers recording. Only selectable if measurement channel 2 is switched on (or both channels).
        /// 
        /// (3) Manual: For deactivating the Record trigger system; recording starts immediately the Record function starts.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordTriggerSource(int Trigger_Source)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordTriggerSource(this._handle, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger source.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:SOURce?
        /// </summary>
        /// <param name="Trigger_Source">
        /// This control returns the trigger source.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REC_TRG_SRC_CH1  (0) - Channel 1
        /// RSUPV_ANALYZER_REC_TRG_SRC_CH2  (1) - Channel 2
        /// RSUPV_ANALYZER_REC_TRG_SRC_MAN  (2) - Manual
        /// RSUPV_ANALYZER_REC_TRG_SRC_GENB (3) - Gen Burst
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordTriggerSource(out int Trigger_Source)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordTriggerSource(this._handle, out Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the trigger threshold; appears only when the trigger system is active.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:LEVel
        /// </summary>
        /// <param name="Trigger_Level">
        /// This control sets the trigger threshold
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) Depending on the trigger slope, recording is triggered on exceeding this level threshold (Trigger Slope Rising) or dropping below it (Trigger Slope Falling).
        /// Once the Record function has started or (in triggered continuous recording mode) once the old recording has ended, a new recording is only alerted (armed) again if at least one sample is below the trigger threshold (for Trigger Slope Rising) or above the trigger threshold (for Trigger Slope Falling).
        /// </param>
        /// <param name="Units">
        /// This control sets the units of trigger level entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS     (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordTriggerLevel(double Trigger_Level, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordTriggerLevel(this._handle, Trigger_Level, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the trigger threshold.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:LEVel?
        /// </summary>
        /// <param name="Trigger_Level">
        /// This control gets the trigger threshold.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of trigger level entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordTriggerLevel(out double Trigger_Level, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordTriggerLevel(this._handle, out Trigger_Level, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects signal edge on which it is intended triggering shall take place (Trigger Slope); appears only when the trigger system is active.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:SLOPe RISing | FALLing
        /// </summary>
        /// <param name="Trigger_Slope">
        /// This control selects signal edge on which it is intended triggering shall take place (Trigger Slope); appears only when the trigger system is active.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REC_TRG_SLOPE_RIS    (0) - Rising
        /// RSUPV_ANALYZER_REC_TRG_SLOPE_FAL    (1) - Falling
        /// 
        /// Default Value: RSUPV_ANALYZER_REC_TRG_SLOPE_RIS    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Rising: Triggering takes place when the level on the measurement channel selected as the trigger source first exceeds the trigger threshold. Arming takes place again as soon as a level below the trigger threshold occurs. 
        /// 
        /// (2) Falling: Triggering takes place when the level on the measurement channel selected as the trigger source first falls below the trigger threshold. Arming takes place again as soon as a level above the trigger threshold occurs.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordTriggerSlope(int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordTriggerSlope(this._handle, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns signal edge on which it is intended triggering shall take place (Trigger Slope); appears only when the trigger system is active.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:SLOPe?
        /// </summary>
        /// <param name="Trigger_Slope">
        /// This control returns signal edge on which it is intended triggering shall take place (Trigger Slope).
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_REC_TRG_SLOPE_RIS    (0) - Rising
        /// RSUPV_ANALYZER_REC_TRG_SLOPE_FAL    (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordTriggerSlope(out int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordTriggerSlope(this._handle, out Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pretrigger interval in seconds.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:PRE
        /// </summary>
        /// <param name="Record_Pretrigger">
        /// This control sets the pretrigger interval in seconds.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) The pretrigger is deactivated by entering a pretrigger time of 0.0 s.
        /// 
        /// (2) When the waveform monitor is on, the pretrigger time is visible as a negative time segment of the time axis.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of record pretrigger entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S      (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerRecordPretrigger(double Record_Pretrigger, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerRecordPretrigger(this._handle, Record_Pretrigger, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the pretrigger interval in seconds.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:FUNCtion:RECord:TRIGger:PRE?
        /// </summary>
        /// <param name="Record_Pretrigger">
        /// This control gets the pretrigger interval in seconds.
        /// 
        /// Notes:
        /// 
        /// (1) The pretrigger is deactivated when a pretrigger time is 0.0 s.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of record pretrigger entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerRecordPretrigger(out double Record_Pretrigger, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerRecordPretrigger(this._handle, out Record_Pretrigger, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the protocol analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe8:FUNCtion ON | OFF
        /// </summary>
        /// <param name="Protocol_Analysis_State">
        /// This control sets the state of the protocol analyzer.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) On: The protocol analyzer is on. The channel-status information is read out from both channels at the end of a single measurement. When a continuous measurement is running the
        /// channels are read in sequence, that is, only one channel is updated each measurement cycle.
        /// 
        /// (2) Off: The protocol analyzer is off. This setting is recommended for increasing the measurement speed (e.g. in the case of sweeps or in remote-control mode), if protocol data is not currently needed. The current channel-status information is frozen when this feature is switched off.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisState(bool Protocol_Analysis_State)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisState(this._handle, System.Convert.ToUInt16(Protocol_Analysis_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the protocol analyzer.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe8:FUNCtion?
        /// </summary>
        /// <param name="Protocol_Analysis_State">
        /// This control gets the state of the protocol analyzer.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Notes:
        /// 
        /// (1) On: The protocol analyzer is on. The channel-status information is read out from both channels at the end of a single measurement. When a continuous measurement is running the
        /// channels are read in sequence, that is, only one channel is updated each measurement cycle.
        /// 
        /// (2) Off: The protocol analyzer is off. This setting is recommended for increasing the measurement speed (e.g. in the case of sweeps or in remote-control mode), if protocol data is not currently needed. The current channel-status information is frozen when this feature is switched off.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisState(out bool Protocol_Analysis_State)
        {
            ushort Protocol_Analysis_StateAsUShort;
            int pInvokeResult = PInvoke.GetProtocolAnalysisState(this._handle, out Protocol_Analysis_StateAsUShort);
            Protocol_Analysis_State = System.Convert.ToBoolean(Protocol_Analysis_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the protocol analyzer display.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:DISPlay ON | OFF
        /// </summary>
        /// <param name="Protocol_Analysis_DisplayState">
        /// This control sets the state of the protocol analyzer dsiplay.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisDisplayState(bool Protocol_Analysis_DisplayState)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisDisplayState(this._handle, System.Convert.ToUInt16(Protocol_Analysis_DisplayState));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the protocol analyzer display.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:DISPlay?
        /// </summary>
        /// <param name="Protocol_Analysis_DisplayState">
        /// This control gets the state of the protocol analyzer dsiplay.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisDisplayState(out bool Protocol_Analysis_DisplayState)
        {
            ushort Protocol_Analysis_DisplayStateAsUShort;
            int pInvokeResult = PInvoke.GetProtocolAnalysisDisplayState(this._handle, out Protocol_Analysis_DisplayStateAsUShort);
            Protocol_Analysis_DisplayState = System.Convert.ToBoolean(Protocol_Analysis_DisplayStateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the display format of the channel-status information.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:MODE AUTomatic | PROFessional | CONSumer
        /// </summary>
        /// <param name="Display_Mode">
        /// This control sets the display format of the channel-status information.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CODING_MODE_AUTO  (0) - Automatic
        /// RSUPV_PROTOCOL_CODING_MODE_PRO   (1) - Professional
        /// RSUPV_PROTOCOL_CODING_MODE_CONS  (2) - Customer
        /// 
        /// Default Value: RSUPV_PROTOCOL_CODING_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Automatic - The channel-status bits are interpreted in the format specified by bit #0. If this bit changes, the format is
        /// changed automatically to the correct one.
        /// 
        /// (2) Professional - The channel-status bits are always interpreted in Professional format regardless of the state of bit #0. This avoids the possibility that a bit error in bit #0
        /// might cause the display format to switch over.
        /// 
        /// (3) Consumer - The channel-status bits are always interpreted in Consumer format regardless of the state of bit #0. This avoids the possibility that a bit error in bit #0 might cause the display format to switch over.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisDisplayMode(int Display_Mode)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisDisplayMode(this._handle, Display_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the display format of the channel-status information.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:MODE?
        /// </summary>
        /// <param name="Display_Mode">
        /// This control gets the display format of the channel-status information.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CODING_MODE_AUTO  (0) - Automatic
        /// RSUPV_PROTOCOL_CODING_MODE_PRO   (1) - Professional
        /// RSUPV_PROTOCOL_CODING_MODE_CONS  (2) - Customer
        /// 
        /// Notes:
        /// 
        /// (1) Automatic - The channel-status bits are interpreted in the format specified by bit #0. If this bit changes, the format is
        /// changed automatically to the correct one.
        /// 
        /// (2) Professional - The channel-status bits are always interpreted in Professional format regardless of the state of bit #0. This avoids the possibility that a bit error in bit #0
        /// might cause the display format to switch over.
        /// 
        /// (3) Consumer - The channel-status bits are always interpreted in Consumer format regardless of the state of bit #0. This avoids the possibility that a bit error in bit #0 might cause the display format to switch over.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisDisplayMode(out int Display_Mode)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisDisplayMode(this._handle, out Display_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets when channel-status information is to
        /// be highlighted.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:HIGHlight NOTHing | FOUTput | BETWeen | FSTart
        /// </summary>
        /// <param name="Highlight">
        /// This control sets when channel-status information is to
        /// be highlighted.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_HIGHLIGHT_NOTHING  (0) - Nothing
        /// RSUPV_PROTOCOL_HIGHLIGHT_OUTPUT   (1) - From Output
        /// RSUPV_PROTOCOL_HIGHLIGHT_CHANNELS (2) - Between Channels
        /// RSUPV_PROTOCOL_HIGHLIGHT_CHANGES  (3) - Changes
        /// 
        /// Default Value: RSUPV_PROTOCOL_HIGHLIGHT_NOTHING  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Nothing - Channel-status information is not highlighted. 
        /// 
        /// (2) From Output - Changes compared to the channel-status information generated by the R&amp;S UPV generator are highlighted.
        /// This setting is only worthwhile when the internal generator is used and channel-status information is being generated.
        /// 
        /// (3) Between Channels - Differences between the two channels are highlighted. The differences are displayed on both channels.
        /// For the HDMI protocol analysis, the channels are always represented as identical, therefore, the setting is without effect in this case.
        /// 
        /// (4) Changes - This is for highlighting all changes since the start of the measurement, that is, since the START key was
        /// last used.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisHighlight(int Highlight)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisHighlight(this._handle, Highlight);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets when channel-status information is to
        /// be highlighted.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:HIGHlight?
        /// </summary>
        /// <param name="Highlight">
        /// This control gets when channel-status information is to
        /// be highlighted.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_HIGHLIGHT_NOTHING  (0) - Nothing
        /// RSUPV_PROTOCOL_HIGHLIGHT_OUTPUT   (1) - From Output
        /// RSUPV_PROTOCOL_HIGHLIGHT_CHANNELS (2) - Between Channels
        /// RSUPV_PROTOCOL_HIGHLIGHT_CHANGES  (3) - Changes
        /// 
        /// Notes:
        /// 
        /// (1) Nothing - Channel-status information is not highlighted. 
        /// 
        /// (2) From Output - Changes compared to the channel-status information generated by the R&amp;S UPV generator are highlighted.
        /// This setting is only worthwhile when the internal generator is used and channel-status information is being generated.
        /// 
        /// (3) Between Channels - Differences between the two channels are highlighted. The differences are displayed on both channels.
        /// 
        /// (4) Changes - This is for highlighting all changes since the start of the measurement, that is, since the START key was
        /// last used.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisHighlight(out int Highlight)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisHighlight(this._handle, out Highlight);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines how long a highlight should stay.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:PERSistence SHORt | LONG | FORever
        /// </summary>
        /// <param name="Persistence">
        /// This control defining how long a highlight should stay.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_PERSISTENCE_SHORT   (0) - Short
        /// RSUPV_PROTOCOL_PERSISTENCE_LONG    (1) - Long
        /// RSUPV_PROTOCOL_PERSISTENCE_FOREVER (2) - Forever
        /// 
        /// Default Value: RSUPV_PROTOCOL_PERSISTENCE_SHORT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Short - Highlighting is only brief and is reset after one
        /// second.
        /// 
        /// (2) Long - Highlighting is reset after five seconds.
        /// 
        /// (3) Forever - Highlighting is never reset.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisPersistence(int Persistence)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisPersistence(this._handle, Persistence);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns how long a highlight should stay.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:PERSistence?
        /// </summary>
        /// <param name="Persistence">
        /// This control returns how long a highlight should stay.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_PERSISTENCE_SHORT   (0) - Short
        /// RSUPV_PROTOCOL_PERSISTENCE_LONG    (1) - Long
        /// RSUPV_PROTOCOL_PERSISTENCE_FOREVER (2) - Forever
        /// 
        /// Notes:
        /// 
        /// (1) Short - Highlighting is only brief and is reset after one
        /// second.
        /// 
        /// (2) Long - Highlighting is reset after five seconds.
        /// 
        /// (3) Forever - Highlighting is never reset.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisPersistence(out int Persistence)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisPersistence(this._handle, out Persistence);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects how the channel-status information should appear.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:VIEW BINT | BIN
        /// </summary>
        /// <param name="View_Mode">
        /// This control selects how the channel-status information should appear.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PROT_VIEW_BINT    (0) - Binary+Text
        /// RSUPV_ANALYZER_PROT_VIEW_BIN     (1) - Binary
        /// 
        /// Default Value: RSUPV_ANALYZER_PROT_VIEW_BINT    (0)
        /// 
        /// Notes:
        /// 
        /// (1) Binary+Text: The bit fields are displayed both as binary values (MSB first) and in plain text.
        /// 
        /// (2) Binary: The bit fields are displayed only as binary values (MSB first). This reduces the space required by the "Dig Analyzer Protocol" window.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolAnalysisViewMode(int View_Mode)
        {
            int pInvokeResult = PInvoke.SetProtocolAnalysisViewMode(this._handle, View_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns how the channel-status information should appear.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:VIEW?
        /// </summary>
        /// <param name="View_Mode">
        /// This control returns how the channel-status information should appear.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_PROT_VIEW_BINT    (0) - Binary+Text
        /// RSUPV_ANALYZER_PROT_VIEW_BIN     (1) - Binary
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisViewMode(out int View_Mode)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisViewMode(this._handle, out View_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns decimal value for the byte selected in channel 1 or 2.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:CH&lt;1|2&gt;:BYTE&lt;0..4&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values:
        /// 1 or 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Byte_Value">
        /// This control sets the byte.
        /// 
        /// Valid Values:
        /// 0 to 4
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Value">
        /// This control gets the decimal value for the byte.
        /// 
        /// Valid Values:
        /// 0 to 255
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisChannelByte(int Channel, int Byte_Value, out int Value)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisChannelByte(this._handle, Channel, Byte_Value, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns protocol error code and message.
        /// 
        /// Remote-control command(s):
        /// SENSe8:PROTocol:ERRor?
        /// </summary>
        /// <param name="Error_Code">
        /// This control returns protocol error code. The individual errors are represented by means of bits in the integer value &lt;n&gt;:
        /// d0: PCM1
        /// d1: PCM2
        /// d2: PAR1
        /// d3: PAR2
        /// d4: LOC1
        /// d5: LOC2
        /// d6: CRC1
        /// d7: CRC2
        /// d8: INV1
        /// d9: INV2
        /// 
        /// Valid Values:
        /// 0 to 1023
        /// </param>
        /// <param name="Array_Size">
        /// This control defines size of allocated array for Error Message.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Error_Message">
        /// This control returns protocol error message.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolAnalysisError(out int Error_Code, int Array_Size, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.GetProtocolAnalysisError(this._handle, out Error_Code, Array_Size, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets option for "Active Color High" in text form.
        /// 
        /// Note(s):
        /// 
        /// (1) The trigger condition is considered met if the individual values of the color components all fall within the two limits:
        /// (Active_Color_Low.Red&lt;=Color.Red&lt;=Active_Color_High.Red)
        /// (Active_Color_Low.Green&lt;= Color.Green&lt;=Active_Color_High.Green)
        /// (Active_Color_Low.Blue&lt;=Color.Blue&lt;=Active_Color_High.Blue)
        /// 
        /// (2) The color can be configured using the color selection dialog. In the following parameter field, the colors are always shown as decimal equivalents of 12-bit long numeric values.
        /// With a lower color depth in the "Color Depth" selection field, the corresponding LSBs are not transmitted, but set to 0.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:COLor:THReshold:HIGH:STRing
        /// </summary>
        /// <param name="RGB_String">
        /// Entry option for "Active Color High" in text form. 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: (255,255,255)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLipSyncAnalysisActiveColorHigh(string RGB_String)
        {
            int pInvokeResult = PInvoke.SetLipSyncAnalysisActiveColorHigh(this._handle, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the option for "Active Color High" in text form.
        /// Note(s)
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:COLor:THReshold:HIGH:STRing?
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the RGB String control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="RGB_String">
        /// This control gets the option for "Active Color High" in text form.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLipSyncAnalysisActiveColorHigh(int Buffer_Size, System.Text.StringBuilder RGB_String)
        {
            int pInvokeResult = PInvoke.GetLipSyncAnalysisActiveColorHigh(this._handle, Buffer_Size, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the option for "Active Color Low" in text form.
        /// 
        /// Note(s):
        /// 
        /// (1) The trigger condition is considered met if the individual values of the color components all fall within the two limits:
        /// (Active_Color_Low.Red&lt;=Color.Red&lt;=Active_Color_High.Red)
        /// (Active_Color_Low.Green&lt;= Color.Green&lt;=Active_Color_High.Green)
        /// (Active_Color_Low.Blue&lt;=Color.Blue&lt;=Active_Color_High.Blue)
        /// 
        /// (2) The color can be configured using the color selection dialog. In the following parameter field, the colors are always shown as decimal equivalents of 12-bit long numeric values.
        /// With a lower color depth in the "Color Depth" selection field, the corresponding LSBs are not transmitted, but set to 0.
        /// 
        /// (3) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:COLor:THReshold:LOW:STRing
        /// </summary>
        /// <param name="RGB_String">
        /// Entry option for "Active Color Low" in text form. 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: (250,250,250)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLipSyncAnalysisActiveColorLow(string RGB_String)
        {
            int pInvokeResult = PInvoke.SetLipSyncAnalysisActiveColorLow(this._handle, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the option for "Active Color Low" in text form.
        /// 
        /// Note(s)
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:COLor:THReshold:LOW:STRing?
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the RGB String control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="RGB_String">
        /// This control gets the option for "Active Color Low" in text form.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLipSyncAnalysisActiveColorLow(int Buffer_Size, System.Text.StringBuilder RGB_String)
        {
            int pInvokeResult = PInvoke.GetLipSyncAnalysisActiveColorLow(this._handle, Buffer_Size, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the option for "Active Color" in text form.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SOURce:LIPSync:PATTern:AUDioactive:COLor:STRing
        /// </summary>
        /// <param name="RGB_String">
        /// Entry option for "Active Color" in text form. 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: (250,250,250)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLipSyncAnalysisActivePatternColor(string RGB_String)
        {
            int pInvokeResult = PInvoke.SetLipSyncAnalysisActivePatternColor(this._handle, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the option for "Active Color" in text form.
        /// 
        /// Note(s)
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SOURce:LIPSync:PATTern:AUDioactive:COLor:STRing?
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the RGB String control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="RGB_String">
        /// This control gets the option for "Active Color" in text form.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLipSyncAnalysisActivePatternColor(int Buffer_Size, System.Text.StringBuilder RGB_String)
        {
            int pInvokeResult = PInvoke.GetLipSyncAnalysisActivePatternColor(this._handle, Buffer_Size, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the option for "Active Color" in text form.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SOURce:LIPSync:PATTern:MUTE:COLor:STRing
        /// </summary>
        /// <param name="RGB_String">
        /// Entry option for "Active Color" in text form. 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: (250,250,250)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLipSyncAnalysisMutePatternColor(string RGB_String)
        {
            int pInvokeResult = PInvoke.SetLipSyncAnalysisMutePatternColor(this._handle, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the option for "Active Color" in text form.
        /// 
        /// Note(s)
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SOURce:LIPSync:PATTern:MUTE:COLor:STRing?
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the RGB String control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="RGB_String">
        /// This control gets the option for "Active Color" in text form.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLipSyncAnalysisMutePatternColor(int Buffer_Size, System.Text.StringBuilder RGB_String)
        {
            int pInvokeResult = PInvoke.GetLipSyncAnalysisMutePatternColor(this._handle, Buffer_Size, RGB_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the condition of the audio trigger for the Lip Sync measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) If the supplied audio data are processed in the device under test (e.g. filtering), a value greater than 0 should be defined. In such a case, the audio signal on the input side with defined signal and mute frames will no longer show any exact zero sample phases at the output of the device under test.
        /// 
        /// (2) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:AUDio:THReshold:LOW
        /// </summary>
        /// <param name="Low">
        /// This control sets the threshold condition of the audio trigger for the Lip Sync measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS     (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLipSyncAnalysisAudioTriggerThreshold(double Low, int Units)
        {
            int pInvokeResult = PInvoke.SetLipSyncAnalysisAudioTriggerThreshold(this._handle, Low, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the condition of the audio trigger for the Lip Sync measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) Available only with the R&amp;S UPP-K45 option (advanced audio/video measurements).
        /// 
        /// Remote-control command(s):
        /// SENSe:LIPSync:AUDio:THReshold:LOW?
        /// </summary>
        /// <param name="Low">
        /// This control returns the threshold condition of the audio trigger for the Lip Sync measurement.
        /// 
        /// 
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLipSyncAnalysisAudioTriggerThreshold(out double Low, out int Units)
        {
            int pInvokeResult = PInvoke.GetLipSyncAnalysisAudioTriggerThreshold(this._handle, out Low, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Low-Pass or High-Pass Filter.
        /// 
        /// Notes:
        /// 
        /// (1) Use this function when the 'Filter Type' is set to 'Low-Pass' or 'High-Pass'.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:ORDer N4 | N8
        /// SENSe:UFILter&lt;1..9&gt;:PASSb
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Order">
        /// This control selects the filter order.
        /// 
        /// Valid Values:
        /// RSUPV_USER_DEF_FILTER_ORDER_N4   (0) - 4
        /// RSUPV_USER_DEF_FILTER_ORDER_N8   (1) - 8
        /// 
        /// Default Value: RSUPV_USER_DEF_FILTER_ORDER_N8 (1)
        /// 
        /// </param>
        /// <param name="Passband">
        /// This control specifies the cutoff frequency (-0.1 dB) of the passband in the case of low-pass and high-pass filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <param name="Filter_Attenuation">
        /// This control sets the filter attenuation.
        /// 
        /// Valid Values: 3.0 dB to 120.0 dB
        /// 
        /// Default Value: 60.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureLPorHPFilter(int Filter_Number, int Filter_Order, double Passband, double Filter_Attenuation)
        {
            int pInvokeResult = PInvoke.ConfigureLPorHPFilter(this._handle, Filter_Number, Filter_Order, Passband, Filter_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Band-Pass or Band-Stop Filter.
        /// 
        /// Notes:
        /// 
        /// (1) Use this function when the 'Filter Type' is set to 'Band-Pass' or 'Band-Stop'.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:LOWer
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:UPPer
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passb_Low">
        /// This control specifies the lower cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Passb_Upp">
        /// This control specifies the upper cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Attenuation">
        /// This control sets the filter attenuation.
        /// 
        /// Valid Values: 3.0 dB to 120.0 dB
        /// 
        /// Default Value: 60.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureBPorBSFilter(int Filter_Number, double Passb_Low, double Passb_Upp, double Attenuation)
        {
            int pInvokeResult = PInvoke.ConfigureBPorBSFilter(this._handle, Filter_Number, Passb_Low, Passb_Upp, Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Notch Filter.
        /// 
        /// Notes:
        /// 
        /// (1) Use this function when the 'Filter Type' is set to 'Notch Filter'.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:CENTer
        /// SENSe:UFILter&lt;1..9&gt;:WIDTh
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Center_Freq">
        /// This control specifies the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Filter_Width">
        /// This control specifies the difference between the upper and
        /// lower cutoff frequency (-0.1 dB) of the passband for notch filter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Filter_Attenuation">
        /// This control sets the filter attenuation.
        /// 
        /// Valid Values: 3.0 dB to 120.0 dB
        /// 
        /// Default Value: 60.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureNotchFilter(int Filter_Number, double Center_Freq, double Filter_Width, double Filter_Attenuation)
        {
            int pInvokeResult = PInvoke.ConfigureNotchFilter(this._handle, Filter_Number, Center_Freq, Filter_Width, Filter_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Third Octave or Octave Filter.
        /// 
        /// Notes:
        /// 
        /// (1) Use this function when the 'Filter Type' is set to 'Third Octave' or 'Octave Filter'.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:CENTer
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Center_Freq">
        /// This control specifies the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Filter_Attenuation">
        /// This control sets the filter attenuation.
        /// 
        /// Valid Values: 3.0 dB to 120.0 dB
        /// 
        /// Default Value: 60.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureOctaveFilter(int Filter_Number, double Center_Freq, double Filter_Attenuation)
        {
            int pInvokeResult = PInvoke.ConfigureOctaveFilter(this._handle, Filter_Number, Center_Freq, Filter_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the File Defined Filter.
        /// 
        /// Notes:
        /// 
        /// (1) Use this function when the 'Filter Type' is set to 'File Defined Filter'.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:FNAMe 'filename'
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// 
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="File_Defined_Filter">
        /// This control selects a file with filter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Filter_Delay">
        /// This cotrol sets the filter delay.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureFileDefinedFilter(int Filter_Number, string File_Defined_Filter, double Filter_Delay)
        {
            int pInvokeResult = PInvoke.ConfigureFileDefinedFilter(this._handle, Filter_Number, File_Defined_Filter, Filter_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter type for Filter 1 to 9.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt; LPASs | HPASs | BPASs | BSTOp | NOTCh | TOCTave | OCTave | FILE
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Type">
        /// This control selects the filter type.
        /// 
        /// Valid Values:
        /// RSUPV_USER_DEF_FILTER_LPAS    (0) - Low Pass
        /// RSUPV_USER_DEF_FILTER_HPAS    (1) - High Pass
        /// RSUPV_USER_DEF_FILTER_BPAS    (2) - Band Pass
        /// RSUPV_USER_DEF_FILTER_BSTO    (3) - Band Stop
        /// RSUPV_USER_DEF_FILTER_NOTC    (4) - Notch Filter
        /// RSUPV_USER_DEF_FILTER_TOCT    (5) - 1/3 Oct Filter
        /// RSUPV_USER_DEF_FILTER_OCT     (6) - Octave Filter
        /// RSUPV_USER_DEF_FILTER_FILE    (7) - File Def Filter
        /// 
        /// Default Value: RSUPV_USER_DEF_FILTER_LPAS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterType(int Filter_Number, int Filter_Type)
        {
            int pInvokeResult = PInvoke.SetFilterType(this._handle, Filter_Number, Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the filter type for Filter 1 to 9.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Type">
        /// This control gets the filter type.
        /// 
        /// Valid Values:
        /// RSUPV_USER_DEF_FILTER_LPAS    (0) - Low Pass
        /// RSUPV_USER_DEF_FILTER_HPAS    (1) - High Pass
        /// RSUPV_USER_DEF_FILTER_BPAS    (2) - Band Pass
        /// RSUPV_USER_DEF_FILTER_BSTO    (3) - Band Stop
        /// RSUPV_USER_DEF_FILTER_NOTC    (4) - Notch Filter
        /// RSUPV_USER_DEF_FILTER_TOCT    (5) - 1/3 Oct Filter
        /// RSUPV_USER_DEF_FILTER_OCT     (6) - Octave Filter
        /// RSUPV_USER_DEF_FILTER_FILE    (7) - File Def Filter
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterType(int Filter_Number, out int Filter_Type)
        {
            int pInvokeResult = PInvoke.GetFilterType(this._handle, Filter_Number, out Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the desired filter attenuation of the stopband in dB.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Attenuation">
        /// This control sets the filter attenuation.
        /// 
        /// Valid Values: 3.0 dB to 120.0 dB
        /// 
        /// Default Value: 60.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterAttenuation(int Filter_Number, double Filter_Attenuation)
        {
            int pInvokeResult = PInvoke.SetFilterAttenuation(this._handle, Filter_Number, Filter_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the desired filter attenuation of the stopband in dB.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:ATTenuation?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Attenuation">
        /// This control gets the filter attenuation.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterAttenuation(int Filter_Number, out double Filter_Attenuation)
        {
            int pInvokeResult = PInvoke.GetFilterAttenuation(this._handle, Filter_Number, out Filter_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifeis the filter order.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:ORDer N4 | N8
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Order">
        /// This control selects the filter order.
        /// 
        /// Valid Values:
        /// RSUPV_USER_DEF_FILTER_ORDER_N4   (0) - 4
        /// RSUPV_USER_DEF_FILTER_ORDER_N8   (1) - 8
        /// 
        /// Default Value: RSUPV_USER_DEF_FILTER_ORDER_N8 (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterOrder(int Filter_Number, int Filter_Order)
        {
            int pInvokeResult = PInvoke.SetFilterOrder(this._handle, Filter_Number, Filter_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the filter order.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:ORDer?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Order">
        /// This control gets the filter order.
        /// 
        /// Valid Values:
        /// RSUPV_USER_DEF_FILTER_ORDER_N4   (0) - 4
        /// RSUPV_USER_DEF_FILTER_ORDER_N8   (1) - 8
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterOrder(int Filter_Number, out int Filter_Order)
        {
            int pInvokeResult = PInvoke.GetFilterOrder(this._handle, Filter_Number, out Filter_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the cutoff frequency (-0.1 dB) of the passband in the case of low-pass and high-pass filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband">
        /// This control specifies the cutoff frequency (-0.1 dB) of the passband in the case of low-pass and high-pass filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterPassband(int Filter_Number, double Passband)
        {
            int pInvokeResult = PInvoke.SetFilterPassband(this._handle, Filter_Number, Passband);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the cutoff frequency (-0.1 dB) of the passband in the case of low-pass and high-pass filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband">
        /// This control gets the cutoff frequency (-0.1 dB) of the passband in the case of low-pass and high-pass filters.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterPassband(int Filter_Number, out double Passband)
        {
            int pInvokeResult = PInvoke.GetFilterPassband(this._handle, Filter_Number, out Passband);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the cutoff frequency of the stopband in the case of low-pass and high-pass filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:STOPb?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stopband">
        /// This control displays the cutoff frequency of the stopband in the case of low-pass and high-pass filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterStopband(int Filter_Number, out double Stopband)
        {
            int pInvokeResult = PInvoke.GetFilterStopband(this._handle, Filter_Number, out Stopband);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the lower cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:LOWer
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband_Low">
        /// This control specifies the lower cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterPassbandLow(int Filter_Number, double Passband_Low)
        {
            int pInvokeResult = PInvoke.SetFilterPassbandLow(this._handle, Filter_Number, Passband_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the lower cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:LOWer?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband_Low">
        /// This control gets the lower cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterPassbandLow(int Filter_Number, out double Passband_Low)
        {
            int pInvokeResult = PInvoke.GetFilterPassbandLow(this._handle, Filter_Number, out Passband_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the upper cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:UPPer
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband_Upp">
        /// This control specifies the upper cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterPassbandUpp(int Filter_Number, double Passband_Upp)
        {
            int pInvokeResult = PInvoke.SetFilterPassbandUpp(this._handle, Filter_Number, Passband_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the upper cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:PASSb:UPPer
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Passband_Upp">
        /// This control gets the upper cutoff frequency (-0.1 dB) of the passband in the case of bandpass and band-stop filters.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterPassbandUpp(int Filter_Number, out double Passband_Upp)
        {
            int pInvokeResult = PInvoke.GetFilterPassbandUpp(this._handle, Filter_Number, out Passband_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the lower cutoff frequency of the stopband in the case of bandpass and band-stop filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        ///  
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:STOPb:LOWer?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stopband_Low">
        /// This control displays the lower cutoff frequency of the stopband in the case of bandpass and band-stop filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterStopbandLow(int Filter_Number, out double Stopband_Low)
        {
            int pInvokeResult = PInvoke.GetFilterStopbandLow(this._handle, Filter_Number, out Stopband_Low);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the upper cutoff frequency of the stopband in the case of bandpass and band-stop filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:STOPb:UPPer?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stopband_Upp">
        /// This control displays the upper cutoff frequency of the stopband in the case of bandpass and band-stop filters; the cutoff frequency is derived from the selected passband and the stopband attenuation. This value is only updated after the filter is activated.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterStopbandUpp(int Filter_Number, out double Stopband_Upp)
        {
            int pInvokeResult = PInvoke.GetFilterStopbandUpp(this._handle, Filter_Number, out Stopband_Upp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:CENTer
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Freq">
        /// This control specifies the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// Valid Values: 1.0 to 1.0e+6 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterCenterFreq(int Filter_Number, double Center_Freq)
        {
            int pInvokeResult = PInvoke.SetFilterCenterFreq(this._handle, Filter_Number, Center_Freq);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:CENTer?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Freq">
        /// This control gets the center frequency. The notch filter has a transmission zero at the center frequency; the attenuation at this frequency is considerably greater than the specified stopband attenuation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterCenterFreq(int Filter_Number, out double Center_Freq)
        {
            int pInvokeResult = PInvoke.GetFilterCenterFreq(this._handle, Filter_Number, out Center_Freq);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the difference between the upper and
        /// lower cutoff frequency (-0.1 dB) of the passband for notch filter.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:WIDTh
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Width">
        /// This control specifies the difference between the upper and
        /// lower cutoff frequency (-0.1 dB) of the passband for notch filter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterWidth(int Filter_Number, double Filter_Width)
        {
            int pInvokeResult = PInvoke.SetFilterWidth(this._handle, Filter_Number, Filter_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the difference between the upper and
        /// lower cutoff frequency (-0.1 dB) of the passband for notch filter.
        /// 
        /// Remote-control command(s):
        /// SENSe:UFILter&lt;1..9&gt;:WIDTh?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Width">
        /// This control gets the difference between the upper and
        /// lower cutoff frequency (-0.1 dB) of the passband for notch filter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterWidth(int Filter_Number, out double Filter_Width)
        {
            int pInvokeResult = PInvoke.GetFilterWidth(this._handle, Filter_Number, out Filter_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the filter delay.
        /// 
        /// Notes:
        /// 
        /// (1) With file-defined filters, a settling time is calculated and displayed after the coefficients are read in. This settling time can then be changed manually.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay
        /// 
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Delay">
        /// This cotrol sets the filter delay.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterDelay(int Filter_Number, double Filter_Delay)
        {
            int pInvokeResult = PInvoke.SetFilterDelay(this._handle, Filter_Number, Filter_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the filter delay.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:DELay?
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Delay">
        /// This cotrol gets the filter delay.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFilterDelay(int Filter_Number, out double Filter_Delay)
        {
            int pInvokeResult = PInvoke.GetFilterDelay(this._handle, Filter_Number, out Filter_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads in a filter from a file. Two file formats are supported in which the filter is described either by means of the coefficients of the transmission function (*.coe) or using the poles and zeros (*.zpz or *.npz) on the Z level.
        /// 
        /// Remote-control command(s):
        /// SENSe[1]:UFILter&lt;1..9&gt;:FNAMe 'filename'
        /// </summary>
        /// <param name="Filter_Number">
        /// This control selects the filter.
        /// 
        /// Valid Values: 1 to 9
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="File_Def_Filter">
        /// This control selects a file with filter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFilterFileDefined(int Filter_Number, string File_Def_Filter)
        {
            int pInvokeResult = PInvoke.SetFilterFileDefined(this._handle, Filter_Number, File_Def_Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the audio monitorin function.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker ON | OFF
        /// AUXiliaries:SPEaker:SOURce INPut | MONitor | FUNCtion | GENerator
        /// AUXiliaries:SPEaker:CHANnel STEReo | CH1 | CH2
        /// AUXiliaries:SPEaker:VOLume
        /// AUXiliaries:PHONe SPKConform | PERManent
        /// </summary>
        /// <param name="Signal_Source">
        /// This control selects the audio monitoring point along the signal path.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_SIGNAL_SOURCE_INP    (0) - Input
        /// RSUPV_AUX_SIGNAL_SOURCE_MON    (1) - Monitor
        /// RSUPV_AUX_SIGNAL_SOURCE_FUNC   (2) - Function
        /// RSUPV_AUX_SIGNAL_SOURCE_GEN    (3) - Generator
        /// RSUPV_AUX_SIGNAL_SOURCE_DC     (4) - DC
        /// 
        /// Default Value: RSUPV_AUX_SIGNAL_SOURCE_INP (0)
        /// 
        /// Notes:
        /// 
        /// (1) Input: Audio monitoring of a signal applied at the analyzer inputs. The input signal of the activated analyzer is automatically switched to the audio monitoring output.
        /// 
        /// (2) Monitor: Audio monitoring downstream of the digital prefilter.
        /// 
        /// (3) Function: The input signal can undergo digital post-processing (processing type depends on the set measurement function) before it is listened to by the user. 
        /// 
        /// (4) Generator: The digital data signal from the DSP for the currently activated generator is fed to the audio monitoring output via the audio monitoring D/A converter. If the analog generator is being monitored, the audio monitoring D/A converter is actuated using the same digital signals as those fed to the main D/A converter of the analog generator. Audio monitoring is not possible with the generator functions "DIM" or "Sine" with activated Low Dist. After one of these functions has been switched on, the following message will appear: "Speaker not available for generator function DIM or Low Dist activated!"
        /// 
        /// (5) DC: Starting with serial numbers 120100, 140100, 180100, the supply of external instruments of the R&amp;S UPP can be handled by outputting two DC voltages in the range from -5 V to +5 V which can be set independent of each other. In this case, the two monitor outputs can each output up to 50 mA.
        /// 
        /// </param>
        /// <param name="Monitoring_Channel">
        /// This control selects the audio monitoring channel.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_CHANNEL_STER   (0) - Both
        /// RSUPV_AUX_CHANNEL_CH1    (1) - Channel 1
        /// RSUPV_AUX_CHANNEL_CH2    (2) - Channel 2
        /// 
        /// Default Value: RSUPV_AUX_CHANNEL_STER (0)
        /// 
        /// Notes:
        /// 
        /// (1) Both: The audio monitoring signal is output on both channels at the audio monitoring output. The internal loudspeaker outputs the signal from both channels.
        /// 
        /// (2) Channel 1: Only the signal applied and analyzed via Channel 1 or generated internally is output at the audio monitoring output.
        /// 
        /// (3) Channel 2: Only the signal applied and analyzed via Channel 2 or generated internally is output at the audio monitoring output.
        /// 
        /// </param>
        /// <param name="Speaker">
        /// This control activates/deactivates the audio monitoring function.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Phone_Output__reserved_">
        /// This control selects the phone output.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_PHONE_OUT_SPKC    (0) - = Speaker
        /// RSUPV_AUX_PHONE_OUT_PERM    (1) - Permanent
        /// 
        /// Default Value: RSUPV_AUX_PHONE_OUT_SPKC (0)
        /// 
        /// Note(s):
        /// 
        /// (1) This control is reserved for future use and is ignored.
        /// </param>
        /// <param name="Volume">
        /// This control sets the volume.
        /// 
        /// Valid Values: -120.0 to 0.0 dB
        /// 
        /// Default Value: -30.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureAudioMonitoring(int Signal_Source, short Monitoring_Channel, bool Speaker, int Phone_Output__reserved_, double Volume)
        {
            int pInvokeResult = PInvoke.ConfigureAudioMonitoring(this._handle, Signal_Source, Monitoring_Channel, System.Convert.ToUInt16(Speaker), Phone_Output__reserved_, Volume);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the audio monitoring function.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:AUDMonitor ON | OFF
        /// </summary>
        /// <param name="Audio_Monitor">
        /// This control activates/deactivates the audio monitoring function.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxAudioMonitor(bool Audio_Monitor)
        {
            int pInvokeResult = PInvoke.SetAuxAudioMonitor(this._handle, System.Convert.ToUInt16(Audio_Monitor));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the audio monitoring state.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:AUDMonitor?
        /// </summary>
        /// <param name="Audio_Monitor">
        /// This control gets the audio monitoring state.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxAudioMonitor(out bool Audio_Monitor)
        {
            ushort Audio_MonitorAsUShort;
            int pInvokeResult = PInvoke.GetAuxAudioMonitor(this._handle, out Audio_MonitorAsUShort);
            Audio_Monitor = System.Convert.ToBoolean(Audio_MonitorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the internal loudspeaker playback.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker ON | OFF
        /// </summary>
        /// <param name="Speaker">
        /// This control sets the internal loudspeaker playback.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxSpeaker(bool Speaker)
        {
            int pInvokeResult = PInvoke.SetAuxSpeaker(this._handle, System.Convert.ToUInt16(Speaker));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the internal loudspeaker playback.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker?
        /// </summary>
        /// <param name="Speaker">
        /// This control gets the internal loudspeaker playback.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxSpeaker(out bool Speaker)
        {
            ushort SpeakerAsUShort;
            int pInvokeResult = PInvoke.GetAuxSpeaker(this._handle, out SpeakerAsUShort);
            Speaker = System.Convert.ToBoolean(SpeakerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the monitored channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:MONitor&lt;n3&gt; OFF | CH1 | CH2 | CH3 | CH4 | CH5 | CH6 | CH7 | CH8 | CH9 |CH10 | CH11 | CH12 | CH13 | CH14 | CH15 | CH16
        /// </summary>
        /// <param name="Monitor_Number">
        /// This control selects the monitor.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Monitored_Channel">
        /// This control selects the channel for the selected monitor.
        /// 
        /// Valid Values:
        /// 0 to 16
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Value 0 = OFF
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxSpeakerMonitor(int Monitor_Number, int Monitored_Channel)
        {
            int pInvokeResult = PInvoke.SetAuxSpeakerMonitor(this._handle, Monitor_Number, Monitored_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected monitored channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:MONitor&lt;n3&gt;?
        /// 
        /// </summary>
        /// <param name="Monitor_Number">
        /// This control returns the selected monitor.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Monitored_Channel">
        /// This control returns the selected channel for the selected monitor.
        /// 
        /// Valid Values:
        /// 0 to 16
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxSpeakerMonitor(int Monitor_Number, out int Monitored_Channel)
        {
            int pInvokeResult = PInvoke.GetAuxSpeakerMonitor(this._handle, Monitor_Number, out Monitored_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the front phone jack.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHONe ON | OFF
        /// </summary>
        /// <param name="Phone_State">
        /// This control activates/deactivates the front phone jack.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxPhoneState(bool Phone_State)
        {
            int pInvokeResult = PInvoke.SetAuxPhoneState(this._handle, System.Convert.ToUInt16(Phone_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the front phone jack.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHONe?
        /// </summary>
        /// <param name="Phone_State">
        /// This control returns the state of the front phone jack.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxPhoneState(out bool Phone_State)
        {
            ushort Phone_StateAsUShort;
            int pInvokeResult = PInvoke.GetAuxPhoneState(this._handle, out Phone_StateAsUShort);
            Phone_State = System.Convert.ToBoolean(Phone_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the Phone Out and Anlg Aux Out.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHPermanent ON | OFF
        /// </summary>
        /// <param name="Aux_Phone_Permanent_State">
        /// This control activates/deactivates the Phone Out and Anlg Aux Out.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxPhonePermanentState(bool Aux_Phone_Permanent_State)
        {
            int pInvokeResult = PInvoke.SetAuxPhonePermanentState(this._handle, System.Convert.ToUInt16(Aux_Phone_Permanent_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Phone Out and Anlg Aux Out.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHPermanent?
        /// </summary>
        /// <param name="Aux_Phone_Permanent_State">
        /// This control returns the state of the Phone Out and Anlg Aux Out.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxPhonePermanentState(out bool Aux_Phone_Permanent_State)
        {
            ushort Aux_Phone_Permanent_StateAsUShort;
            int pInvokeResult = PInvoke.GetAuxPhonePermanentState(this._handle, out Aux_Phone_Permanent_StateAsUShort);
            Aux_Phone_Permanent_State = System.Convert.ToBoolean(Aux_Phone_Permanent_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the phone output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is no longer available.
        /// 
        /// (2) Use the function Set Aux Phone State (rsupv_SetAuxPhoneState) which uses the same command.
        /// 
        /// (3) Also try using the function Set Aux Phone Permanent State (rsupv_SetAuxPhonePermanentState).
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHONe SPKConform | PERManent
        /// </summary>
        /// <param name="Phone_Out">
        /// This control selects the phone output.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_PHONE_OUT_SPKC    (0) - = Speaker
        /// RSUPV_AUX_PHONE_OUT_PERM    (1) - Permanent
        /// 
        /// Default Value: RSUPV_AUX_PHONE_OUT_SPKC (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxPhoneOutput(int Phone_Out)
        {
            int pInvokeResult = PInvoke.SetAuxPhoneOutput(this._handle, Phone_Out);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the phone output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is no longer available.
        /// 
        /// (2) Use the function Get Aux Phone State (rsupv_GetAuxPhoneState) which uses the same command.
        /// 
        /// (3) Also try using the function Get Aux Phone Permanent State (rsupv_GetAuxPhonePermanentState).
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:PHONe?
        /// 
        /// </summary>
        /// <param name="Phone_Output">
        /// This control gets the phone output.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_PHONE_OUT_SPKC    (0) - = Speaker
        /// RSUPV_AUX_PHONE_OUT_PERM    (1) - Permanent
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxPhoneOutput(out int Phone_Output)
        {
            int pInvokeResult = PInvoke.GetAuxPhoneOutput(this._handle, out Phone_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the audio monitoring point along the signal path.
        /// 
        /// Note(s):
        /// 
        /// (1) Signal sources 'Monitor' and 'Generator' are not available in UPP.
        /// 
        /// (1) Signal sources 'DC' is not available in UPV.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:SOURce INPut | MONitor | FUNCtion | GENerator | DC
        /// </summary>
        /// <param name="Signal_Source">
        /// This control selects the audio monitoring point along the signal path.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_SIGNAL_SOURCE_INP    (0) - Input
        /// RSUPV_AUX_SIGNAL_SOURCE_MON    (1) - Monitor
        /// RSUPV_AUX_SIGNAL_SOURCE_FUNC   (2) - Function
        /// RSUPV_AUX_SIGNAL_SOURCE_GEN    (3) - Generator
        /// RSUPV_AUX_SIGNAL_SOURCE_DC     (4) - DC
        /// 
        /// Default Value: RSUPV_AUX_SIGNAL_SOURCE_INP (0)
        /// 
        /// Notes:
        /// 
        /// (1) Input: Audio monitoring of a signal applied at the analyzer inputs. The input signal of the activated analyzer is automatically switched to the audio monitoring output.
        /// 
        /// (2) Monitor: Audio monitoring downstream of the digital prefilter.
        /// 
        /// (3) Function: The input signal can undergo digital post-processing (processing type depends on the set measurement function) before it is listened to by the user. 
        /// 
        /// (4) Generator: The digital data signal from the DSP for the currently activated generator is fed to the audio monitoring output via the audio monitoring D/A converter. If the analog generator is being monitored, the audio monitoring D/A converter is actuated using the same digital signals as those fed to the main D/A converter of the analog generator. Audio monitoring is not possible with the generator functions "DIM" or "Sine" with activated Low Dist. After one of these functions has been switched on, the following message will appear: "Speaker not available for generator function DIM or Low Dist activated!"
        /// 
        /// (5) DC: Starting with serial numbers 120100, 140100, 180100, the supply of external instruments of the R&amp;S UPP can be handled by outputting two DC voltages in the range from -5 V to +5 V which can be set independent of each other. In this case, the two monitor outputs can each output up to 50 mA.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxSignalSource(int Signal_Source)
        {
            int pInvokeResult = PInvoke.SetAuxSignalSource(this._handle, Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the audio monitoring point along the signal path.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:SOURce?
        /// </summary>
        /// <param name="Signal_Source">
        /// This control gets the audio monitoring point along the signal path.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_SIGNAL_SOURCE_INP    (0) - Input
        /// RSUPV_AUX_SIGNAL_SOURCE_MON    (1) - Monitor
        /// RSUPV_AUX_SIGNAL_SOURCE_FUNC   (2) - Function
        /// RSUPV_AUX_SIGNAL_SOURCE_GEN    (3) - Generator
        /// RSUPV_AUX_SIGNAL_SOURCE_DC     (4) - DC
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxSignalSource(out int Signal_Source)
        {
            int pInvokeResult = PInvoke.GetAuxSignalSource(this._handle, out Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the audio monitoring channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:CHANnel STEReo | CH1 | CH2
        /// </summary>
        /// <param name="Monitoring_Channel">
        /// This control selects the audio monitoring channel.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_CHANNEL_STER   (0) - Both
        /// RSUPV_AUX_CHANNEL_CH1    (1) - Channel 1
        /// RSUPV_AUX_CHANNEL_CH2    (2) - Channel 2
        /// 
        /// Default Value: RSUPV_AUX_CHANNEL_STER (0)
        /// 
        /// Notes:
        /// 
        /// (1) Both: The audio monitoring signal is output on both channels at the audio monitoring output. The internal loudspeaker outputs the signal from both channels.
        /// 
        /// (2) Channel 1: Only the signal applied and analyzed via Channel 1 or generated internally is output at the audio monitoring output.
        /// 
        /// (3) Channel 2: Only the signal applied and analyzed via Channel 2 or generated internally is output at the audio monitoring output.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxMonitoringChannel(int Monitoring_Channel)
        {
            int pInvokeResult = PInvoke.SetAuxMonitoringChannel(this._handle, Monitoring_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the audio monitoring channel.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:CHANnel?
        /// </summary>
        /// <param name="Monitoring_Channel">
        /// This control gets the audio monitoring channel.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_CHANNEL_STER   (0) - Both
        /// RSUPV_AUX_CHANNEL_CH1    (1) - Channel 1
        /// RSUPV_AUX_CHANNEL_CH2    (2) - Channel 2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxMonitoringChannel(out int Monitoring_Channel)
        {
            int pInvokeResult = PInvoke.GetAuxMonitoringChannel(this._handle, out Monitoring_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the volume.
        /// 
        /// Notes:
        /// 
        /// Setting range from 0 dB (highest volume or output voltage) to -120 dB (lowest volume or output voltage). This setting affects all three internal signal paths: the internal loudspeaker, the jack socket on the front panel of the instrument, and the BNC socket (Anlg Aux Out) at the rear of the instrument.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:VOLume
        /// </summary>
        /// <param name="Volume">
        /// This control sets the volume.
        /// 
        /// Valid Values: -120.0 to 0.0 dB
        /// 
        /// Default Value: -30.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxVolume(double Volume)
        {
            int pInvokeResult = PInvoke.SetAuxVolume(this._handle, Volume);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the volume.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:SPEaker:VOLume?
        /// </summary>
        /// <param name="Volume">
        /// This control gets the volume.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxVolume(out double Volume)
        {
            int pInvokeResult = PInvoke.GetAuxVolume(this._handle, out Volume);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the auxiliary BNC output at the rear of the R&amp;S UPV.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:AAUXout DC | AUDM1
        /// </summary>
        /// <param name="Analog_Aux_Output">
        /// This control selects the auxiliary BNC output at the rear of the R&amp;S UPV.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_ANLG_OUT_DC    (0) - DC
        /// RSUPV_AUX_ANLG_OUT_AUDM1 (1) - AudioMon Ch1
        /// 
        /// Default Value: RSUPV_AUX_ANLG_OUT_DC (0)
        /// 
        /// Notes:
        /// 
        /// (1) DC: The auxiliary output supplies DC voltage to the BNC socket at the rear of the instrument. This voltage can be used to power an external DUT (Device Under Test, e.g. a hearing aid).
        /// 
        /// (2) AudioMon Ch1: The left-hand channel of the audio monitoring signal is output at the rear BNC socket.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxAnalogOutput(int Analog_Aux_Output)
        {
            int pInvokeResult = PInvoke.SetAuxAnalogOutput(this._handle, Analog_Aux_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the auxiliary BNC output at the rear of the R&amp;S UPV.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:AAUXout?
        /// </summary>
        /// <param name="Analog_Aux_Output">
        /// This control gets the auxiliary BNC output at the rear of the R&amp;S UPV.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_ANLG_OUT_DC    (0) - DC
        /// RSUPV_AUX_ANLG_OUT_AUDM1 (1) - AudioMon Ch1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxAnalogOutput(out int Analog_Aux_Output)
        {
            int pInvokeResult = PInvoke.GetAuxAnalogOutput(this._handle, out Analog_Aux_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the magnitude of the DC voltage level at the rear BNC socket.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:DCValue
        /// </summary>
        /// <param name="DC_Value">
        /// This function sets the magnitude of the DC voltage level at the rear BNC socket.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control sets the units of DC Value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxDCVoltage(double DC_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetAuxDCVoltage(this._handle, DC_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the magnitude of the DC voltage level at the rear BNC socket.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:DCValue?
        /// </summary>
        /// <param name="DC_Value">
        /// This function gets the magnitude of the DC voltage level at the rear BNC socket.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the units of DC Value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxDCVoltage(out double DC_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetAuxDCVoltage(this._handle, out DC_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the aux trigger input.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:ENABle ON | OFF
        /// </summary>
        /// <param name="Trigger_Input">
        /// This control sets the state of the aux trigger input.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerInputEnable(bool Trigger_Input)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerInputEnable(this._handle, System.Convert.ToUInt16(Trigger_Input));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the aux trigger input.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:ENABle?
        /// </summary>
        /// <param name="Trigger_Input">
        /// This control gets the state of the aux trigger input.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerInputEnable(out bool Trigger_Input)
        {
            ushort Trigger_InputAsUShort;
            int pInvokeResult = PInvoke.GetAuxTriggerInputEnable(this._handle, out Trigger_InputAsUShort);
            Trigger_Input = System.Convert.ToBoolean(Trigger_InputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the aux trigger input mode.
        /// 
        /// Note(s):
        /// 
        /// (1) The presence of a pulse on the "Trigger In" BNC connector can trigger various events.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:MODE MSINgle | MCONtstop | TRIGinptest
        /// </summary>
        /// <param name="Trigger_Input_Mode">
        /// This control sets the state of the aux trigger input.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_MODE_MSIN  (0) - Meas Single
        /// RSUPV_AUX_TRG_INPUT_MODE_MCON  (1) - Meas Cont/Stop
        /// RSUPV_AUX_TRG_INPUT_MODE_TRIG  (2) - Trig Inp Test
        /// 
        /// Default Value: RSUPV_AUX_TRG_INPUT_MODE_MSIN  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Meas Single: The trigger pulse launches a single measurement. The ?START?, ?SINGLE? and ?STOP/CONT? keys on the front panel are disabled.
        /// 
        /// (2) Meas Cont/Stop: The trigger pulse launches a continuous measurement. Due to the toggle function the measurement can be started or stopped while running. The ?START?, ?SINGLE? and ?STOP/CONT? keys on the front panel are disabled.
        /// 
        /// (3) Trig Inp Test: All LEDs light up according to the voltage that is present (TTL level).
        /// Low  = Off
        /// High = On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerInputMode(int Trigger_Input_Mode)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerInputMode(this._handle, Trigger_Input_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the aux trigger input mode.
        /// 
        /// Note(s):
        /// 
        /// (1) The presence of a pulse on the "Trigger In" BNC connector can trigger various events.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:MODE?
        /// </summary>
        /// <param name="Trigger_Input_Mode">
        /// This control gets the state of the aux trigger input.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_MODE_MSIN  (0) - Meas Single
        /// RSUPV_AUX_TRG_INPUT_MODE_MCON  (1) - Meas Cont/Stop
        /// RSUPV_AUX_TRG_INPUT_MODE_TRIG  (2) - Trig Inp Test
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerInputMode(out int Trigger_Input_Mode)
        {
            int pInvokeResult = PInvoke.GetAuxTriggerInputMode(this._handle, out Trigger_Input_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether you want the R&amp;S UPV to react on the rising or falling edge of the input signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available if the "Trig Inp Test" mode has been selected.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:EDGE RISing | FALLing
        /// </summary>
        /// <param name="Trigger_Input_Edge">
        /// This control selects whether you want the R&amp;S UPV to react on the rising or falling edge of the input signal.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_EDGE_RIS   (0) - Rising
        /// RSUPV_AUX_TRG_INPUT_EDGE_FALL  (1) - Falling
        /// 
        /// Default Value: RSUPV_AUX_TRG_INPUT_EDGE_RIS  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerInputEdge(int Trigger_Input_Edge)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerInputEdge(this._handle, Trigger_Input_Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether you want the R&amp;S UPV to react on the rising or falling edge of the input signal.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:INPut:EDGE?
        /// </summary>
        /// <param name="Trigger_Input_Edge">
        /// This control returns whether you want the R&amp;S UPV to react on the rising or falling edge of the input signal.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_EDGE_RIS   (0) - Rising
        /// RSUPV_AUX_TRG_INPUT_EDGE_FALL  (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerInputEdge(out int Trigger_Input_Edge)
        {
            int pInvokeResult = PInvoke.GetAuxTriggerInputEdge(this._handle, out Trigger_Input_Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the aux trigger output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:ENABle ON | OFF
        /// </summary>
        /// <param name="Trigger_Output">
        /// This control sets the state of the aux trigger output.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerOutputEnable(bool Trigger_Output)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerOutputEnable(this._handle, System.Convert.ToUInt16(Trigger_Output));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the aux trigger output.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:ENABle?
        /// </summary>
        /// <param name="Trigger_Output">
        /// This control gets the state of the aux trigger output.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerOutputEnable(out bool Trigger_Output)
        {
            ushort Trigger_OutputAsUShort;
            int pInvokeResult = PInvoke.GetAuxTriggerOutputEnable(this._handle, out Trigger_OutputAsUShort);
            Trigger_Output = System.Convert.ToBoolean(Trigger_OutputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the aux trigger output mode.
        /// 
        /// Note(s):
        /// 
        /// (1) The R&amp;S UPV outputs either a pulse, while a measurement is running, or a squarewave signal.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:MODE MEASuring | AUXClockout
        /// </summary>
        /// <param name="Trigger_Output_Mode">
        /// This control sets the state of the aux trigger output.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_OUTPUT_MODE_MEAS  (0) - Measuring
        /// RSUPV_AUX_TRG_OUTPUT_MODE_AUXC  (1) - Aux Clock Out
        /// 
        /// Default Value: RSUPV_AUX_TRG_OUTPUT_MODE_MEAS  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Measuring: During measurement the R&amp;S UPV outputs a low or high level, depending on the setting in the "Edge" parameter field.
        /// 
        /// (2) Aux Clock Out: The frequency of the internal DDS oscillator on the Digital Mainboard (DMB) is output as a squarewave signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerOutputMode(int Trigger_Output_Mode)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerOutputMode(this._handle, Trigger_Output_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the aux trigger output mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:MODE?
        /// </summary>
        /// <param name="Trigger_Output_Mode">
        /// This control gets the state of the aux trigger output.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_OUTPUT_MODE_MEAS  (0) - Measuring
        /// RSUPV_AUX_TRG_OUTPUT_MODE_AUXC  (1) - Aux Clock Out
        /// 
        /// Note(s):
        /// 
        /// (1) Measuring: During measurement the R&amp;S UPV outputs a low or high level, depending on the setting in the "Edge" parameter field.
        /// 
        /// (2) Aux Clock Out: The frequency of the internal DDS oscillator on the Digital Mainboard (DMB) is output as a squarewave signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerOutputMode(out int Trigger_Output_Mode)
        {
            int pInvokeResult = PInvoke.GetAuxTriggerOutputMode(this._handle, out Trigger_Output_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the DDS oscillator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only if "Aux Clock Out" is selected as the Mode in Trigger Output.
        /// 
        /// (2) The frequency of the DDS oscillator can be used for synchronization purposes. At the bandwidths 22, 40 and 80 kHz (in the Generator Config panel) the frequency is independent of the sampling frequency of the generator. If "Play Auto" is selected, the frequency is 512 times the sampling frequency (master clock) with which a waveform signal has been acquired by the analyzer (recorded waveforms) and can be played back via the generator ("Play Auto" bandwidth in the Generator Config panel and "Play" function in the Generator Function panel).
        /// 
        /// (3) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:FREQuency &lt;nu&gt;
        /// </summary>
        /// <param name="Trigger_Output_Frequency">
        /// This control sets the frequency of the DDS oscillator.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 48.0e3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerOutputFrequency(double Trigger_Output_Frequency)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerOutputFrequency(this._handle, Trigger_Output_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency of the DDS oscillator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:FREQuency?
        /// </summary>
        /// <param name="Trigger_Output_Frequency">
        /// This control gets the frequency of the DDS oscillator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerOutputFrequency(out double Trigger_Output_Frequency)
        {
            int pInvokeResult = PInvoke.GetAuxTriggerOutputFrequency(this._handle, out Trigger_Output_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether you want the R&amp;S UPV to output a high or low level during measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available if "Measuring" was set as the Mode.
        /// 
        /// (2) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:EDGE RISing | FALLing
        /// </summary>
        /// <param name="Trigger_Output_Edge">
        /// This control selects whether you want the R&amp;S UPV to output a high or low level during measurement.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_EDGE_RIS   (0) - Rising
        /// RSUPV_AUX_TRG_INPUT_EDGE_FALL  (1) - Falling
        /// 
        /// Default Value: RSUPV_AUX_TRG_INPUT_EDGE_RIS  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAuxTriggerOutputEdge(int Trigger_Output_Edge)
        {
            int pInvokeResult = PInvoke.SetAuxTriggerOutputEdge(this._handle, Trigger_Output_Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether you want the R&amp;S UPV to output a high or low level during measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// AUXiliaries:TRIGger:OUTPut:EDGE?
        /// </summary>
        /// <param name="Trigger_Output_Edge">
        /// This control returns whether you want the R&amp;S UPV to output a high or low level during measurement.
        /// 
        /// Valid Values:
        /// RSUPV_AUX_TRG_INPUT_EDGE_RIS   (0) - Rising
        /// RSUPV_AUX_TRG_INPUT_EDGE_FALL  (1) - Falling
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAuxTriggerOutputEdge(out int Trigger_Output_Edge)
        {
            int pInvokeResult = PInvoke.GetAuxTriggerOutputEdge(this._handle, out Trigger_Output_Edge);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the switcher.
        /// 
        /// Remote-control command(s):
        /// SWITcher:STATe ON | OFF
        /// </summary>
        /// <param name="Switcher_State">
        /// This control sets the state of the switcher.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) On: On restarting the R&amp;S UPV the COM interface is automatically configured again for controlling the switcher. When operation is first switched on, the COM interface is still configured for remote control of the R&amp;S UPV. The switcher cannot be operated until the R&amp;S UPV is restarted. This is indicated by the following message.
        /// 
        /// (2) Off: On restarting the R&amp;S UPV the COM interface is automatically configured for remote control of the R&amp;S UPV. When operation is turned off the following message is therefore received.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherState(bool Switcher_State)
        {
            int pInvokeResult = PInvoke.SetSwitcherState(this._handle, System.Convert.ToUInt16(Switcher_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the switcher.
        /// 
        /// Remote-control command(s):
        /// SWITcher:STATe?
        /// </summary>
        /// <param name="Switcher_State">
        /// This control gets the state of the switcher.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherState(out bool Switcher_State)
        {
            ushort Switcher_StateAsUShort;
            int pInvokeResult = PInvoke.GetSwitcherState(this._handle, out Switcher_StateAsUShort);
            Switcher_State = System.Convert.ToBoolean(Switcher_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the switcher tracking.
        /// 
        /// Note(s):
        /// 
        /// (1) The channels of the connected switchers can be used not only independently of one another (Tracking Off), but also in common. This makes it possible to select a channel offset between the two busbars and/or between input and output switchers. When one of the parameter fields Input A/B or Output A/B is then used, the other one(s) is/are automatically adapted by the R&amp;S UPV in accordance with the offset that has been set. Channels &lt; 0 are set to 0, that is, the busbar is switched off.
        /// 
        /// Remote-control command(s):
        /// SWITcher:TRACking OFF | BVSA | OVSI | ALL
        /// </summary>
        /// <param name="Switcher_Tracking">
        /// This control selects the switcher tracking.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_TRACKING_OFF   (0) - Off
        /// RSUPV_SWITCHER_TRACKING_BVSA  (1) - B vs A
        /// RSUPV_SWITCHER_TRACKING_OVSI  (2) - Out vs In
        /// RSUPV_SWITCHER_TRACKING_ALL   (3) - All
        /// 
        /// Default Value: RSUPV_SWITCHER_TRACKING_OFF  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: Tracking is off and the channels can be connected independently of one another.
        /// 
        /// (2) B vs A: The channels are switched to an offset between the busbars A and B. This offset can be set in the parameter field B vs A.
        /// 
        /// (3) Out vs In: The channels of input and output switchers are switched to an offset that can be set in the parameter field Out vs Inp.
        /// 
        /// (4) All: Combines both tracking options described above.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherTracking(int Switcher_Tracking)
        {
            int pInvokeResult = PInvoke.SetSwitcherTracking(this._handle, Switcher_Tracking);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the switcher tracking.
        /// 
        /// Remote-control command(s):
        /// SWITcher:TRACking?
        /// </summary>
        /// <param name="Switcher_Tracking">
        /// This control returns the switcher tracking.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_TRACKING_OFF   (0) - Off
        /// RSUPV_SWITCHER_TRACKING_BVSA  (1) - B vs A
        /// RSUPV_SWITCHER_TRACKING_OVSI  (2) - Out vs In
        /// RSUPV_SWITCHER_TRACKING_ALL   (3) - All
        /// 
        /// Notes:
        /// 
        /// (1) Off: Tracking is off and the channels can be connected independently of one another.
        /// 
        /// (2) B vs A: The channels are switched to an offset between the busbars A and B. This offset can be set in the parameter field B vs A.
        /// 
        /// (3) Out vs In: The channels of input and output switchers are switched to an offset that can be set in the parameter field Out vs Inp.
        /// 
        /// (4) All: Combines both tracking options described above.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherTracking(out int Switcher_Tracking)
        {
            int pInvokeResult = PInvoke.GetSwitcherTracking(this._handle, out Switcher_Tracking);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the switcher offset.
        /// 
        /// Note(s):
        /// 
        /// (1)  This function is available when Tracking is set to B vs A, Out vs Inp or All.
        /// 
        /// Remote-control command(s):
        /// SWITcher:OFFSet:BVSA &lt;n&gt;
        /// SWITcher:OFFSet:OVSI &lt;n&gt;
        /// </summary>
        /// <param name="Switcher_Offset">
        /// This control selects the switcher tracking.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_OFFSET_BVSA  (0) - B vs A
        /// RSUPV_SWITCHER_OFFSET_OVSI  (1) - Out vs In
        /// 
        /// Default Value: RSUPV_SWITCHER_OFFSET_BVSA  (0)
        /// 
        /// Notes:
        /// 
        /// (1) B vs A: For entering the channel offset between the busbars A and B, in common for input and output switchers. 
        /// 
        /// (2) Out vs In: For entering the channel offset between input and output switchers.
        /// </param>
        /// <param name="Offset_Value">
        /// This control sets the switcher offset value.
        /// 
        /// Valid Values: -128 to 128
        /// 
        /// Default Value: -1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherOffset(int Switcher_Offset, int Offset_Value)
        {
            int pInvokeResult = PInvoke.SetSwitcherOffset(this._handle, Switcher_Offset, Offset_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the switcher offset.
        /// 
        /// Note(s):
        /// 
        /// (1)  This function is available when Tracking is set to B vs A, Out vs Inp or All.
        /// 
        /// Remote-control command(s):
        /// SWITcher:OFFSet:BVSA?
        /// SWITcher:OFFSet:OVSI?
        /// </summary>
        /// <param name="Switcher_Offset">
        /// This control selects the switcher tracking.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_OFFSET_BVSA  (0) - B vs A
        /// RSUPV_SWITCHER_OFFSET_OVSI  (1) - Out vs In
        /// 
        /// Default Value: RSUPV_SWITCHER_OFFSET_BVSA  (0)
        /// 
        /// Notes:
        /// 
        /// (1) B vs A: For entering the channel offset between the busbars A and B, in common for input and output switchers. 
        /// 
        /// (2) Out vs In: For entering the channel offset between input and output switchers.
        /// </param>
        /// <param name="Offset_Value">
        /// This control gets the switcher offset value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherOffset(int Switcher_Offset, out int Offset_Value)
        {
            int pInvokeResult = PInvoke.GetSwitcherOffset(this._handle, Switcher_Offset, out Offset_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the channel number of the input switcher that is to be connected to busbar A or B.
        /// 
        /// Remote-control command(s):
        /// SWITcher:INPA &lt;n&gt;
        /// SWITcher:INPB &lt;n&gt;
        /// </summary>
        /// <param name="Switcher_Input">
        /// This control selects the switcher input.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_A  (0) - A
        /// RSUPV_SWITCHER_B  (1) - B
        /// 
        /// Default Value: RSUPV_SWITCHER_A  (0)
        /// 
        /// Notes:
        /// 
        /// (1) A: For entering the channel number of the input switcher that is to be connected to busbar A. 
        /// 
        /// (2) B: For entering the channel number of the input switcher that is to be connected to busbar B.
        /// </param>
        /// <param name="Input_Channel_Number">
        /// This control sets channel number of the input switcher that is to be connected to busbar A or B.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherInput(int Switcher_Input, int Input_Channel_Number)
        {
            int pInvokeResult = PInvoke.SetSwitcherInput(this._handle, Switcher_Input, Input_Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel number of the input switcher that is to be connected to busbar A or B.
        /// 
        /// Remote-control command(s):
        /// SWITcher:INPA?
        /// SWITcher:INPB?
        /// </summary>
        /// <param name="Switcher_Input">
        /// This control selects the switcher input.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_A  (0) - A
        /// RSUPV_SWITCHER_B  (1) - B
        /// 
        /// Default Value: RSUPV_SWITCHER_A  (0)
        /// 
        /// Notes:
        /// 
        /// (1) A: For entering the channel number of the input switcher that is to be connected to busbar A. 
        /// 
        /// (2) B: For entering the channel number of the input switcher that is to be connected to busbar B.
        /// </param>
        /// <param name="Input_Channel_Number">
        /// This control gets channel number of the input switcher that is to be connected to busbar A or B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherInput(int Switcher_Input, out int Input_Channel_Number)
        {
            int pInvokeResult = PInvoke.GetSwitcherInput(this._handle, Switcher_Input, out Input_Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the channel number of the output switcher that is to be connected to busbar A or B.
        /// 
        /// Remote-control command(s):
        /// SWITcher:OUTA &lt;n&gt;
        /// SWITcher:OUTB &lt;n&gt;
        /// </summary>
        /// <param name="Switcher_Output">
        /// This control selects the switcher output.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_A  (0) - A
        /// RSUPV_SWITCHER_B  (1) - B
        /// 
        /// Default Value: RSUPV_SWITCHER_A  (0)
        /// 
        /// Notes:
        /// 
        /// (1) A: For entering the channel number of the output switcher that is to be connected to busbar A. 
        /// 
        /// (2) B: For entering the channel number of the output switcher that is to be connected to busbar B.
        /// </param>
        /// <param name="Output_Channel_Number">
        /// This control sets channel number of the output switcher that is to be connected to busbar A or B.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) For busbar B, it is possible to enter "-1" as the channel number. The effect of this is that in busbar B all channels of all connected switchers are closed with the exception of the one selected in busbar A.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherOutput(int Switcher_Output, int Output_Channel_Number)
        {
            int pInvokeResult = PInvoke.SetSwitcherOutput(this._handle, Switcher_Output, Output_Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the channel number of the output switcher that is to be connected to busbar A or B.
        /// 
        /// Remote-control command(s):
        /// SWITcher:OUTA?
        /// SWITcher:OUTB?
        /// </summary>
        /// <param name="Switcher_Output">
        /// This control selects the switcher output.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_A  (0) - A
        /// RSUPV_SWITCHER_B  (1) - B
        /// 
        /// Default Value: RSUPV_SWITCHER_A  (0)
        /// 
        /// Notes:
        /// 
        /// (1) A: For entering the channel number of the output switcher that is to be connected to busbar A. 
        /// 
        /// (2) B: For entering the channel number of the output switcher that is to be connected to busbar B.
        /// </param>
        /// <param name="Output_Channel_Number">
        /// This control gets channel number of the output switcher that is to be connected to busbar A or B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherOutput(int Switcher_Output, out int Output_Channel_Number)
        {
            int pInvokeResult = PInvoke.GetSwitcherOutput(this._handle, Switcher_Output, out Output_Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the switcher connection.
        /// 
        /// Note(s):
        /// 
        /// (1) The channels of the connected switchers can be used not only independently of one another (Tracking Off), but also in common. This makes it possible to select a channel offset between the two busbars and/or between input and output switchers. When one of the parameter fields Input A/B or Output A/B is then used, the other one(s) is/are automatically adapted by the R&amp;S UPV in accordance with the offset that has been set. Channels &lt; 0 are set to 0, that is, the busbar is switched off.
        /// 
        /// Remote-control command(s):
        /// SWITcher:CONNection COM | USB
        /// </summary>
        /// <param name="Switcher_Connection">
        /// This control selects the switcher connection.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_CONNECTION_COM  (0) - COM
        /// RSUPV_SWITCHER_CONNECTION_USB  (1) - USB
        /// 
        /// Default Value: RSUPV_SWITCHER_CONNECTION_COM  (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) "COM"  - Prepares the RS232 connection to a switcher. If the Switcher panel is activated by setting the "Switcher" check mark, the RS232 interface is searched for a switcher, the connection is established if necessary and the panel is opened. If no switcher is found, an error message appears.
        /// 
        /// (2) "USB" - Prepares the USB connection to a switcher via USB to Serial Adapter, see "COM Port" parameter field. The following "COM Port" parameter field with the settings COM3 ... COM6 allows a fast call setup, although the easy to handle setting "Auto" is recommended! If the Switcher panel is activated by setting the "Switcher" check mark, the RS232 interface is searched for a switcher, the connection is established if necessary and the panel is opened. If no switcher is found, an
        /// error message appears.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherConnection(int Switcher_Connection)
        {
            int pInvokeResult = PInvoke.SetSwitcherConnection(this._handle, Switcher_Connection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the switcher connection.
        /// 
        /// Remote-control command(s):
        /// SWITcher:CONNection?
        /// </summary>
        /// <param name="Switcher_Connection">
        /// This control returns the switcher connection.
        /// 
        /// Valid Values:
        /// RSUPV_SWITCHER_CONNECTION_COM  (0) - COM
        /// RSUPV_SWITCHER_CONNECTION_USB  (1) - USB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherConnection(out int Switcher_Connection)
        {
            int pInvokeResult = PInvoke.GetSwitcherConnection(this._handle, out Switcher_Connection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the COM port.
        /// 
        /// Remote-control command(s):
        /// SWITcher:COMPort COM1 | COM2 | COM3 | COM4 | AUTO
        /// </summary>
        /// <param name="Com_Port">
        /// This control sets the COM port.
        /// 
        /// Valid Values:
        /// RSUPV_AUDIO_SWIT_COM1 (0) - COM1
        /// RSUPV_AUDIO_SWIT_COM2 (1) - COM2
        /// RSUPV_AUDIO_SWIT_COM3 (2) - COM3
        /// RSUPV_AUDIO_SWIT_COM4 (3) - COM4
        /// RSUPV_AUDIO_SWIT_AUTO (4) - Auto
        /// 
        /// Default Value: RSUPV_AUDIO_SWIT_COM1 (0) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSwitcherPort(int Com_Port)
        {
            int pInvokeResult = PInvoke.SetSwitcherPort(this._handle, Com_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected COM port.
        /// 
        /// Remote-control command(s):
        /// SWITcher:COMPort?
        /// </summary>
        /// <param name="Com_Port">
        /// This control returns the COM port.
        /// 
        /// Valid Values:
        /// RSUPV_AUDIO_SWIT_COM1 - (0)
        /// RSUPV_AUDIO_SWIT_COM2 - (1)
        /// RSUPV_AUDIO_SWIT_COM3 - (2)
        /// RSUPV_AUDIO_SWIT_COM4 - (3)
        /// RSUPV_AUDIO_SWIT_AUTO - (4)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSwitcherPort(out int Com_Port)
        {
            int pInvokeResult = PInvoke.GetSwitcherPort(this._handle, out Com_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the entry mask for channel status data to Consumer or Professional.
        /// 
        /// Note(s):
        /// 
        /// (1) Coding mode 'Automatic' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:MODE AUTomatic | PROFessional | CONSumer | FILE
        /// </summary>
        /// <param name="Coding_Mode">
        /// This control sets the entry mask for channel status data to Consumer or Professional.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CODING_MODE_AUTO  (0) - Automatic
        /// RSUPV_PROTOCOL_CODING_MODE_PRO   (1) - Professional
        /// RSUPV_PROTOCOL_CODING_MODE_CONS  (2) - Customer
        /// RSUPV_PROTOCOL_CODING_MODE_FILE  (3) - File
        /// 
        /// Default Value: RSUPV_PROTOCOL_CODING_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Automatic - The mask is set in accordance with bit 0 in byte 0, and can be different for each of the two channels.
        /// Bit 0 = 0 =&gt; Consumer
        /// Bit 0 = 1 =&gt; Professional
        /// 
        /// (2) Professional - Entry mask for the Professional mode, for 
        /// both channels in common.
        /// 
        /// (3) Consumer - Entry mask for the Consumer mode, for both channels in common.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorCodingMode(int Coding_Mode)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorCodingMode(this._handle, Coding_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the entry mask for channel status data to Consumer or Professional.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:MODE?
        /// </summary>
        /// <param name="Coding_Mode">
        /// This control gets the entry mask for channel status data to Consumer or Professional.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CODING_MODE_AUTO  (0) - Automatic
        /// RSUPV_PROTOCOL_CODING_MODE_PRO   (1) - Professional
        /// RSUPV_PROTOCOL_CODING_MODE_CONS  (2) - Customer
        /// RSUPV_PROTOCOL_CODING_MODE_FILE  (3) - File
        /// 
        /// Notes:
        /// 
        /// (1) Automatic - The mask is set in accordance with bit 0 in byte 0, and can be different for each of the two channels.
        /// Bit 0 = 0 =&gt; Consumer
        /// Bit 0 = 1 =&gt; Professional
        /// 
        /// (2) Professional - Entry mask for the Professional mode, for 
        /// both channels in common.
        /// 
        /// (3) Consumer - Entry mask for the Consumer mode, for both channels in common.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolGeneratorCodingMode(out int Coding_Mode)
        {
            int pInvokeResult = PInvoke.GetProtocolGeneratorCodingMode(this._handle, out Coding_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used for entering the drive, path and file name of the protocol file.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:FILE 'filename'
        /// </summary>
        /// <param name="Protocol_File">
        /// This control is used for entering the drive, path and file name of the protocol file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorCodingFile(string Protocol_File)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorCodingFile(this._handle, Protocol_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the cyclic redundancy check character: A checksum is generated from the content of bytes 0 to 22 of the channel status data and transferred to byte 23 (Professional mode only).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CRC ON | OFF
        /// </summary>
        /// <param name="CRC">
        /// This control sets the state of the cyclic redundancy check character.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) On - The checksum is generated and transferred to Byte 23.
        /// 
        /// (2) Off - No checksum is generated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorCRC(bool CRC)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorCRC(this._handle, System.Convert.ToUInt16(CRC));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the cyclic redundancy check character.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CRC?
        /// </summary>
        /// <param name="CRC">
        /// This control gets the state of the cyclic redundancy check character.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Notes:
        /// 
        /// (1) On - The checksum is generated and transferred to Byte 23.
        /// 
        /// (2) Off - No checksum is generated.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolGeneratorCRC(out bool CRC)
        {
            ushort CRCAsUShort;
            int pInvokeResult = PInvoke.GetProtocolGeneratorCRC(this._handle, out CRCAsUShort);
            CRC = System.Convert.ToBoolean(CRCAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the state of the validity bit.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:VALidity CH1And2 | NONE
        /// </summary>
        /// <param name="Validity">
        /// This control defines the state of the validity bit.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_VALIDITY_1_2   (0) - 1 &amp; 2
        /// RSUPV_PROTOCOL_VALIDITY_NONE  (1) - None
        /// 
        /// Default Value: RSUPV_PROTOCOL_VALIDITY_1_2  (0)
        /// 
        /// Notes:
        /// 
        /// (1) 1 &amp; 2 - The validity bit is set in both channels.
        /// 
        /// (2) None - The validity bit is not set in either channel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorValidity(int Validity)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorValidity(this._handle, Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the validity bit.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:VALidity?
        /// </summary>
        /// <param name="Validity">
        /// This control returns the state of the validity bit.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_VALIDITY_1_2   (0) - 1 &amp; 2
        /// RSUPV_PROTOCOL_VALIDITY_NONE  (1) - None
        /// 
        /// Notes:
        /// 
        /// (1) 1 &amp; 2 - The validity bit is set in both channels.
        /// 
        /// (2) None - The validity bit is not set in either channel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolGeneratorValidity(out int Validity)
        {
            int pInvokeResult = PInvoke.GetProtocolGeneratorValidity(this._handle, out Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets all bits to zero. Exception: Bit 0 in byte 0, which defines the coding mode as Consumer or Professional, is not changed.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:AZERo ONCE
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorAllBitsToZero()
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorAllBitsToZero(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the channel, byte and decimal value for the byte selected in channel 1 or 2.
        /// 
        /// Note(s):
        /// 
        /// (1) This function replaces 3 commands:
        /// SOURce:PROTocol:NUMerical:CH &lt;n&gt; , with &lt;n&gt; = 1 or 2
        /// SOURce:PROTocol:NUMerical:BYTe &lt;n&gt; , with &lt;n&gt; = 0..3
        /// SOURce:PROTocol:NUMerical:VALue &lt;n&gt;, with &lt;n&gt; = 0..255
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CH&lt;1|2&gt;:BYTE&lt;0..3&gt; &lt;0..255&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values:
        /// 1 or 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Byte_Value">
        /// This control sets the byte.
        /// 
        /// Valid Values:
        /// 0 to 3
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Value">
        /// This control sets the decimal value for the byte.
        /// 
        /// Valid Values:
        /// 0 to 255
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorChannelByte(int Channel, int Byte_Value, int Value)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorChannelByte(this._handle, Channel, Byte_Value, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns decimal value for the byte selected in channel 1 or 2.
        /// 
        /// Note(s):
        /// 
        /// (1) This function replaces 3 commands:
        /// SOURce:PROTocol:NUMerical:CH &lt;n&gt; , with &lt;n&gt; = 1 or 2
        /// SOURce:PROTocol:NUMerical:BYTe &lt;n&gt; , with &lt;n&gt; = 0..3
        /// SOURce:PROTocol:NUMerical:VALue?
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CH&lt;1|2&gt;:BYTE&lt;0..3&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values:
        /// 1 or 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Byte_Value">
        /// This control sets the byte.
        /// 
        /// Valid Values:
        /// 0 to 3
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Value">
        /// This control gets the decimal value for the byte.
        /// 
        /// Valid Values:
        /// 0 to 255
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolGeneratorChannelByte(int Channel, int Byte_Value, out int Value)
        {
            int pInvokeResult = PInvoke.GetProtocolGeneratorChannelByte(this._handle, Channel, Byte_Value, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether parameters can be set separately or for both channels in common.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CHANnels CH2Is1 | SPLit
        /// </summary>
        /// <param name="Channels">
        /// This control selects whether parameters can be set separately or for both channels in common.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CHANNELS_2_IS_1 (0) - 2 = 1
        /// RSUPV_PROTOCOL_CHANNELS_SPLIT  (1) - Split
        /// 
        /// Default Value: RSUPV_PROTOCOL_CHANNELS_2_IS_1  (0)
        /// 
        /// Notes:
        /// 
        /// (1) 2 = 1 - The same parameters for both channels. On switching over from Split, Channel 2 takes the settings of Channel 1.
        /// 
        /// (2) Split - Different parameters can be entered for each of the two channels. On switching over to 2 = 1, Channel 2 takes the settings of Channel 1.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetProtocolGeneratorChannels(int Channels)
        {
            int pInvokeResult = PInvoke.SetProtocolGeneratorChannels(this._handle, Channels);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether parameters can be set separately or for both channels in common.
        /// 
        /// Remote-control command(s):
        /// SOURce:PROTocol:CHANnels?
        /// </summary>
        /// <param name="Channels">
        /// This control returns whether parameters can be set separately or for both channels in common.
        /// 
        /// Valid Values:
        /// RSUPV_PROTOCOL_CHANNELS_2_IS_1 (0) - 2 = 1
        /// RSUPV_PROTOCOL_CHANNELS_SPLIT  (1) - Split
        /// 
        /// Notes:
        /// 
        /// (1) 2 = 1 - The same parameters for both channels. On switching over from Split, Channel 2 takes the settings of Channel 1.
        /// 
        /// (2) Split - Different parameters can be entered for each of the two channels. On switching over to 2 = 1, Channel 2 takes the settings of Channel 1.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetProtocolGeneratorChannels(out int Channels)
        {
            int pInvokeResult = PInvoke.GetProtocolGeneratorChannels(this._handle, out Channels);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects displayed screen.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SCReen
        /// </summary>
        /// <param name="Screen_Number">
        /// This control selects displayed screen.
        /// 
        /// Valid Values:
        /// 1 to 5
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayScreen(int Screen_Number)
        {
            int pInvokeResult = PInvoke.SetDisplayScreen(this._handle, Screen_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries displayed screen.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SCReen?
        /// </summary>
        /// <param name="Screen_Number">
        /// This control returns displayed screen.
        /// 
        /// Valid Values:
        /// 1 to 5
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayScreen(out int Screen_Number)
        {
            int pInvokeResult = PInvoke.GetDisplayScreen(this._handle, out Screen_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the Channel, which is shown in Trace A or B of the Display Panel of Graphic Subsystem Subsys.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is valid for multichannel analyzers only.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:CHANnel
        /// DISPlay:FFT&lt;1|2&gt;:A|B:CHANnel
        /// DISPlay:WAVeform:A|B:CHANnel
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:CHANnel
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:CHANnel
        /// 
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Channel_Number">
        /// This control selects the channel, which is shown in Trace A or B of the Display Panel of Graphic Subsystem Subsys.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayChannel(int Subsystem_Number, int Subsystem, int Trace, int Channel_Number)
        {
            int pInvokeResult = PInvoke.SetDisplayChannel(this._handle, Subsystem_Number, Subsystem, Trace, Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Channel, which is shown in Trace A or B of the Display Panel of Graphic Subsystem Subsys.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is valid for multichannel analyzers only.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:CHANnel?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:CHANnel?
        /// DISPlay:WAVeform:A|B:CHANnel?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:CHANnel?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:CHANnel?
        /// 
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Channel_Number">
        /// This control returns the channel, which is shown in Trace A or B of the Display Panel of Graphic Subsystem Subsys.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayChannel(int Subsystem_Number, int Subsystem, int Trace, out int Channel_Number)
        {
            int pInvokeResult = PInvoke.GetDisplayChannel(this._handle, Subsystem_Number, Subsystem, Trace, out Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether minimum and maximum curves will be displayed.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:MINMax ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:MINMax ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:MINMax ON | OFF
        /// DISPlay:PESQ&lt;1|2&gt;:MINMax ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Show_Min_Max">
        /// This control selects whether minimum and maximum curves will be displayed.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayShowMinMax(int Subsystem, int Subsystem_Number, bool Show_Min_Max)
        {
            int pInvokeResult = PInvoke.SetDisplayShowMinMax(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Show_Min_Max));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether minimum and maximum curves will be displayed.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:MINMax
        /// DISPlay:FFT&lt;1|2&gt;:MINMax
        /// DISPlay:BARgraph&lt;1|2&gt;:MINMax
        /// DISPlay:PESQ&lt;1|2&gt;:MINMax
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Show_Min_Max">
        /// This control returns whether minimum and maximum curves will be displayed.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayShowMinMax(int Subsystem, int Subsystem_Number, out bool Show_Min_Max)
        {
            ushort Show_Min_MaxAsUShort;
            int pInvokeResult = PInvoke.GetDisplayShowMinMax(this._handle, Subsystem, Subsystem_Number, out Show_Min_MaxAsUShort);
            Show_Min_Max = System.Convert.ToBoolean(Show_Min_MaxAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the data list filter of displayed measurement values for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:DLISt:FILTer ALL | LIMUpper | LIMLower | LIMBoth | HARMonics | PEAKs
        /// DISPlay:FFT&lt;1|2&gt;:DLISt:FILTer ALL | LIMUpper | LIMLower | LIMBoth | HARMonics | PEAKs
        /// DISPlay:WAVeform:DLISt:FILTer ALL | LIMUpper | LIMLower | LIMBoth | HARMonics | PEAKs
        /// DISPlay:BARgraph&lt;1|2&gt;:DLISt:FILTer ALL | LIMUpper | LIMLower | LIMBoth | HARMonics | PEAKs
        /// DISPlay:PESQ&lt;1|2&gt;:DLISt:FILTer ALL | LIMUpper | LIMLower | LIMBoth | HARMonics | PEAKs
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_List_Filter_Type">
        /// This control selects the data list filter of displayed measurement values for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_DLIST_FILTER_ALL   (0) - All
        /// RSUPV_DISP_DLIST_FILTER_LIMU  (1) - Limit Upper
        /// RSUPV_DISP_DLIST_FILTER_LIML  (2) - Limit Lower
        /// RSUPV_DISP_DLIST_FILTER_LIMB  (3) - Limit Both
        /// RSUPV_DISP_DLIST_FILTER_HARM  (4) - Harmonics
        /// RSUPV_DISP_DLIST_FILTER_PEAK  (5) - Peaks
        /// 
        /// Default Value: RSUPV_DISP_DLIST_FILTER_ALL   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayDataListFilter(int Subsystem, int Subsystem_Number, int Data_List_Filter_Type)
        {
            int pInvokeResult = PInvoke.SetDisplayDataListFilter(this._handle, Subsystem, Subsystem_Number, Data_List_Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the data list filter of displayed measurement values for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:DLISt:FILTer?
        /// DISPlay:FFT&lt;1|2&gt;:DLISt:FILTer?
        /// DISPlay:WAVeform:DLISt:FILTer?
        /// DISPlay:BARgraph&lt;1|2&gt;:DLISt:FILTer?
        /// DISPlay:PESQ&lt;1|2&gt;:DLISt:FILTer?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_List_Filter_Type">
        /// This control returns the data list filter of displayed measurement values for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_DLIST_FILTER_ALL   (0) - All
        /// RSUPV_DISP_DLIST_FILTER_LIMU  (1) - Limit Upper
        /// RSUPV_DISP_DLIST_FILTER_LIML  (2) - Limit Lower
        /// RSUPV_DISP_DLIST_FILTER_LIMB  (3) - Limit Both
        /// RSUPV_DISP_DLIST_FILTER_HARM  (4) - Harmonics
        /// RSUPV_DISP_DLIST_FILTER_PEAK  (5) - Peaks
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayDataListFilter(int Subsystem, int Subsystem_Number, out int Data_List_Filter_Type)
        {
            int pInvokeResult = PInvoke.GetDisplayDataListFilter(this._handle, Subsystem, Subsystem_Number, out Data_List_Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the scan offset. For those graphic systems that allow multiscan recording (FFT Monitor and Sweep Graph1 to 4) the desired scan can be selected.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1...4&gt;:SCANoffset &lt;n&gt;
        /// DISPlay:FFT&lt;1|2&gt;:SCANoffset &lt;n&gt;
        /// DISPlay:WAVeform:SCANoffset 0
        /// DISPlay:BARgraph&lt;1|2&gt;:SCANoffset &lt;n&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Scan_Offset">
        /// This control sets the scan offset. For those graphic systems that allow multiscan recording (FFT Monitor and Sweep Graph1 to 4) the desired scan can be selected.
        /// 
        /// Valid Range: 
        /// -19 to 2 (depends on the displayed system - details below)
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) Number 0 means the most recent scan. The lower the negative number, the older the scan.
        /// 
        /// (2) Waveform can use only value zero (0).
        /// 
        /// (3) FFT Graph and Bargraph can use only values 2, 1 and 0.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayScanOffset(int Subsystem, int Subsystem_Number, int Scan_Offset)
        {
            int pInvokeResult = PInvoke.SetDisplayScanOffset(this._handle, Subsystem, Subsystem_Number, Scan_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the scan offset. For those graphic systems that allow multiscan recording (FFT Monitor and Sweep Graph1 to 4) the desired scan can be selected.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1...4&gt;:SCANoffset?
        /// DISPlay:FFT&lt;1|2&gt;:SCANoffset?
        /// DISPlay:WAVeform:SCANoffset?
        /// DISPlay:BARgraph&lt;1|2&gt;:SCANoffset?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Scan_Offset">
        /// This control gets the scan offset. For those graphic systems that allow multiscan recording (FFT Monitor and Sweep Graph1 to 4) the desired scan can be selected.
        /// 
        /// Valid Range: 
        /// -19 to 2 (depends on the displayed system - details below)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Number 0 means the most recent scan. The lower the negative number, the older the scan.
        /// 
        /// (2) Waveform can use only value zero (0).
        /// 
        /// (3) FFT Graph and Bargraph can use only values 2, 1 and 0.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayScanOffset(int Subsystem, int Subsystem_Number, out int Scan_Offset)
        {
            int pInvokeResult = PInvoke.GetDisplayScanOffset(this._handle, Subsystem, Subsystem_Number, out Scan_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of simultaneously displayed channels in the Numeric Display for Multichannel Instruments.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MAXChdisp
        /// </summary>
        /// <param name="Max_Channels_Display">
        /// This control sets the number of simultaneously displayed channels.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayMaxChannels(int Max_Channels_Display)
        {
            int pInvokeResult = PInvoke.SetDisplayMaxChannels(this._handle, Max_Channels_Display);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the number of simultaneously displayed channels in the Numeric Display for Multichannel Instruments. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:MAXChdisp?
        /// </summary>
        /// <param name="Max_Channels_Display">
        /// This control gets the number of simultaneously displayed channels.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayMaxChannels(out int Max_Channels_Display)
        {
            int pInvokeResult = PInvoke.GetDisplayMaxChannels(this._handle, out Max_Channels_Display);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1..4&gt;:A|B:YSOurce OFF | FUNC1 | FUNC2 | FREQ1 | FREQ2 | PHASe | GROupdelay | LMRM1 | LMRM2 | LMDC1 | LMDC2 | LMPK1 | LMPK2 | INPP1 | INPP2 | FILEA | FILEB | FUNCtion | FREQuency | LMRMs | LMDC | LMPK | INPPeak
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FREQ1  (3) - Frequency Ch1
        /// RSUPV_DISP_Y_SRC_FREQ2  (4) - Frequency Ch2
        /// RSUPV_DISP_Y_SRC_LMRM1  (5) - Lev Mon RMS Ch1
        /// RSUPV_DISP_Y_SRC_LMRM2  (6) - Lev Mon RMS Ch2
        /// RSUPV_DISP_Y_SRC_LMDC1  (7) - Lev Mon DC Ch1
        /// RSUPV_DISP_Y_SRC_LMDC2  (8) - Lev Mon DC Ch2
        /// RSUPV_DISP_Y_SRC_LMPK1  (9) - Lev Mon Peak Ch1
        /// RSUPV_DISP_Y_SRC_LMPK2  (10) - Lev Mon Peak Ch2
        /// RSUPV_DISP_Y_SRC_INPP1  (11) - Input Peak Ch1
        /// RSUPV_DISP_Y_SRC_INPP2  (12) - Input Peak Ch2
        /// RSUPV_DISP_Y_SRC_PHAS   (13) - Phase
        /// RSUPV_DISP_Y_SRC_GRO    (14) - Ground Delay
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// 
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) - Function Ch1, Function Ch2, Function : 
        /// The function measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the set analyzer measurement function, e.g. RMS
        /// 
        /// (3) - Frequency Ch1, Frequency Ch2, Frequency:
        /// The frequency measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement function Freq/Phase = Frequency
        /// 
        /// (4) - Lev Mon RMS Ch1, Lev Mon RMS Ch2, LevMon RMS:
        /// The RMS measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Level Monitor = RMS
        /// 
        /// (5) - Lev Mon DC Ch1, Lev Mon DC Ch2, LevMon DC:
        /// The DC measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Level Monitor = DC
        /// 
        /// (6) - Lev Mon Peak Ch1, Lev Mon Peak Ch2, LevMon Peak:
        /// The Peak measurement result obtained by a generator sweep via channel 1 or channel 2 in the additional measurement function
        /// Level Monitor = Peak
        /// 
        /// (7) - Input Peak Ch1, Input Peak Ch2, Inp Peak:
        /// The peak measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Input Monitor = Peak
        /// 
        /// (8) - Phase:
        /// The phase measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Phase
        /// 
        /// (9) - Ground Delay:
        /// The group delay measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Grp Del
        /// 
        /// (10) - File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplaySweepYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplaySweepYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1..4&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FREQ1  (3) - Frequency Ch1
        /// RSUPV_DISP_Y_SRC_FREQ2  (4) - Frequency Ch2
        /// RSUPV_DISP_Y_SRC_LMRM1  (5) - Lev Mon RMS Ch1
        /// RSUPV_DISP_Y_SRC_LMRM2  (6) - Lev Mon RMS Ch2
        /// RSUPV_DISP_Y_SRC_LMDC1  (7) - Lev Mon DC Ch1
        /// RSUPV_DISP_Y_SRC_LMDC2  (8) - Lev Mon DC Ch2
        /// RSUPV_DISP_Y_SRC_LMPK1  (9) - Lev Mon Peak Ch1
        /// RSUPV_DISP_Y_SRC_LMPK2  (10) - Lev Mon Peak Ch2
        /// RSUPV_DISP_Y_SRC_INPP1  (11) - Input Peak Ch1
        /// RSUPV_DISP_Y_SRC_INPP2  (12) - Input Peak Ch2
        /// RSUPV_DISP_Y_SRC_PHAS   (13) - Phase
        /// RSUPV_DISP_Y_SRC_GRO    (14) - Ground Delay
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// 
        /// Note(s):
        /// 
        /// (1) Off: No trace is displayed or an available trace is deleted.
        /// 
        /// (2) - Function Ch1, Function Ch2, Function : 
        /// The function measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the set analyzer measurement function, e.g. RMS
        /// 
        /// (3) - Frequency Ch1, Frequency Ch2, Frequency:
        /// The frequency measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement function Freq/Phase = Frequency
        /// 
        /// (4) - Lev Mon RMS Ch1, Lev Mon RMS Ch2, LevMon RMS:
        /// The RMS measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Level Monitor = RMS
        /// 
        /// (5) - Lev Mon DC Ch1, Lev Mon DC Ch2, LevMon DC:
        /// The DC measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Level Monitor = DC
        /// 
        /// (6) - Lev Mon Peak Ch1, Lev Mon Peak Ch2, LevMon Peak:
        /// The Peak measurement result obtained by a generator sweep via channel 1 or channel 2 in the additional measurement function
        /// Level Monitor = Peak
        /// 
        /// (7) - Input Peak Ch1, Input Peak Ch2, Inp Peak:
        /// The peak measurement result obtained by means of a generator sweep for channel 1 or channel 2 with the additional measurement
        /// function Input Monitor = Peak
        /// 
        /// (8) - Phase:
        /// The phase measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Phase
        /// 
        /// (9) - Ground Delay:
        /// The group delay measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Grp Del
        /// 
        /// (10) - File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplaySweepYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplaySweepYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1..4&gt;:A|B:YSOurce OFF | FUNC | FREQ | PHASe | GROupdelay | LMRM | LMDC | LMPK | INPP | FILEA | FILEB
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FUNC  (1) - Function
        /// RSUPV_DISP_Y_SRC_MULTI_FREQ  (2) - Frequency
        /// RSUPV_DISP_Y_SRC_MULTI_LMRM  (3) - Lev Mon RMS
        /// RSUPV_DISP_Y_SRC_MULTI_LMDC  (4) - Lev Mon DC
        /// RSUPV_DISP_Y_SRC_MULTI_LMPK  (5) - Lev Mon Peak
        /// RSUPV_DISP_Y_SRC_MULTI_INPP  (6) - Input Peak
        /// RSUPV_DISP_Y_SRC_MULTI_PHAS  (7) - Phase
        /// RSUPV_DISP_Y_SRC_MULTI_GRO   (8) - Ground Delay
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) - Function
        /// The function measurement result obtained by means of a generator sweep for specified channel with the set analyzer measurement function, e.g. RMS
        /// 
        /// (3) - Frequency
        /// The frequency measurement result obtained by means of a generator sweep for specified channel with the additional measurement function Freq/Phase = Frequency
        /// 
        /// (4) - Lev Mon RMS:
        /// The RMS measurement result obtained by means of a generator sweep for specified channel with the additional measurement
        /// function Level Monitor = RMS
        /// 
        /// (5) - Lev Mon DC:
        /// The DC measurement result obtained by means of a generator sweep for specified channel with the additional measurement
        /// function Level Monitor = DC
        /// 
        /// (6) - Lev Mon Peak:
        /// The Peak measurement result obtained by a generator sweep via specified channel in the additional measurement function
        /// Level Monitor = Peak
        /// 
        /// (7) - Input Peak:
        /// The peak measurement result obtained by means of a generator sweep for specified channel with the additional measurement
        /// function Input Monitor = Peak
        /// 
        /// (8) - Phase:
        /// The phase measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Phase
        /// 
        /// (9) - Ground Delay:
        /// The group delay measurement result obtained by means of a generator sweep with the additional measurement function Freq/Phase = Freq &amp; Grp Del
        /// 
        /// (10) - File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplaySweepMultichannelYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplaySweepMultichannelYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWE&lt;1..4&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which sweep measurement results are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FUNC  (1) - Function
        /// RSUPV_DISP_Y_SRC_MULTI_FREQ  (2) - Frequency
        /// RSUPV_DISP_Y_SRC_MULTI_LMRM  (3) - Lev Mon RMS
        /// RSUPV_DISP_Y_SRC_MULTI_LMDC  (4) - Lev Mon DC
        /// RSUPV_DISP_Y_SRC_MULTI_LMPK  (5) - Lev Mon Peak
        /// RSUPV_DISP_Y_SRC_MULTI_INPP  (6) - Input Peak
        /// RSUPV_DISP_Y_SRC_MULTI_PHAS  (7) - Phase
        /// RSUPV_DISP_Y_SRC_MULTI_GRO   (8) - Ground Delay
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplaySweepMultichannelYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplaySweepMultichannelYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:FFT&lt;1|2&gt;:A|B:YSOurce OFF | FILEA | FILEB | FFTL1 | FFTL2 | FFTP1 | FFTP2 | FFTLevel | FFTPhase | FFTP21 | FFTRefchphase
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_FFTL1  (21) - FFT Level Ch1
        /// RSUPV_DISP_Y_SRC_FFTL2  (22) - FFT Level Ch2
        /// RSUPV_DISP_Y_SRC_FFTP1  (23) - FFT Phase Ch1
        /// RSUPV_DISP_Y_SRC_FFTP2  (24) - FFT Phase Ch2
        /// RSUPV_DISP_Y_SRC_FFTP21 (25) - FFT Phase CH2-CH2
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) FFT Level Ch1, FFT Level Ch2, FFT Level:
        /// The level measurement result for channel 1 or channel 2 obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// (4) FFT Phase Ch2-Ch1, FFT Phase to Refch:
        /// The phase measurement result for channel 1 or channel 2 obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayFFTGraphYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayFFTGraphYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:FFT&lt;1|2&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_FFTL1  (21) - FFT Level Ch1
        /// RSUPV_DISP_Y_SRC_FFTL2  (22) - FFT Level Ch2
        /// RSUPV_DISP_Y_SRC_FFTP1  (23) - FFT Phase Ch1
        /// RSUPV_DISP_Y_SRC_FFTP2  (24) - FFT Phase Ch2
        /// RSUPV_DISP_Y_SRC_FFTP21 (25) - FFT Phase CH2-CH2
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) FFT Level Ch1, FFT Level Ch2, FFT Level:
        /// The level measurement result for channel 1 or channel 2 obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// (4) FFT Phase Ch2-Ch1, FFT Phase to Refch:
        /// The phase measurement result for channel 1 or channel 2 obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayFFTGraphYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayFFTGraphYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis
        /// 
        /// Remote-control command(s):
        /// DISPlay:FFT&lt;1|2&gt;:A|B:YSOurce OFF | FILEA | FILEB | FFTL | FFTP | FFTRefchphase
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// RSUPV_DISP_Y_SRC_MULTI_FFTL  (11) - FFT Level
        /// RSUPV_DISP_Y_SRC_MULTI_FFTP  (12) - FFT Phase
        /// RSUPV_DISP_Y_SRC_MULTI_FFTR  (13) - FFT Phase Refch
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) FFT Level:
        /// The level measurement result for selected channel obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// (4) FFT Phase:
        /// The phase measurement result for selected channel obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// 
        /// (5) FFT Phase Refch:
        /// The phase measurement result for specified channel and reference channel obtained with the analyzer measurement function FFT is displayed as Trace A or Trace B over a frequency X axis.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayFFTGraphMultichannelYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayFFTGraphMultichannelYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis
        /// 
        /// Remote-control command(s):
        /// DISPlay:FFT&lt;1|2&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which measurement results obtained with the analyzer measurement function FFT are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// RSUPV_DISP_Y_SRC_MULTI_FFTL  (11) - FFT Level
        /// RSUPV_DISP_Y_SRC_MULTI_FFTP  (12) - FFT Phase
        /// RSUPV_DISP_Y_SRC_MULTI_FFTR  (13) - FFT Phase Refch
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayFFTGraphMultichannelYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayFFTGraphMultichannelYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WAV:A|B:YSOurce OFF | FILEA | FILEB | LEV1 | LEV2 | LEVel
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_LEV1   (17) - Level Ch1
        /// RSUPV_DISP_Y_SRC_LEV2   (18) - Level Ch2
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) Level Ch1, Level Ch2, Level:
        /// The level measurement result for channel 1 or channel 2 obtained with the waveform measurement function is displayed as Trace A
        /// or Trace B over a time X axis.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayWaveformYSource(int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayWaveformYSource(this._handle, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WAV:A|B:YSOurce?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0)  - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_LEV1   (17) - Level Ch1
        /// RSUPV_DISP_Y_SRC_LEV2   (18) - Level Ch2
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) Level Ch1, Level Ch2:
        /// The level measurement result for channel 1 or channel 2 obtained with the waveform measurement function is displayed as Trace A
        /// or Trace B over a time X axis.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayWaveformYSource(int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayWaveformYSource(this._handle, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WAV:A|B:YSOurce OFF | FILEA | FILEB | LEVel
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// RSUPV_DISP_Y_SRC_MULTI_LEV   (14) - Level
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) Level:
        /// The level measurement result for specified channel obtained with the waveform measurement function is displayed as Trace A
        /// or Trace B over a time X axis.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayWaveformMultichannelYSource(int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayWaveformMultichannelYSource(this._handle, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WAV:A|B:YSOurce?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF         (0) - Off
        /// RSUPV_DISP_Y_SRC_MULTI_FILEA (9) - File: Trace A
        /// RSUPV_DISP_Y_SRC_MULTI_FILEB (10) - File: Trace B
        /// RSUPV_DISP_Y_SRC_MULTI_LEV   (14) - Level
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayWaveformMultichannelYSource(int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayWaveformMultichannelYSource(this._handle, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:BAR&lt;1|2&gt;:A|B:YSOurce OFF | FUNC1 | FUNC2 | FILEA | FILEB
        /// | FUNCtion
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        ///  
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) Function Ch1, Function Ch2, Function:
        /// The measurement result for channel 1 or channel 2 obtained for the THD, THD+N &amp; SINAD, Mod Dist, DFD and DIM analyzer measurement functions is displayed as Trace A or Trace B versus an X axis not true to scale; the result for the Third Octave and 1/n Octave measurement functions versus an X axis true to scale.
        /// 
        /// (3) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayBargraphYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayBargraphYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:BAR&lt;1|2&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        ///  
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) Function Ch1, Function Ch2, Function:
        /// The measurement result for channel 1 or channel 2 obtained for the THD, THD+N &amp; SINAD, Mod Dist, DFD and DIM analyzer measurement functions is displayed as Trace A or Trace B versus an X axis not true to scale; the result for the Third Octave and 1/n Octave measurement functions versus an X axis true to scale.
        /// 
        /// (3) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayBargraphYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayBargraphYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the measurement result for specified channel obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:BAR&lt;1|2&gt;:A|B:YSOurce OFF | FUNC | FILEA | FILEB | FUNCtion
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FILEA  (3) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (4) - File: Trace B
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) Function Ch1, Function Ch2, Function:
        /// The measurement result for channel 1 or channel 2 obtained for the THD, THD+N &amp; SINAD, Mod Dist, DFD and DIM analyzer measurement functions is displayed as Trace A or Trace B versus an X axis not true to scale; the result for the Third Octave and 1/n Octave measurement functions versus an X axis true to scale.
        /// 
        /// (3) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayBargraphMultichannelYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayBargraphMultichannelYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the measurement result for specified channel obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Remote-control command(s):
        /// DISPlay:BAR&lt;1|2&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns whether the measurement result for channel 1 or channel 2 obtained with the analyzer measurement function THD, THD+N &amp; SINAD, Mod Dist, DFD Third Octave or 1/n Octave is to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FUNC1  (1) - Function Ch1
        /// RSUPV_DISP_Y_SRC_FUNC2  (2) - Function Ch2
        /// RSUPV_DISP_Y_SRC_FILEA  (3) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (4) - File: Trace B
        /// RSUPV_DISP_Y_SRC_FUNC   (5) - Function
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayBargraphMultichannelYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayBargraphMultichannelYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select which measurement results of the PESQ measurement function are to be collected as TRACE A or as TRACE B and displayed graphically on the left-hand or right-hand y-axis.
        /// Perceptual evaluation of speech quality (PESQ) is a method for assessing the speech quality of transmission systems.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PESQ&lt;i&gt;:A|B:YSOurce OFF | FILEA | FILEB | PEMO | DELay | DROPouts | REFSignal | DEGSignal
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control selects which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_PEMO   (26) - PESQ &amp; MOS
        /// RSUPV_DISP_Y_SRC_DELAY  (27) - Delay
        /// RSUPV_DISP_Y_SRC_REF    (28) - Ref Signal
        /// RSUPV_DISP_Y_SRC_DEG    (29) - Deg Signal
        /// RSUPV_DISP_Y_SRC_DROP   (30) - Dropouts
        /// 
        /// Default Value: RSUPV_DISP_Y_SRC_OFF     (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: 
        /// No trace is displayed or an available trace is deleted.
        /// 
        /// (2) File: Trace A, File: Trace B:
        /// Trace A or B is loaded from a file. Use function Set Display Y-Source File to select the file.
        /// 
        /// (3) PESQ &amp; MOS:
        /// Function value of the PESQ MOS measurement. Depending on the setting in the "According to" field in the Analyzer panel, a PESQ or a MOS measurement result is displayed graphically.
        /// MOS (mean opinion score) is described in the ITU Recommendation P.862.1 or P.862.2. PESQ
        /// PESQ (perceptual evaluation of speech quality) is described in the ITU Recommendation P.862.
        /// 
        /// (4) Delay:
        /// The delay measurement shows the time offset between the reference and the measurement signal. The signal is divided into a specific number of time intervals. Each time interval is displayed as a point, and all points taken together form a trace.
        /// 
        /// (5) Ref Signal:
        /// Waveform of the signal output on the generator.
        /// 
        /// (6) Deg Signal:
        /// Waveform of the measured signal in the resolution of the reference signal.
        /// 
        /// (7) Dropouts:
        /// Measured dropouts displayed in such a way as if the difference between the reference signal and the time-corrected measurement signal would be displayed.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayPESQYSource(int Subsystem_Number, int Trace, int Y_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayPESQYSource(this._handle, Subsystem_Number, Trace, Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries which measurement results of the PESQ measurement function are to be collected as TRACE A or as TRACE B and displayed graphically on the left-hand or right-hand y-axis.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PESQ&lt;i&gt;:A|B:YSOurce?
        /// </summary>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source">
        /// This control returns which measurement results obtained with the additional measurement function Waveform are to be collected as TRACE A or TRACE B and displayed graphically on the left-hand or right-hand Y axis.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_Y_SRC_OFF    (0) - Off
        /// RSUPV_DISP_Y_SRC_FILEA  (15) - File: Trace A
        /// RSUPV_DISP_Y_SRC_FILEB  (16) - File: Trace B
        /// RSUPV_DISP_Y_SRC_PEMO   (26) - PESQ &amp; MOS
        /// RSUPV_DISP_Y_SRC_DELAY  (27) - Delay
        /// RSUPV_DISP_Y_SRC_REF    (28) - Ref Signal
        /// RSUPV_DISP_Y_SRC_DEG    (29) - Deg Signal
        /// RSUPV_DISP_Y_SRC_DROP   (30) - Dropouts
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayPESQYSource(int Subsystem_Number, int Trace, out int Y_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayPESQYSource(this._handle, Subsystem_Number, Trace, out Y_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a Y-Source trace from a file for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:YSOurce:FILE 'filename'
        /// DISPlay:FFT&lt;1|2&gt;:A|B:YSOurce:FILE 'filename'
        /// DISPlay:WAVeform:A|B:YSOurce:FILE 'filename'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:YSOurce:FILE 'filename'
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:YSOurce:FILE 'filename'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Y_Source_File">
        /// This control loads a Y-Source trace from a file for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayYSourceFile(int Subsystem, int Subsystem_Number, int Trace, string Y_Source_File)
        {
            int pInvokeResult = PInvoke.SetDisplayYSourceFile(this._handle, Subsystem, Subsystem_Number, Trace, Y_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trace update type for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:UPDate ALIVe | HOLD
        /// DISPlay:FFT&lt;1|2&gt;:A|B:UPDate ALIVe | HOLD
        /// DISPlay:WAVeform:A|B:UPDate ALIVe | HOLD
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:UPDate ALIVe | HOLD
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:UPDate ALIVe | HOLD
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Trace_Update_Type">
        /// This control selets the trace update type for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_TRACE_UPD_ALIV  (0) - Alive
        /// RSUPV_DISP_TRACE_UPD_HOLD  (1) - Hold
        /// 
        /// Default Value: RSUPV_DISP_TRACE_UPD_ALIV  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Alive: New measurement values are displayed.
        /// 
        /// (2) Hold: The last trace remains in the display.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayTraceUpdate(int Subsystem, int Subsystem_Number, int Trace, int Trace_Update_Type)
        {
            int pInvokeResult = PInvoke.SetDisplayTraceUpdate(this._handle, Subsystem, Subsystem_Number, Trace, Trace_Update_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace update type for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:UPDate?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:UPDate?
        /// DISPlay:WAVeform:A|B:UPDate?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:UPDate?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:UPDate?
        /// 
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Trace_Update_Type">
        /// This control returns the trace update type for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_TRACE_UPD_ALIV  (0) - Alive
        /// RSUPV_DISP_TRACE_UPD_HOLD  (1) - Hold
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayTraceUpdate(int Subsystem, int Subsystem_Number, int Trace, out int Trace_Update_Type)
        {
            int pInvokeResult = PInvoke.GetDisplayTraceUpdate(this._handle, Subsystem, Subsystem_Number, Trace, out Trace_Update_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the reference for referenced units for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) References 'Meas Ch1' and 'Meas Ch2' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:REFerence MEASpanel | VALue | MAXimum | XCURsor | OCURsor | REF997 | REF1000 | CH1Meas | CH2Meas | GENTrack | FILE | IFLe | HOLD
        /// DISPlay:FFT&lt;1|2&gt;:A|B:REFerence MEASpanel | VALue | MAXimum | XCURsor | OCURsor | REF997 | REF1000 | CH1Meas | CH2Meas | GENTrack | FILE | IFLe | NOISedensity | HOLD
        /// DISPlay:WAVeform:A|B:REFerence VALue | HOLD
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Reference">
        /// This control selects the reference for referenced units for Trace A or Trace B.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_REF_MEAS    (0) - Meas Panel
        /// RSUPV_DISP_REF_VAL     (1) - Value
        /// RSUPV_DISP_REF_MAX     (2) - Max
        /// RSUPV_DISP_REF_XCUR    (3) - X Cursor
        /// RSUPV_DISP_REF_OCUR    (4) - O Cursor
        /// RSUPV_DISP_REF_REF997  (5) - Ref 997 Hz
        /// RSUPV_DISP_REF_REF1000 (6) - Ref 1000 Hz
        /// RSUPV_DISP_REF_CH1M    (7) - Meas Ch1
        /// RSUPV_DISP_REF_CH2M    (8) - Meas Ch2
        /// RSUPV_DISP_REF_GENT    (9) - Gen Track
        /// RSUPV_DISP_REF_FILE    (10) - File
        /// RSUPV_DISP_REF_IFL     (11) - File Intern
        /// RSUPV_DISP_REF_HOLD    (12) - Hold
        /// RSUPV_DISP_REF_NOIS    (13) - Noise Density
        /// 
        /// Default Value: RSUPV_DISP_REF_MEAS  (0)
        /// 
        /// Note(s):
        /// 
        /// (0) Meas Panel:
        /// Available for the graphic systems Sweep and Bargraph only.
        /// The reference value from the associated measurement function configuration panel is used.
        /// 
        /// (1) Value:
        /// A numeric value with unit must be entered as the reference value. Use the function Set Display Reference Value.
        /// 
        /// (2) Max:
        /// The maximum Y value of the measurement sequence is actuated once as the reference value. The display then returns to Value and the maximum Y value is displayed as the new reference value.
        /// 
        /// (3) X Cursor:
        /// The Y value of the X Cursor is actuated once as the reference value. The display then returns to Value and the Y value of the X Cursor is displayed as the new reference value.
        /// 
        /// (4) O Cursor:
        /// The Y value of the O Cursor is actuated once as the reference value. The display then returns to Value and the Y value of the o Cursor is displayed as the new reference value.
        /// 
        /// (5) Ref 997 Hz:
        /// The Y value at 997 Hz is actuated once as the reference value. The display then returns to Value and the Y value at 997 Hz is displayed as the new reference value in the parameter field below. If the X axis is not a frequency axis (e.g. in the case of level sweeps or waveform displays), an error message is displayed and the reference value remains unchanged.
        /// 
        /// (6) Ref 1000 Hz:
        /// As for Ref 997 but with 1000 Hz.
        /// 
        /// (7) Meas Ch1:
        /// Each level measurement value of channel 1 is stored as reference value and is used for referenced display, provided you have selected a referenced unit. These selection choices are only available for two-channel measurement.
        /// 
        /// (8) Meas Ch2:
        /// As for Meas Ch1 but with channel 2.
        /// 
        /// (9) Gen Track:
        /// The reference trace is deleted and the currently applicable generator voltage, and then each newly set generator voltage, is used as the reference value.
        /// 
        /// (10) File:
        /// The reference trace is loaded from a file. Use function Set Display Reference File. 
        /// 
        /// (11) File Intern:
        /// Only if "File: Trace A" or "File: Trace B" is set at "Y-Source"
        /// and a trace file containing a reference value scan in addition to the data scan is loaded.
        /// 
        /// (12) Hold:
        /// No further changes are made to the reference value or reference trace. If a trace file having a reference value or reference trace is loaded, the reference values from the file have no effect, and the reference value or reference trace last set is used. If a floating reference value (Meas Ch1, Meas Ch2 or Gen Track) was set before the switchover to "Hold", this reference trace is used. If "Hold" is selected in the absence of any valid reference trace data, a warning is issued and the last chosen valid reference is set again. 
        /// 
        /// (13) Noise Density:
        /// Noise density measurement. Offered only in the FFT Graph subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayReference(int Subsystem, int Subsystem_Number, int Trace, int Reference)
        {
            int pInvokeResult = PInvoke.SetDisplayReference(this._handle, Subsystem, Subsystem_Number, Trace, Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the reference for referenced units for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:REFerence?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:REFerence?
        /// DISPlay:WAVeform:A|B:REFerence?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Reference">
        /// This control returns the reference for referenced units for Trace A or Trace B.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_REF_MEAS    (0) - Meas Panel
        /// RSUPV_DISP_REF_VAL     (1) - Value
        /// RSUPV_DISP_REF_MAX     (2) - Max
        /// RSUPV_DISP_REF_XCUR    (3) - X Cursor
        /// RSUPV_DISP_REF_OCUR    (4) - O Cursor
        /// RSUPV_DISP_REF_REF997  (5) - Ref 997 Hz
        /// RSUPV_DISP_REF_REF1000 (6) - Ref 1000 Hz
        /// RSUPV_DISP_REF_CH1M    (7) - Meas Ch1
        /// RSUPV_DISP_REF_CH2M    (8) - Meas Ch2
        /// RSUPV_DISP_REF_GENT    (9) - Gen Track
        /// RSUPV_DISP_REF_FILE    (10) - File
        /// RSUPV_DISP_REF_IFL     (11) - File Intern
        /// RSUPV_DISP_REF_HOLD    (12) - Hold
        /// RSUPV_DISP_REF_NOIS    (13) - Noise Density
        /// 
        /// 
        /// Note(s):
        /// 
        /// (0) Meas Panel:
        /// Available for the graphic systems Sweep and Bargraph only.
        /// The reference value from the associated measurement function configuration panel is used.
        /// 
        /// (1) Value:
        /// A numeric value with unit must be entered as the reference value. Use the function Set Display Reference Value.
        /// 
        /// (2) Max:
        /// The maximum Y value of the measurement sequence is actuated once as the reference value. The display then returns to Value and the maximum Y value is displayed as the new reference value.
        /// 
        /// (3) X Cursor:
        /// The Y value of the X Cursor is actuated once as the reference value. The display then returns to Value and the Y value of the X Cursor is displayed as the new reference value.
        /// 
        /// (4) O Cursor:
        /// The Y value of the O Cursor is actuated once as the reference value. The display then returns to Value and the Y value of the o Cursor is displayed as the new reference value.
        /// 
        /// (5) Ref 997 Hz:
        /// The Y value at 997 Hz is actuated once as the reference value. The display then returns to Value and the Y value at 997 Hz is displayed as the new reference value in the parameter field below. If the X axis is not a frequency axis (e.g. in the case of level sweeps or waveform displays), an error message is displayed and the reference value remains unchanged.
        /// 
        /// (6) Ref 1000 Hz:
        /// As for Ref 997 but with 1000 Hz.
        /// 
        /// (7) Meas Ch1:
        /// Each level measurement value of channel 1 is stored as reference value and is used for referenced display, provided you have selected a referenced unit. These selection choices are only available for two-channel measurement.
        /// 
        /// (8) Meas Ch2:
        /// As for Meas Ch1 but with channel 2.
        /// 
        /// (9) Gen Track:
        /// The reference trace is deleted and the currently applicable generator voltage, and then each newly set generator voltage, is used as the reference value.
        /// 
        /// (10) File:
        /// The reference trace is loaded from a file. Use function Set Display Reference File. 
        /// 
        /// (11) File Intern:
        /// Only if "File: Trace A" or "File: Trace B" is set at "Y-Source"
        /// and a trace file containing a reference value scan in addition to the data scan is loaded.
        /// 
        /// (12) Hold:
        /// No further changes are made to the reference value or reference trace. If a trace file having a reference value or reference trace is loaded, the reference values from the file have no effect, and the reference value or reference trace last set is used. If a floating reference value (Meas Ch1, Meas Ch2 or Gen Track) was set before the switchover to "Hold", this reference trace is used. If "Hold" is selected in the absence of any valid reference trace data, a warning is issued and the last chosen valid reference is set again. 
        /// 
        /// (13) Noise Density:
        /// Noise density measurement. Offered only in the FFT Graph subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayReference(int Subsystem, int Subsystem_Number, int Trace, out int Reference)
        {
            int pInvokeResult = PInvoke.GetDisplayReference(this._handle, Subsystem, Subsystem_Number, Trace, out Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the reference value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:REFerence:VALue &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:REFerence:VALue &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:REFerence:VALue &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Reference_Value">
        /// This control sets the reference value for Trace A or Trace B.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (0) Regardless of the graphic system, the value range allows the value 0 V or negative values to be entered. A reference value of 0 V or a negative reference value makes good sense for display units such as cV or cW, but causes problems in the case of logarithmic units such as dBr and in the case of units that have the reference value in the denominator, such as V/Vr.
        /// To get round these problems, a reference value around 0.0 (or more exactly: between -1.0E-12 and.0 E-12) is always computed using the value 1.0E-12.
        /// Negative reference values &lt; -1.0E-12 are computed using their magnitude, that is, they are made into positive values. As a result, trace displays in the referenced unit dBr, for instance, at a reference value of 0.0 V have very high values for the upper limit, since the trace data is computed within the R&amp;S UPV using the reference value 1.0E-12.
        /// </param>
        /// <param name="Units">
        /// This control sets the units of reference value entry.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V      (47) - V
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayReferenceValue(int Subsystem, int Subsystem_Number, int Trace, double Reference_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayReferenceValue(this._handle, Subsystem, Subsystem_Number, Trace, Reference_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the reference value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:REFerence:VALue?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:REFerence:VALue?
        /// DISPlay:WAVeform:A|B:REFerence:VALue?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Reference_Value">
        /// This control gets the reference value for Trace A or Trace B.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of reference value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayReferenceValue(int Subsystem, int Subsystem_Number, int Trace, out double Reference_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayReferenceValue(this._handle, Subsystem, Subsystem_Number, Trace, out Reference_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a reference trace from a file for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:REFerence:FILE 'filename'
        /// DISPlay:FFT&lt;1|2&gt;:A|B:REFerence:FILE 'filename'
        /// DISPlay:WAVeform:A|B:REFerence:FILE 'filename'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Reference_File">
        /// This control loads a reference trace from a file for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayReferenceFile(int Subsystem, int Subsystem_Number, int Trace, string Reference_File)
        {
            int pInvokeResult = PInvoke.SetDisplayReferenceFile(this._handle, Subsystem, Subsystem_Number, Trace, Reference_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the normalization for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:NORMalize OFF | VALue | OCURsor | XCURsor
        /// DISPlay:FFT&lt;1|2&gt;:A|B:NORMalize OFF | VALue | OCURsor | XCURsor
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:NORMalize OFF | VALue | OCURsor | XCURsor
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Normalization">
        /// This control selects the normalization.
        /// 
        /// Valid Values:
        /// RSUPV_NORMALIZATION_OFF  (0) - Off
        /// RSUPV_NORMALIZATION_VAL  (1) - Value
        /// RSUPV_NORMALIZATION_OCUR (2) - o Cursor
        /// RSUPV_NORMALIZATION_XCUR (3) - * Cursor
        /// 
        /// Default Value: RSUPV_NORMALIZATION_OFF (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - Normalization is deactivated.
        /// 
        /// (2) Value - Fixed normalization value which is entered as a multiplication factor or a dB value in the parameter field below.
        /// 
        /// (3) o Cursor - The trace is normalized once only at the o cursor to 0 dBr or V/Vr = 1. For this purpose, the referenced trace value is read out and the reciprocal value is entered in the parameter field below. The parameter then changes back to VALUE.
        /// 
        /// (4) * Cursor - As for the o cursor.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayNormalization(int Subsystem, int Subsystem_Number, int Trace, int Normalization)
        {
            int pInvokeResult = PInvoke.SetDisplayNormalization(this._handle, Subsystem, Subsystem_Number, Trace, Normalization);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the normalization for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:NORMalize?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:NORMalize?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:NORMalize?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Normalization">
        /// This control returns the normalization.
        /// 
        /// Valid Values:
        /// RSUPV_NORMALIZATION_OFF  (0) - Off
        /// RSUPV_NORMALIZATION_VAL  (1) - Value
        /// RSUPV_NORMALIZATION_OCUR (2) - o Cursor
        /// RSUPV_NORMALIZATION_XCUR (3) - * Cursor
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayNormalization(int Subsystem, int Subsystem_Number, int Trace, out int Normalization)
        {
            int pInvokeResult = PInvoke.GetDisplayNormalization(this._handle, Subsystem, Subsystem_Number, Trace, out Normalization);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the normalization value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:NORMalize:VALue &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:NORMalize:VALue &lt;nu&gt;
        /// DISPlay:BARgraph&lt;i&gt;:A|B:NORMalize:VALue &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Normalize_Value">
        /// This control sets the normalize value for Trace A or Trace B.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) Used to enter a fixed normalization value as a factor. This value applies to all scans.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayNormalizeValue(int Subsystem, int Subsystem_Number, int Trace, double Normalize_Value)
        {
            int pInvokeResult = PInvoke.SetDisplayNormalizeValue(this._handle, Subsystem, Subsystem_Number, Trace, Normalize_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the normalization value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1..4&gt;:A|B:NORMalize:VALue?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:NORMalize:VALue?
        /// DISPlay:BARgraph&lt;i&gt;:A|B:NORMalize:VALue?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Normalize_Value">
        /// This control gets the normalize value for Trace A or Trace B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayNormalizeValue(int Subsystem, int Subsystem_Number, int Trace, out double Normalize_Value)
        {
            int pInvokeResult = PInvoke.GetDisplayNormalizeValue(this._handle, Subsystem, Subsystem_Number, Trace, out Normalize_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the copying of the reference settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:REFerence ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:REFerence ON | OFF
        /// DISPlay:WAVeform:TRACk:REFerence ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Reference_Settings">
        /// This control sets whether the copying of the reference settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The parameter fields for TRACE A and TRACE B can be accessed and changed separately.
        /// 
        /// (2) On: The content of the parameter fields for TRACE A are transferred to TRACE B. The parameter fields for TRACE B then appear grey and cannot be accessed. Changes made to the settings in TRACE A are transferred immediately to TRACE B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCopyReferenceSettings(int Subsystem, int Subsystem_Number, bool Copy_Reference_Settings)
        {
            int pInvokeResult = PInvoke.SetDisplayCopyReferenceSettings(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Copy_Reference_Settings));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the copying of the reference settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:REFerence?
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:REFerence?
        /// DISPlay:WAVeform:TRACk:REFerence?
        /// DISPlay:BARgraph&lt;1|2&gt;:TRACk:REFerence?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Reference_Settings">
        /// This control gets whether the copying of the reference settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The parameter fields for TRACE A and TRACE B can be accessed and changed separately.
        /// 
        /// (2) On: The content of the parameter fields for TRACE A are transferred to TRACE B. The parameter fields for TRACE B then appear grey and cannot be accessed. Changes made to the settings in TRACE A are transferred immediately to TRACE B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCopyReferenceSettings(int Subsystem, int Subsystem_Number, out bool Copy_Reference_Settings)
        {
            ushort Copy_Reference_SettingsAsUShort;
            int pInvokeResult = PInvoke.GetDisplayCopyReferenceSettings(this._handle, Subsystem, Subsystem_Number, out Copy_Reference_SettingsAsUShort);
            Copy_Reference_Settings = System.Convert.ToBoolean(Copy_Reference_SettingsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the copying of the scaling settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:SCALing ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:SCALing ON | OFF
        /// DISPlay:WAVeform:TRACk:SCALing ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:TRACk:SCALing ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Scaling_Settings">
        /// This control sets whether the copying of the scaling settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The parameter fields for TRACE A and TRACE B can be accessed and changed separately.
        /// 
        /// (2) On: The content of the parameter fields for TRACE A are transferred to TRACE B. The parameter fields for TRACE B then appear grey and cannot be accessed. Changes made to the settings in TRACE A are transferred immediately to TRACE B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCopyScalingSettings(int Subsystem, int Subsystem_Number, bool Copy_Scaling_Settings)
        {
            int pInvokeResult = PInvoke.SetDisplayCopyScalingSettings(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Copy_Scaling_Settings));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the copying of the scaling settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:SCALing?
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:SCALing?
        /// DISPlay:WAVeform:TRACk:SCALing?
        /// DISPlay:BARgraph&lt;1|2&gt;:TRACk:SCALing?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Scaling_Settings">
        /// This control gets whether the copying of the scaling settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The parameter fields for TRACE A and TRACE B can be accessed and changed separately.
        /// 
        /// (2) On: The content of the parameter fields for TRACE A are transferred to TRACE B. The parameter fields for TRACE B then appear grey and cannot be accessed. Changes made to the settings in TRACE A are transferred immediately to TRACE B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCopyScalingSettings(int Subsystem, int Subsystem_Number, out bool Copy_Scaling_Settings)
        {
            ushort Copy_Scaling_SettingsAsUShort;
            int pInvokeResult = PInvoke.GetDisplayCopyScalingSettings(this._handle, Subsystem, Subsystem_Number, out Copy_Scaling_SettingsAsUShort);
            Copy_Scaling_Settings = System.Convert.ToBoolean(Copy_Scaling_SettingsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the unit is the same as that set in the analyzer or whether it can be user-selected for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This parameter field is available only for the graphic systems Sweep Graph, FFT Graph and Bargraph, that is, for all graphic systems that are referenced to the function setting in the analyzer.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:UNIT:TRACk ON | OFF    
        /// DISPlay:FFT&lt;1|2&gt;:A|B:UNIT:TRACk ON | OFF    
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:UNIT:TRACk ON | OFF    
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Unit_Function_Track">
        /// This control selects whether the unit is the same as that set in the analyzer or whether it can be user-selected for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The unit can be user-selected from the list of available parameters - use function SetDisplayUnit.
        /// 
        /// (2) On: The unit selected in the analyzer is used for the
        /// measurement data displayed on the Y axis and for the displayed top, bottom and limit values.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUnitFunctionTrack(int Subsystem, int Subsystem_Number, int Trace, bool Unit_Function_Track)
        {
            int pInvokeResult = PInvoke.SetDisplayUnitFunctionTrack(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Unit_Function_Track));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the unit is the same as that set in the analyzer or whether it can be user-selected for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:UNIT:TRACk?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:UNIT:TRACk?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:UNIT:TRACk?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Unit_Function_Track">
        /// This control returns whether the unit is the same as that set in the analyzer or whether it can be user-selected for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUnitFunctionTrack(int Subsystem, int Subsystem_Number, int Trace, out bool Unit_Function_Track)
        {
            ushort Unit_Function_TrackAsUShort;
            int pInvokeResult = PInvoke.GetDisplayUnitFunctionTrack(this._handle, Subsystem, Subsystem_Number, Trace, out Unit_Function_TrackAsUShort);
            Unit_Function_Track = System.Convert.ToBoolean(Unit_Function_TrackAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the unit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only when Unit Function Track is set to OFF - function SetDisplayUnitFunctionTrack.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT &lt;u&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT &lt;u&gt;
        /// DISPlay:WAVeform:A|B|X:UNIT &lt;u&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT &lt;u&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUnit(int Subsystem, int Subsystem_Number, int Trace, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayUnit(this._handle, Subsystem, Subsystem_Number, Trace, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the unit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT?
        /// DISPlay:WAVeform:A|B|X:UNIT?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUnit(int Subsystem, int Subsystem_Number, int Trace, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayUnit(this._handle, Subsystem, Subsystem_Number, Trace, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the linear or logarithmic spacing of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:SPACing LINear | LOGarithmic
        /// DISPlay:FFT&lt;1|2&gt;:A|B:SPACing LINear | LOGarithmic
        /// DISPlay:WAVeform:A|B:SPACing LINear | LOGarithmic
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:SPACing LINear | LOGarithmic
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:SPACing LINear | LOGarithmic
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Spacing">
        /// This control selects the linear or logarithmic spacing of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SPAC_LIN  (0) - Linear
        /// RSUPV_DISP_SPAC_LOG  (1) - Logaritmic
        /// 
        /// Default Value: RSUPV_DISP_SPAC_LIN  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayYAxisSpacing(int Subsystem, int Subsystem_Number, int Trace, int Spacing)
        {
            int pInvokeResult = PInvoke.SetDisplayYAxisSpacing(this._handle, Subsystem, Subsystem_Number, Trace, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the linear or logarithmic spacing of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:SPACing?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:SPACing?
        /// DISPlay:WAVeform:A|B:SPACing?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:SPACing?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:SPACing?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Spacing">
        /// This control returns the linear or logarithmic spacing of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SPAC_LIN  (0) - Linear
        /// RSUPV_DISP_SPAC_LOG  (1) - Logaritmic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayYAxisSpacing(int Subsystem, int Subsystem_Number, int Trace, out int Spacing)
        {
            int pInvokeResult = PInvoke.GetDisplayYAxisSpacing(this._handle, Subsystem, Subsystem_Number, Trace, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the top value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:TOP &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:TOP &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:TOP &lt;nu&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:TOP &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:TOP &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Top">
        /// This control sets the top value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) If Auto Scale has been triggered, the value is reset on the basis of the current trace data.
        /// 
        /// (2) Negative values or the value 0.00000 are not permitted if Spacing is set to Log.
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayYAxisTop(int Subsystem, int Subsystem_Number, int Trace, double Top, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayYAxisTop(this._handle, Subsystem, Subsystem_Number, Trace, Top, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the top value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:TOP?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:TOP?
        /// DISPlay:WAVeform:A|B:TOP?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:TOP?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:TOP?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Top">
        /// This control gets the top value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_DEFAULT (-1) - Default or no unit returned
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayYAxisTop(int Subsystem, int Subsystem_Number, int Trace, out double Top, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayYAxisTop(this._handle, Subsystem, Subsystem_Number, Trace, out Top, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the bottom value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:BOTTom &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:BOTTom &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:BOTTom &lt;nu&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:BOTTom &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:BOTTom &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Bottom">
        /// This control sets the bottom value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) If Auto Scale has been triggered, the value is reset on the basis of the current trace data.
        /// 
        /// (2) This value must always be lower than the top value.
        /// 
        /// (3) Negative values or the value 0.00000 are not permitted if Spacing is set to Log.
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayYAxisBottom(int Subsystem, int Subsystem_Number, int Trace, double Bottom, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayYAxisBottom(this._handle, Subsystem, Subsystem_Number, Trace, Bottom, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the bottom value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:BOTTom?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:BOTTom?
        /// DISPlay:WAVeform:A|B:BOTTom?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:BOTTom?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:BOTTom?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Bottom">
        /// This control gets the bottom value of the Y axis for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_DEFAULT (-1) - Default or no unit returned
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayYAxisBottom(int Subsystem, int Subsystem_Number, int Trace, out double Bottom, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayYAxisBottom(this._handle, Subsystem, Subsystem_Number, Trace, out Bottom, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the "Unit Funct Track" or "Unit" parameter field or whether it can be user-selected.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT:AUTo ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT:AUTo ON | OFF
        /// DISPlay:WAVeform:A|B|X:UNIT:AUTo ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT:AUTo ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Unit_Auto">
        /// This control selects whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the "Unit Funct Track" or "Unit" parameter field or whether it can be user-selected.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: A user-defined unit label can be entered using function SetDisplayUnitUserString.
        /// 
        /// (2) On: The unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the "Unit Funct Track" or "Unit" parameter field and is therefore generated automatically by the R&amp;S UPV.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUnitAuto(int Subsystem, int Subsystem_Number, int Trace, bool Unit_Auto)
        {
            int pInvokeResult = PInvoke.SetDisplayUnitAuto(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Unit_Auto));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the "Unit Funct Track" or "Unit" parameter field or whether it can be user-selected.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT:AUTo?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT:AUTo?
        /// DISPlay:WAVeform:A|B|X:UNIT:AUTo?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT:AUTo?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Unit_Auto">
        /// This control returns whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the "Unit Funct Track" or "Unit" parameter field or whether it can be user-selected.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUnitAuto(int Subsystem, int Subsystem_Number, int Trace, out bool Unit_Auto)
        {
            ushort Unit_AutoAsUShort;
            int pInvokeResult = PInvoke.GetDisplayUnitAuto(this._handle, Subsystem, Subsystem_Number, Trace, out Unit_AutoAsUShort);
            Unit_Auto = System.Convert.ToBoolean(Unit_AutoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the user-defined unit designation if Unit Auto is not selected. The specified designation appears on the Y-axis label instead of the usual units.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT:USER 'string'
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT:USER 'string'
        /// DISPlay:WAVeform:A|B|X:UNIT:USER 'string'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT:USER 'string'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Unit_User_String">
        /// This control sets the user-defined unit designation
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUnitUserString(int Subsystem, int Subsystem_Number, int Trace, string Unit_User_String)
        {
            int pInvokeResult = PInvoke.SetDisplayUnitUserString(this._handle, Subsystem, Subsystem_Number, Trace, Unit_User_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the user-defined unit designation if Unit Auto is not selected. The specified designation appears on the Y-axis label instead of the usual units.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:UNIT:USER 'string'
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:UNIT:USER 'string'
        /// DISPlay:WAVeform:A|B|X:UNIT:USER 'string'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:UNIT:USER 'string'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the unit user string control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Unit_User_String">
        /// This control sets the user-defined unit designation
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUnitUserString(int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Unit_User_String)
        {
            int pInvokeResult = PInvoke.GetDisplayUnitUserString(this._handle, Subsystem, Subsystem_Number, Trace, Buffer_Size, Unit_User_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the unit label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field, or is freely configurable.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LABel:AUTO ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LABel:AUTO ON | OFF
        /// DISPlay:WAVeform:A|B|X:LABel:AUTO ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LABel:AUTO ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Axis_Label_Auto">
        /// This control selects whether the label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field, or is freely configurable.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: A user-defined axis label can be entered using function SetDisplayAxisLabelUserString.
        /// 
        /// (2) On: The axis label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayAxisLabelAuto(int Subsystem, int Subsystem_Number, int Trace, bool Axis_Label_Auto)
        {
            int pInvokeResult = PInvoke.SetDisplayAxisLabelAuto(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Axis_Label_Auto));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the unit label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field, or is freely configurable.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LABel:AUTO?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LABel:AUTO?
        /// DISPlay:WAVeform:A|B|X:LABel:AUTO?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LABel:AUTO?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Axis_Label_Auto">
        /// This control returns whether the label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field, or is freely configurable.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off: A user-defined axis label can be entered using function SetDisplayAxisLabelUserString.
        /// 
        /// (2) On: The axis label displayed on the Y axis for Trace A or Trace B or X axis is oriented in the setting in the Y-Source parameter field
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayAxisLabelAuto(int Subsystem, int Subsystem_Number, int Trace, out bool Axis_Label_Auto)
        {
            ushort Axis_Label_AutoAsUShort;
            int pInvokeResult = PInvoke.GetDisplayAxisLabelAuto(this._handle, Subsystem, Subsystem_Number, Trace, out Axis_Label_AutoAsUShort);
            Axis_Label_Auto = System.Convert.ToBoolean(Axis_Label_AutoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the user-defined axis label.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LABel:USER 'string'
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LABel:USER 'string'
        /// DISPlay:WAVeform:A|B|X:LABel:USER 'string'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LABel:USER 'string'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Axis_Label_User_String">
        /// This control sets the user-defined axis label.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayAxisLabelUserString(int Subsystem, int Subsystem_Number, int Trace, string Axis_Label_User_String)
        {
            int pInvokeResult = PInvoke.SetDisplayAxisLabelUserString(this._handle, Subsystem, Subsystem_Number, Trace, Axis_Label_User_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the user-defined axis label.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LABel:USER?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LABel:USER?
        /// DISPlay:WAVeform:A|B|X:LABel:USER?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LABel:USER?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the axis label user string control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Axis_Label_User_String">
        /// This control returns the user-defined axis label.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayAxisLabelUserString(int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Axis_Label_User_String)
        {
            int pInvokeResult = PInvoke.GetDisplayAxisLabelUserString(this._handle, Subsystem, Subsystem_Number, Trace, Buffer_Size, Axis_Label_User_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether the legend will be shown.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LEGend:SHOW ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LEGend:SHOW ON | OFF
        /// DISPlay:WAVeform:A|B|X:LEGend:SHOW ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LEGend:SHOW ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Legend">
        /// This control selects whether the legend will be shown.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLegendState(int Subsystem, int Subsystem_Number, int Trace, bool Legend)
        {
            int pInvokeResult = PInvoke.SetDisplayLegendState(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Legend));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the legend will be shown.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LEGend:SHOW?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LEGend:SHOW?
        /// DISPlay:WAVeform:A|B|X:LEGend:SHOW?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LEGend:SHOW?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Legend">
        /// This control returns whether the legend will be shown.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLegendState(int Subsystem, int Subsystem_Number, int Trace, out bool Legend)
        {
            ushort LegendAsUShort;
            int pInvokeResult = PInvoke.GetDisplayLegendState(this._handle, Subsystem, Subsystem_Number, Trace, out LegendAsUShort);
            Legend = System.Convert.ToBoolean(LegendAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the user-defined legend.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LEGend:DESCription 'string'
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LEGend:DESCription 'string'
        /// DISPlay:WAVeform:A|B|X:LEGend:DESCription 'string'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LEGend:DESCription 'string'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Legend_String">
        /// This control sets the user-defined legend.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLegend(int Subsystem, int Subsystem_Number, int Trace, string Legend_String)
        {
            int pInvokeResult = PInvoke.SetDisplayLegend(this._handle, Subsystem, Subsystem_Number, Trace, Legend_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the user-defined legend.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B|X:LEGend:DESCription?
        /// DISPlay:FFT&lt;1|2&gt;:A|B|X:LEGend:DESCription?
        /// DISPlay:WAVeform:A|B|X:LEGend:DESCription?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B|X:LEGend:DESCription?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B or X axis.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// RSUPV_X_AXIS   (2) - X
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the legend user string control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Legend">
        /// This control returns the user-defined legend.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLegend(int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Legend)
        {
            int pInvokeResult = PInvoke.GetDisplayLegend(this._handle, Subsystem, Subsystem_Number, Trace, Buffer_Size, Legend);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the copying of the limit settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:LIMit ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:LIMit ON | OFF
        /// DISPlay:WAVeform:TRACk:LIMit ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:TRACk:LIMit ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Limit_Settings">
        /// This control sets whether the copying of the limit settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The parameter fields for TRACE A and TRACE B can be accessed and changed separately.
        /// 
        /// (2) On: The content of the parameter fields for TRACE A are transferred to TRACE B. The parameter fields for TRACE B then appear grey and cannot be accessed. Changes made to the settings in TRACE A are transferred immediately to TRACE B.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCopyLimitSettings(int Subsystem, int Subsystem_Number, bool Copy_Limit_Settings)
        {
            int pInvokeResult = PInvoke.SetDisplayCopyLimitSettings(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Copy_Limit_Settings));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the copying of the limit settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:TRACk:LIMit?
        /// DISPlay:FFT&lt;1|2&gt;:TRACk:LIMit?
        /// DISPlay:WAVeform:TRACk:LIMit?
        /// DISPlay:BARgraph&lt;1|2&gt;:TRACk:LIMit?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Copy_Limit_Settings">
        /// This control gets whether the copying of the limit settings from trace A to trace B for the desired subsystem is on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCopyLimitSettings(int Subsystem, int Subsystem_Number, out bool Copy_Limit_Settings)
        {
            ushort Copy_Limit_SettingsAsUShort;
            int pInvokeResult = PInvoke.GetDisplayCopyLimitSettings(this._handle, Subsystem, Subsystem_Number, out Copy_Limit_SettingsAsUShort);
            Copy_Limit_Settings = System.Convert.ToBoolean(Copy_Limit_SettingsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of upper or lower limit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower ON | OFF
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower ON | OFF
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_State">
        /// This control sets the state of upper or lower limit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitState(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, bool Limit_State)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitState(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, System.Convert.ToUInt16(Limit_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of upper or lower limit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower?
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_State">
        /// This control gets the state of upper or lower limit for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitState(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out bool Limit_State)
        {
            ushort Limit_StateAsUShort;
            int pInvokeResult = PInvoke.GetDisplayLimitState(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, out Limit_StateAsUShort);
            Limit_State = System.Convert.ToBoolean(Limit_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects how the upper or lower limit is set for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only if the Limit State has been turned on - function rsupv_SetDisplayLimitState
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce VALue | FILE | IFILe | HOLD
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce VALue | FILE | IFILe | HOLD
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower:SOURce VALue | HOLD
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce VALue | FILE | IFILe | HOLD
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce VALue | HOLD | IFILe | HOLD
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_Source">
        /// This control selects how the upper or lower limit is set for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_LIM_SRC_VAL  (0) - Value
        /// RSUPV_DISP_LIM_SRC_FILE (1) - File
        /// RSUPV_DISP_LIM_SRC_FINT (2) - File Intern
        /// RSUPV_DISP_LIM_SRC_HOLD (3) - Hold
        /// 
        /// Default Value: RSUPV_DISP_LIM_SRC_VAL  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Parameters File and File Intern are not available in Waveform subsystem.
        /// 
        /// (2) Value: A fixed limit can be entered using function rsupv_SetDisplayLimitSourceValue.
        /// 
        /// (3) File: Limits are checked by using a limit file - set by function rsupv_SetDisplayLimitSourceFilename. Not available for Waveform subsystem.
        /// 
        /// (4) File Intern: "File Intern" has to be offered and displayed only if "File: Trace A or File: Trace B is set at "Y-Source" and a trace file containing a limit scan in addition to the data scans is loaded. Not available for Waveform subsystem.
        /// 
        /// (5) Hold: The limit value or limit trace is no longer changed. If a trace file is loaded with limit value or limit trace, the limit values from the file are not applied but instead, the previously set limit value or limit trace is used.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitSource(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, int Limit_Source)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitSource(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, Limit_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns how the upper or lower limit is set for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce?
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower:SOURce?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_Source">
        /// This control returns how the upper or lower limit is set for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_LIM_SRC_VAL  (0) - Value
        /// RSUPV_DISP_LIM_SRC_FIL  (1) - File
        /// RSUPV_DISP_LIM_SRC_FINT (2) - File Intern
        /// RSUPV_DISP_LIM_SRC_HOLD (3) - Hold
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitSource(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out int Limit_Source)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitSource(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, out Limit_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the upper or lower limit value if "Value" has been selected under "Source" (function rsupv_SetDisplayLimitSource) for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only if the Limit State has been turned on - function rsupv_SetDisplayLimitState
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower:SOURce:VALue &lt;nu&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_Source_Value">
        /// This control sets the upper or lower limit value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of limit value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS     (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitSourceValue(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, double Limit_Source_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitSourceValue(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, Limit_Source_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the upper or lower limit value for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue?
        /// DISPlay:WAVeform:A|B:LIMUpper|LIMLower:SOURce:VALue?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:VALue?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_Source_Value">
        /// This control gets the upper or lower limit value for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of limit value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_DEFAULT (-1) - Default or no unit returned
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitSourceValue(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out double Limit_Source_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitSourceValue(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, out Limit_Source_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the file name for an upper or lower limit curve if "File" has been selected under "Source". (function rsupv_SetDisplayLimitSource) for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only if the Limit State has been turned on - function rsupv_SetDisplayLimitState
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE 'filename'
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE 'filename'
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE 'filename'
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE 'filename'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystem FFT Monitor.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Limit_Source_Filename">
        /// This control sets the file name for an upper or lower limit curve for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitSourceFilename(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, string Limit_Source_Filename)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitSourceFilename(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, Limit_Source_Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the file name for an upper or lower limit curve for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:LIMUpper|LIMLower:SOURce:FILE?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystem FFT Monitor.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Type">
        /// This control selects the limit type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_LIM_UPP  (0) - Upper
        /// RSUPV_DISP_LIM_LOW  (1) - Lower
        /// 
        /// Default Value: RSUPV_DISP_LIM_UPP  (0)
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Limit Source Filename control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Limit_Source_Filename">
        /// This control gets the file name for an upper or lower limit curve for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitSourceFilename(int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, int Buffer_Size, System.Text.StringBuilder Limit_Source_Filename)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitSourceFilename(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Type, Buffer_Size, Limit_Source_Filename);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables limit lines or limit curves to be shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift ON | OFF
        /// DISPlay:WAVeform:A|B:LIMShift ON | OFF
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift">
        /// This control enables limit lines or limit curves to be shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitShift(int Subsystem, int Subsystem_Number, int Trace, bool Limit_Shift)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitShift(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Limit_Shift));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the limit lines or limit curves are shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift?
        /// DISPlay:WAVeform:A|B:LIMShift?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift">
        /// This control returns whether the limit lines or limit curves are shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitShift(int Subsystem, int Subsystem_Number, int Trace, out bool Limit_Shift)
        {
            ushort Limit_ShiftAsUShort;
            int pInvokeResult = PInvoke.GetDisplayLimitShift(this._handle, Subsystem, Subsystem_Number, Trace, out Limit_ShiftAsUShort);
            Limit_Shift = System.Convert.ToBoolean(Limit_ShiftAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables limit lines or limit curves to be parallel shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only if the Limit Shift has been turned on - function rsupv_SetDisplayLimitShift
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift:PARallel &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift:PARallel &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:LIMShift:PARallel &lt;nu&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift:PARallel &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift_Parallel">
        /// This control enables limit lines or limit curves to be parallel shifted for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of parallel limit shift.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS     (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitShiftParallel(int Subsystem, int Subsystem_Number, int Trace, double Limit_Shift_Parallel, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitShiftParallel(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Shift_Parallel, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the limit lines or limit curves parallel shift for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift:PARallel?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift:PARallel?
        /// DISPlay:WAVeform:A|B:LIMShift:PARallel?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift:PARallel?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift_Parallel">
        /// This control returns the limit lines or limit curves parallel shift for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of parallel limit shift.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitShiftParallel(int Subsystem, int Subsystem_Number, int Trace, out double Limit_Shift_Parallel, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitShiftParallel(this._handle, Subsystem, Subsystem_Number, Trace, out Limit_Shift_Parallel, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables a tolerance band formed from two limit lines or limit curves to be made broader or narrower for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only if the Limit Shift has been turned on - function rsupv_SetDisplayLimitShift
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift:SYMMetrical &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift:SYMMetrical &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:LIMShift:SYMMetrical &lt;nu&gt;
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift:SYMMetrical &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift_Symmetrical">
        /// This control enables a tolerance band formed from two limit lines or limit curves to be made broader or narrower for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of symmetrical limit shift.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_FS     (31) - FS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitShiftSymmetrical(int Subsystem, int Subsystem_Number, int Trace, double Limit_Shift_Symmetrical, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitShiftSymmetrical(this._handle, Subsystem, Subsystem_Number, Trace, Limit_Shift_Symmetrical, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a tolerance band formed from two limit lines or limit curves for Trace A or Trace B for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:LIMShift:SYMMetrical?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:LIMShift:SYMMetrical?
        /// DISPlay:WAVeform:A|B:LIMShift:SYMMetrical?
        /// DISPlay:BARgraph&lt;1|2&gt;:A|B:LIMShift:SYMMetrical?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Limit_Shift_Symmetrical">
        /// This control returns a tolerance band formed from two limit lines or limit curves for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of symmetrical limit shift.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitShiftSymmetrical(int Subsystem, int Subsystem_Number, int Trace, out double Limit_Shift_Symmetrical, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitShiftSymmetrical(this._handle, Subsystem, Subsystem_Number, Trace, out Limit_Shift_Symmetrical, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the x-source type for the desired sweep graph.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SOUrce SWEep | HOLD | MANual | LRMS | LDC | LPEak | FREQuency
        /// </summary>
        /// <param name="Sweep_Graph_Number">
        /// This control sets the sweep graph number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="X_Source">
        /// This control selects the x-source type for the desired sweep graph.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_X_SOURCE_SWEEP  (0) - Sweep
        /// RSUPV_DISP_X_SOURCE_HOLD   (1) - Hold
        /// RSUPV_DISP_X_SOURCE_MAN    (2) - Manual
        /// RSUPV_DISP_X_SOURCE_LRMS   (3) - LevMon RMS
        /// RSUPV_DISP_X_SOURCE_LDC    (4) - LevMon DC
        /// RSUPV_DISP_X_SOURCE_LPEAK  (5) - LevMon Peak
        /// RSUPV_DISP_X_SOURCE_FREQ   (6) - Frequency
        /// 
        /// Default Value: RSUPV_DISP_X_SOURCE_SWEEP  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplaySweepGraphXSource(int Sweep_Graph_Number, int X_Source)
        {
            int pInvokeResult = PInvoke.SetDisplaySweepGraphXSource(this._handle, Sweep_Graph_Number, X_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the x-source type for the desired sweep graph.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SOUrce?
        /// </summary>
        /// <param name="Sweep_Graph_Number">
        /// This control sets the sweep graph number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="X_Source">
        /// This control returns the x-source type for the desired sweep graph.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_X_SOURCE_SWEEP  (0) - Sweep
        /// RSUPV_DISP_X_SOURCE_HOLD   (1) - Hold
        /// RSUPV_DISP_X_SOURCE_MAN    (2) - Manual
        /// RSUPV_DISP_X_SOURCE_LRMS   (3) - LevMon RMS
        /// RSUPV_DISP_X_SOURCE_LDC    (4) - LevMon DC
        /// RSUPV_DISP_X_SOURCE_LPEAK  (5) - LevMon Peak
        /// RSUPV_DISP_X_SOURCE_FREQ   (6) - Frequency
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplaySweepGraphXSource(int Sweep_Graph_Number, out int X_Source)
        {
            int pInvokeResult = PInvoke.GetDisplaySweepGraphXSource(this._handle, Sweep_Graph_Number, out X_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the x-axis type for the desired sweep graph.
        /// 
        /// Note(s):
        /// 
        /// (1) The functionality of this function is determined by the X-Source - comand DISPlay:SWEep&lt;1...4&gt;:X:SOUrce (function Set Display Sweep Graph X-Source)
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:AXIS TIME | VOLTage | FREQuency | PHASe | VDIGital | JPKamplitude
        /// </summary>
        /// <param name="Sweep_Graph_Number">
        /// This control sets the sweep graph number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="X_Axis">
        /// This control selects the x-source type for the desired sweep graph.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_X_AXIS_TIME  (0) - Time
        /// RSUPV_DISP_X_AXIS_VOLT  (1) - Voltage
        /// RSUPV_DISP_X_AXIS_FREQ  (2) - Frequency
        /// RSUPV_DISP_X_AXIS_PHAS  (3) - Phase
        /// RSUPV_DISP_X_AXIS_VDIG  (4) - Voltage Digital
        /// RSUPV_DISP_X_AXIS_JPK   (5) - Jitter Pk Ampl
        /// 
        /// Default Value: RSUPV_DISP_X_AXIS_TIME  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplaySweepGraphXAxis(int Sweep_Graph_Number, int X_Axis)
        {
            int pInvokeResult = PInvoke.SetDisplaySweepGraphXAxis(this._handle, Sweep_Graph_Number, X_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the x-axis type for the desired sweep graph.
        /// 
        /// Note(s):
        /// 
        /// (1) The functionality of this function is determined by the X-Source - comand DISPlay:SWEep&lt;1...4&gt;:X:SOUrce (function Set Display Sweep Graph X-Source)
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:AXIS?
        /// </summary>
        /// <param name="Sweep_Graph_Number">
        /// This control sets the sweep graph number.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="X_Axis">
        /// This control returns the x-source type for the desired sweep graph.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_X_AXIS_TIME  (0) - Time
        /// RSUPV_DISP_X_AXIS_VOLT  (1) - Voltage
        /// RSUPV_DISP_X_AXIS_FREQ  (2) - Frequency
        /// RSUPV_DISP_X_AXIS_PHAS  (3) - Phase
        /// RSUPV_DISP_X_AXIS_VDIG  (4) - Voltage Digital
        /// RSUPV_DISP_X_AXIS_JPK   (5) - Jitter Pk Ampl
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplaySweepGraphXAxis(int Sweep_Graph_Number, out int X_Axis)
        {
            int pInvokeResult = PInvoke.GetDisplaySweepGraphXAxis(this._handle, Sweep_Graph_Number, out X_Axis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the x axis reference value.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:REFerence:VALue
        /// DISPlay:FFT&lt;1|2&gt;:X:REFerence:VALue
        /// DISPlay:WAVeform:X:REFerence:VALue
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Reference_Value">
        /// This control sets the reference value for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of reference value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayXAxisReferenceValue(int Subsystem, int Subsystem_Number, double Reference_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayXAxisReferenceValue(this._handle, Subsystem, Subsystem_Number, Reference_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the x axis reference value.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:REFerence:VALue?
        /// DISPlay:FFT&lt;1|2&gt;:X:REFerence:VALue?
        /// DISPlay:WAVeform:X:REFerence:VALue?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Reference_Value">
        /// This control gets the reference value for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of reference value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayXAxisReferenceValue(int Subsystem, int Subsystem_Number, out double Reference_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayXAxisReferenceValue(this._handle, Subsystem, Subsystem_Number, out Reference_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the manual or automatic scaling of the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SCALing AUTo | MANual
        /// DISPlay:FFT&lt;1|2&gt;:X:SCALing AUTo | MANual
        /// DISPlay:WAVeform:X:SCALing AUTo | MANual
        /// DISPlay:PESQ&lt;1|2&gt;:X:SCALing AUTo | MANual
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Scaling">
        /// This control selects the manual or automatic scaling of the X axis for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SCAL_AUTO (0) - Auto
        /// RSUPV_DISP_SCAL_MAN  (1) - Manual
        /// 
        /// Default Value: RSUPV_DISP_SCAL_AUTO  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayXAxisScaling(int Subsystem, int Subsystem_Number, int Scaling)
        {
            int pInvokeResult = PInvoke.SetDisplayXAxisScaling(this._handle, Subsystem, Subsystem_Number, Scaling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the manual or automatic scaling of the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SCALing?
        /// DISPlay:FFT&lt;1|2&gt;:X:SCALing?
        /// DISPlay:WAVeform:X:SCALing?
        /// DISPlay:PESQ&lt;1|2&gt;:X:SCALing?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Scaling">
        /// This control returns the manual or automatic scaling of the X axis for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SCAL_AUTO (0) - Auto
        /// RSUPV_DISP_SCAL_MAN  (1) - Manual
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayXAxisScaling(int Subsystem, int Subsystem_Number, out int Scaling)
        {
            int pInvokeResult = PInvoke.GetDisplayXAxisScaling(this._handle, Subsystem, Subsystem_Number, out Scaling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the linear or logarithmic spacing of the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SPACing LINear | LOGarithmic
        /// DISPlay:FFT&lt;1|2&gt;:X:SPACing LINear | LOGarithmic
        /// DISPlay:WAVeform:X:SPACing LINear | LOGarithmic
        /// DISPlay:PESQ&lt;1|2&gt;:X:SPACing LINear | LOGarithmic
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Spacing">
        /// This control selects the linear or logarithmic spacing of the X axis for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SPAC_LIN  (0) - Linear
        /// RSUPV_DISP_SPAC_LOG  (1) - Logaritmic
        /// 
        /// Default Value: RSUPV_DISP_SPAC_LIN  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayXAxisSpacing(int Subsystem, int Subsystem_Number, int Spacing)
        {
            int pInvokeResult = PInvoke.SetDisplayXAxisSpacing(this._handle, Subsystem, Subsystem_Number, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the linear or logarithmic spacing of the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:SPACing?
        /// DISPlay:FFT&lt;1|2&gt;:X:SPACing?
        /// DISPlay:WAVeform:X:SPACing?
        /// DISPlay:PESQ&lt;1|2&gt;:X:SPACing?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Spacing">
        /// This control returns the linear or logarithmic spacing of the X axis for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_SPAC_LIN  (0) - Linear
        /// RSUPV_DISP_SPAC_LOG  (1) - Logaritmic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayXAxisSpacing(int Subsystem, int Subsystem_Number, out int Spacing)
        {
            int pInvokeResult = PInvoke.GetDisplayXAxisSpacing(this._handle, Subsystem, Subsystem_Number, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the left-hand value on the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:LEFT &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:X:LEFT &lt;nu&gt;
        /// DISPlay:WAVeform:X:LEFT &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:X:LEFT &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Left">
        /// This control sets the left-hand value on the X axis for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) Can only be used if Scaling is set to Manual.
        /// 
        /// (2) Negative values or the value 0.00000 are not permitted if "Spacing" is set to "Log".
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayXAxisLeft(int Subsystem, int Subsystem_Number, double Left, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayXAxisLeft(this._handle, Subsystem, Subsystem_Number, Left, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the left-hand value on the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:LEFT?
        /// DISPlay:FFT&lt;1|2&gt;:X:LEFT?
        /// DISPlay:WAVeform:X:LEFT?
        /// DISPlay:PESQ&lt;1|2&gt;:X:LEFT?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Left">
        /// This control gets the left-hand value on the X axis for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayXAxisLeft(int Subsystem, int Subsystem_Number, out double Left, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayXAxisLeft(this._handle, Subsystem, Subsystem_Number, out Left, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the right-hand value on the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:RIGHt &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:X:RIGHt &lt;nu&gt;
        /// DISPlay:WAVeform:X:RIGHt &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:X:RIGHt &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Right">
        /// This control sets the right-hand value on the X axis for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) Can only be used if Scaling is set to Manual.
        /// 
        /// (2) Negative values or the value 0.00000 are not permitted if "Spacing" is set to "Log".
        /// 
        /// (3) This value must always be higher than the Left value.
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayXAxisRight(int Subsystem, int Subsystem_Number, double Right, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayXAxisRight(this._handle, Subsystem, Subsystem_Number, Right, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the right-hand value on the X axis for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:X:RIGHt?
        /// DISPlay:FFT&lt;1|2&gt;:X:RIGHt?
        /// DISPlay:WAVeform:X:RIGHt?
        /// DISPlay:PESQ&lt;1|2&gt;:X:RIGHt?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Right">
        /// This control gets the right-hand value on the X axis for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayXAxisRight(int Subsystem, int Subsystem_Number, out double Right, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayXAxisRight(this._handle, Subsystem, Subsystem_Number, out Right, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor state for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:WAVeform:OCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:WAVeform:XCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:STATe OFF | ACTive | INACtive
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:STATe OFF | ACTive | INACtive
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_State">
        /// This control sets the O or X cursor state for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_CUR_STATE_OFF   (0) - Off
        /// RSUPV_DISP_CUR_STATE_ACT   (1) - Active
        /// RSUPV_DISP_CUR_STATE_INAC  (2) - Inactive
        /// 
        /// Default Value: RSUPV_DISP_CUR_STATE_OFF   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorState(int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_State)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorState(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Cursor_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor state for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:STATe?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:STATe?
        /// DISPlay:WAVeform:OCURsor:STATe?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:STATe?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:STATe?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:STATe?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:STATe?
        /// DISPlay:WAVeform:XCURsor:STATe?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:STATe?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:STATe?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_State">
        /// This control gets the O or X cursor state for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_CUR_STATE_OFF   (0) - Off
        /// RSUPV_DISP_CUR_STATE_ACT   (1) - Active
        /// RSUPV_DISP_CUR_STATE_INAC  (2) - Inactive
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorState(int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_State)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorState(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor mode for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:WAVeform:OCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:WAVeform:XCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:MODE VA | VB | VAB | HA | HB
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:MODE VA | VB | VAB | HA | HB
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Mode">
        /// This control sets the O or X cursor mode for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_CUR_MODE_VA   (0) - Vertical A
        /// RSUPV_DISP_CUR_MODE_VB   (1) - Vertical B
        /// RSUPV_DISP_CUR_MODE_VAB  (2) - Vertical A B
        /// RSUPV_DISP_CUR_MODE_HA   (3) - Horizontal A
        /// RSUPV_DISP_CUR_MODE_HB   (4) - Horizontal B
        /// 
        /// Default Value: RSUPV_DISP_CUR_MODE_VA   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorMode(int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_Mode)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorMode(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Cursor_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor mode for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:MODE?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:MODE?
        /// DISPlay:WAVeform:OCURsor:MODE?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:MODE?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:MODE?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:MODE?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:MODE?
        /// DISPlay:WAVeform:XCURsor:MODE?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:MODE?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:MODE?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Mode">
        /// This control gets the O or X cursor mode for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_CUR_MODE_VA   (0) - Vertical A
        /// RSUPV_DISP_CUR_MODE_VB   (1) - Vertical B
        /// RSUPV_DISP_CUR_MODE_VAB  (2) - Vertical A B
        /// RSUPV_DISP_CUR_MODE_HA   (3) - Horizontal A
        /// RSUPV_DISP_CUR_MODE_HB   (4) - Horizontal B
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorMode(int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_Mode)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorMode(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor amplitude for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:Y?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:Y?
        /// DISPlay:WAVeform:OCURsor:Y?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:Y?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:Y?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:Y?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:Y?
        /// DISPlay:WAVeform:XCURsor:Y?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:Y?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:Y?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Amplitude">
        /// This control gets the O or X cursor amplitude for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorAmplitude(int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_Amplitude)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorAmplitude(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor to the desired position of the trace for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:WAVeform:OCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:WAVeform:XCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:SETTo:MAX | MIN | MRKA | MRKB
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Set_Cursor_To">
        /// This control sets the O or X cursor to the desired position of the trace for the desired subsystem.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_CURS_SET_TO_MAX  (0) - Max
        /// RSUPV_DISP_CURS_SET_TO_MIN  (1) - Min
        /// RSUPV_DISP_CURS_SET_TO_MRKA (2) - Marker A
        /// RSUPV_DISP_CURS_SET_TO_MRKB (3) - Marker B
        /// 
        /// Default Value: RSUPV_DISP_CURS_SET_TO_MAX  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) - Marker A and Marker B are not available for Bargraph.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorMoveTo(int Subsystem, int Subsystem_Number, int Cursor_Type, int Set_Cursor_To)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorMoveTo(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Set_Cursor_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor to the defined value for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) Vertical cursor only.
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:SETTo:XPOS
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:SETTo:XPOS
        /// DISPlay:WAVeform:OCURsor:SETTo:XPOS
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:SETTo:XPOS
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:SETTo:XPOS
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:SETTo:XPOS
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:SETTo:XPOS
        /// DISPlay:WAVeform:XCURsor:SETTo:XPOS
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:SETTo:XPOS
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:SETTo:XPOS
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_X_Position">
        /// This control sets the O or X cursor to the defined value for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of cursor X position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorXPosition(int Subsystem, int Subsystem_Number, int Cursor_Type, double Cursor_X_Position, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorXPosition(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Cursor_X_Position, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor to the defined value for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) Vertical cursor only.
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:SETTo:XPOS?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:SETTo:XPOS?
        /// DISPlay:WAVeform:OCURsor:SETTo:XPOS?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:SETTo:XPOS?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:SETTo:XPOS?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:SETTo:XPOS?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:SETTo:XPOS?
        /// DISPlay:WAVeform:XCURsor:SETTo:XPOS?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:SETTo:XPOS?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:SETTo:XPOS?
        /// 
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_X_Position">
        /// This control gets the O or X cursor to the defined value for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of cursor X position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorXPosition(int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_X_Position, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorXPosition(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_X_Position, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor Y position for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) Horizontal cursor only.
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:SETTo:YPOS
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:SETTo:YPOS
        /// DISPlay:WAVeform:OCURsor:SETTo:YPOS
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:SETTo:YPOS
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:SETTo:YPOS
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:SETTo:YPOS
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:SETTo:YPOS
        /// DISPlay:WAVeform:XCURsor:SETTo:YPOS
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:SETTo:YPOS
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:SETTo:YPOS
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Y_Position">
        /// This control sets the O or X cursor Y position for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of cursor Y position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorYPosition(int Subsystem, int Subsystem_Number, int Cursor_Type, double Cursor_Y_Position, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorYPosition(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Cursor_Y_Position, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor Y position for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) Horizontal cursor only.
        /// 
        /// (2) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:SETTo:YPOS?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:SETTo:YPOS?
        /// DISPlay:WAVeform:OCURsor:SETTo:YPOS?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:SETTo:YPOS?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:SETTo:YPOS?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:SETTo:YPOS?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:SETTo:YPOS?
        /// DISPlay:WAVeform:XCURsor:SETTo:YPOS?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:SETTo:YPOS?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:SETTo:YPOS?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Y_Position">
        /// This control gets the O or X cursor Y position for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of cursor Y position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorYPosition(int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_Y_Position, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorYPosition(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_Y_Position, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the O or X cursor position mode for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:WAVeform:OCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:WAVeform:XCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:POSMode PIXel | POINt | PEAK | HARMonic
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Position_Mode">
        /// This control sets the O or X cursor position mode for the desired subsystem.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_CUR_POSMODE_PIX   (0) - Pixel
        /// RSUPV_DISP_CUR_POSMODE_POIN  (1) - Point
        /// RSUPV_DISP_CUR_POSMODE_PEAK  (2) - Peak
        /// RSUPV_DISP_CUR_POSMODE_HARM  (3) - Harmonic
        /// 
        /// Default Value: RSUPV_DISP_CUR_POSMODE_PIX   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayCursorMovement(int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_Position_Mode)
        {
            int pInvokeResult = PInvoke.SetDisplayCursorMovement(this._handle, Subsystem, Subsystem_Number, Cursor_Type, Cursor_Position_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the O or X cursor position mode for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:OCURsor:POSMode?
        /// DISPlay:FFT&lt;1|2&gt;:OCURsor:POSMode?
        /// DISPlay:WAVeform:OCURsor:POSMode?
        /// DISPlay:BARgraph&lt;1|2&gt;:OCURsor:POSMode?
        /// DISPlay:PESQ&lt;1|2&gt;:OCURsor:POSMode?
        /// DISPlay:SWEep&lt;1...4&gt;:XCURsor:POSMode?
        /// DISPlay:FFT&lt;1|2&gt;:XCURsor:POSMode?
        /// DISPlay:WAVeform:XCURsor:POSMode?
        /// DISPlay:BARgraph&lt;1|2&gt;:XCURsor:POSMode?
        /// DISPlay:PESQ&lt;1|2&gt;:XCURsor:POSMode?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// RSUPV_DISP_SUBSYS_MON  (4) - Waveform Monitor
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Cursor_Type">
        /// This control selects the cursor type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <param name="Cursor_Position_Mode">
        /// This control gets the O or X cursor position mode for the desired subsystem.
        /// 
        /// Valid Values: 
        /// RSUPV_DISP_CUR_POSMODE_PIX   (0) - Pixel
        /// RSUPV_DISP_CUR_POSMODE_POIN  (1) - Point
        /// RSUPV_DISP_CUR_POSMODE_PEAK  (2) - Peak
        /// RSUPV_DISP_CUR_POSMODE_HARM  (3) - Harmonic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayCursorMovement(int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_Position_Mode)
        {
            int pInvokeResult = PInvoke.GetDisplayCursorMovement(this._handle, Subsystem, Subsystem_Number, Cursor_Type, out Cursor_Position_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the marker mode for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:MODE OFF | FIXed | TRKMax
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:MODE OFF | FIXed | TRKMax
        /// DISPlay:WAVeform:A|B:MARKer:MODE OFF | FIXed | TRKMax
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:MARKer:MODE OFF | FIXed | TRKMax
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Marker_Mode">
        /// This control sets the marker mode for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_MARKER_MODE_OFF  (0) - Off
        /// RSUPV_DISP_MARKER_MODE_FIX  (1) - Fixed
        /// RSUPV_DISP_MARKER_MODE_TRKM (2) - Track To Max
        /// 
        /// Default Value: RSUPV_DISP_MARKER_MODE_OFF  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: Marker off.
        /// 
        /// (2) Fixed: Fix marker on the current X position.
        /// 
        /// (3) Track To Max: Set marker to maximum of trace A. Marker changes with maximum.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayMarkerMode(int Subsystem, int Subsystem_Number, int Trace, int Marker_Mode)
        {
            int pInvokeResult = PInvoke.SetDisplayMarkerMode(this._handle, Subsystem, Subsystem_Number, Trace, Marker_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the marker mode for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:MODE?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:MODE?
        /// DISPlay:WAVeform:A|B:MARKer:MODE?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:MARKer:MODE?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Marker_Mode">
        /// This control gets the marker mode for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_MARKER_MODE_OFF  (0) - Off
        /// RSUPV_DISP_MARKER_MODE_FIX  (1) - Fixed
        /// RSUPV_DISP_MARKER_MODE_TRKM (2) - Track To Max
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayMarkerMode(int Subsystem, int Subsystem_Number, int Trace, out int Marker_Mode)
        {
            int pInvokeResult = PInvoke.GetDisplayMarkerMode(this._handle, Subsystem, Subsystem_Number, Trace, out Marker_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the marker harmonics for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:HARMonics ON | OFF
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:HARMonics ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Harmonics">
        /// This control sets the state of the marker harmonics for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayMarkerHarmonics(int Subsystem, int Subsystem_Number, int Trace, bool Harmonics)
        {
            int pInvokeResult = PInvoke.SetDisplayMarkerHarmonics(this._handle, Subsystem, Subsystem_Number, Trace, System.Convert.ToUInt16(Harmonics));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the marker harmonics for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available in UPP.
        /// 
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:HARMonics?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:HARMonics?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Harmonics">
        /// This control gets the state of the marker harmonics for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayMarkerHarmonics(int Subsystem, int Subsystem_Number, int Trace, out bool Harmonics)
        {
            ushort HarmonicsAsUShort;
            int pInvokeResult = PInvoke.GetDisplayMarkerHarmonics(this._handle, Subsystem, Subsystem_Number, Trace, out HarmonicsAsUShort);
            Harmonics = System.Convert.ToBoolean(HarmonicsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the marker to the desired position of the trace for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:SETTo:OCURsor | XCURsor
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:SETTo:OCURsor | XCURsor
        /// DISPlay:WAVeform:A|B:MARKer:SETTo:OCURsor | XCURsor
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:MARKer:SETTo:OCURsor | XCURsor
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Move_To">
        /// This control sets the marker to the desired position of the trace for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_CURS_TYPE_O  (0) - O Cursor
        /// RSUPV_DISP_CURS_TYPE_X  (1) - X Cursor
        /// 
        /// Default Value: RSUPV_DISP_CURS_TYPE_O  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayMarkerMoveTo(int Subsystem, int Subsystem_Number, int Trace, int Move_To)
        {
            int pInvokeResult = PInvoke.SetDisplayMarkerMoveTo(this._handle, Subsystem, Subsystem_Number, Trace, Move_To);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets marker to a position on the X-axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:SETTo:XPOS &lt;nu&gt;
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:SETTo:XPOS &lt;nu&gt;
        /// DISPlay:WAVeform:A|B:MARKer:SETTo:XPOS &lt;nu&gt;
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:MARKer:SETTo:XPOS &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Marker_X_Position">
        /// This control sets marker to a position on the X-axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Units">
        /// This control sets the units of marker X position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayMarkerXPosition(int Subsystem, int Subsystem_Number, int Trace, double Marker_X_Position, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayMarkerXPosition(this._handle, Subsystem, Subsystem_Number, Trace, Marker_X_Position, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets marker to a position on the X-axis for Trace A or Trace B for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) PESQ subsystem is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// DISPlay:SWEep&lt;1...4&gt;:A|B:MARKer:SETTo:XPOS?
        /// DISPlay:FFT&lt;1|2&gt;:A|B:MARKer:SETTo:XPOS?
        /// DISPlay:WAVeform:A|B:MARKer:SETTo:XPOS?
        /// DISPlay:PESQ&lt;1|2&gt;:A|B:MARKer:SETTo:XPOS?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_PESQ (5) - PESQ
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <param name="Marker_X_Position">
        /// This control gets marker to a position on the X-axis for Trace A or Trace B for the desired subsystem.
        /// </param>
        /// <param name="Units">
        /// This control gets the units of marker X position.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayMarkerXPosition(int Subsystem, int Subsystem_Number, int Trace, out double Marker_X_Position, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayMarkerXPosition(this._handle, Subsystem, Subsystem_Number, Trace, out Marker_X_Position, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the format in which the current trace is to be stored.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;i&gt;:STAS TRCList | EQUList | SWPList | LLISt | DSELect
        /// MMEMory:FFT&lt;i&gt;:STAS TRCList | EQUList | SWPList | LLISt | DSELect
        /// MMEMory:WAVeform:STAS TRCList
        /// MMEMory:BARgraph&lt;i&gt;:STAS TRCList | EQUList | SWPList | LLISt | DSELect
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Store_Trace_As">
        /// This control sets the format in which the current trace is to be stored.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_STORE_TRACE_AS_TRCLIST  (0) - Trace List
        /// RSUPV_DISP_STORE_TRACE_AS_EQULIST  (1) - Equalization List
        /// RSUPV_DISP_STORE_TRACE_AS_SWPLIST  (2) - Sweep List
        /// RSUPV_DISP_STORE_TRACE_AS_LLIST    (3) - Limit List
        /// RSUPV_DISP_STORE_TRACE_AS_DSELECT  (4) - DataList Select
        /// 
        /// Default Value: RSUPV_DISP_STORE_TRACE_AS_TRCLIST  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) These values are not available in Waveform: Equalization List, Sweep List, Limit List, DataList Select.
        /// 
        /// (2) Trace List: A trace is stored complete with all its scans, X and Y data, limit data and reference values. This file can be loaded as a trace file at parameter field "Y-Source" "File: Trace A" or "File: Trace B" and can be displayed.
        /// 
        /// (3) Equalization List: Available in all graphic systems except for "Waveform". A trace is stored as an equalization file in order to make it available to the generator as a preemphasis
        /// file. Each time an equalization file is stored the generator equalization file is loaded again, regardless of whether or not Modify Equ. is enabled. Then whenever a new equalization file is saved the precorrector becomes immediately effective on the
        /// next sweep scan. If the name of the stored equalization file and of the equalization file used in the generator are not identical, a warning is issued to notify that the newly created equalization file will now be used in the generator.
        /// 
        /// (4) Sweep List: Available in all graphic systems except for "Waveform". A trace is stored as a sweep list. If an Auto List Sweep or Manu List Sweep is set in the generator, the sweep parameters are read from this file.
        /// 
        /// (5) Limit List: Available in all graphic systems except for "Waveform". A trace is stored as a limit list. This file can be loaded at "Limit Upper" or "Limit Lower". It can then be displayed as a limit curve and used for limit monitoring.
        /// 
        /// (6) DataList Select: Available in all graphic systems except for "Waveform". The filtered data of a trace is stored complete with all its scans, X and Y data, limit data and reference values.
        /// Data filtering is set in the measurement value list via softkey menu item "Selection". The following filters can be selected:
        /// - Upper limit violations only
        /// - Lower limit violations only
        /// - Upper and lower limit violations
        /// - Harmonics only
        /// - Peaks only.
        /// A trace file stored in the "DataList Select" mode in conjunction with filters enabled in the measurement value list usually consists of significantly fewer data sets than when unfiltered and the number of data sets for Trace A and Trace B is usually different.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayStoreTraceAs(int Subsystem, int Subsystem_Number, int Store_Trace_As)
        {
            int pInvokeResult = PInvoke.SetDisplayStoreTraceAs(this._handle, Subsystem, Subsystem_Number, Store_Trace_As);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the format in which the current trace is to be stored.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;i&gt;:STAS?
        /// MMEMory:FFT&lt;i&gt;:STAS?
        /// MMEMory:WAVeform:STAS?
        /// MMEMory:BARgraph&lt;i&gt;:STAS?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Store_Trace_As">
        /// This control gets the format in which the current trace is to be stored.
        /// 
        /// Valid Range: 
        /// RSUPV_DISP_STORE_TRACE_AS_TRCLIST  (0) - Trace List
        /// RSUPV_DISP_STORE_TRACE_AS_EQULIST  (1) - Equalization List
        /// RSUPV_DISP_STORE_TRACE_AS_SWPLIST  (2) - Sweep List
        /// RSUPV_DISP_STORE_TRACE_AS_LLIST    (3) - Limit List
        /// RSUPV_DISP_STORE_TRACE_AS_DSELECT  (4) - DataList Select
        /// 
        /// Note(s):
        /// 
        /// (1) These values are not available in Waveform: Equalization List, Sweep List, Limit List, DataList Select.
        /// 
        /// (2) Trace List: A trace is stored complete with all its scans, X and Y data, limit data and reference values. This file can be loaded as a trace file at parameter field "Y-Source" "File: Trace A" or "File: Trace B" and can be displayed.
        /// 
        /// (3) Equalization List: Available in all graphic systems except for "Waveform". A trace is stored as an equalization file in order to make it available to the generator as a preemphasis
        /// file. Each time an equalization file is stored the generator equalization file is loaded again, regardless of whether or not Modify Equ. is enabled. Then whenever a new equalization file is saved the precorrector becomes immediately effective on the
        /// next sweep scan. If the name of the stored equalization file and of the equalization file used in the generator are not identical, a warning is issued to notify that the newly created equalization file will now be used in the generator.
        /// 
        /// (4) Sweep List: Available in all graphic systems except for "Waveform". A trace is stored as a sweep list. If an Auto List Sweep or Manu List Sweep is set in the generator, the sweep parameters are read from this file.
        /// 
        /// (5) Limit List: Available in all graphic systems except for "Waveform". A trace is stored as a limit list. This file can be loaded at "Limit Upper" or "Limit Lower". It can then be displayed as a limit curve and used for limit monitoring.
        /// 
        /// (6) DataList Select: Available in all graphic systems except for "Waveform". The filtered data of a trace is stored complete with all its scans, X and Y data, limit data and reference values.
        /// Data filtering is set in the measurement value list via softkey menu item "Selection". The following filters can be selected:
        /// - Upper limit violations only
        /// - Lower limit violations only
        /// - Upper and lower limit violations
        /// - Harmonics only
        /// - Peaks only.
        /// A trace file stored in the "DataList Select" mode in conjunction with filters enabled in the measurement value list usually consists of significantly fewer data sets than when unfiltered and the number of data sets for Trace A and Trace B is usually different.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayStoreTraceAs(int Subsystem, int Subsystem_Number, out int Store_Trace_As)
        {
            int pInvokeResult = PInvoke.GetDisplayStoreTraceAs(this._handle, Subsystem, Subsystem_Number, out Store_Trace_As);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the data set of Trace A or Trace B will be used for creating the corresponding lists for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only in Set Display Store Trace As: Equalization List or Limit List.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:TRACe A | B
        /// MMEMory:FFT&lt;1|2&gt;:TRACe A | B
        /// MMEMory:BARgraph&lt;1|2&gt;:TRACe A | B
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Trace">
        /// This control selects the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// 
        /// Default Value: RSUPV_TRACE_A  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayTraceSelect(int Subsystem, int Subsystem_Number, int Trace)
        {
            int pInvokeResult = PInvoke.SetDisplayTraceSelect(this._handle, Subsystem, Subsystem_Number, Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the data set of Trace A or Trace B will be used for creating the corresponding lists for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only in Set Display Store Trace As: Equalization List or Limit List.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:TRACe?
        /// MMEMory:FFT&lt;1|2&gt;:TRACe?
        /// MMEMory:BARgraph&lt;1|2&gt;:TRACe?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Trace">
        /// This control returns the trace A or B.
        /// 
        /// Valid Values:
        /// RSUPV_TRACE_A  (0) - A
        /// RSUPV_TRACE_B  (1) - B
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayTraceSelect(int Subsystem, int Subsystem_Number, out int Trace)
        {
            int pInvokeResult = PInvoke.GetDisplayTraceSelect(this._handle, Subsystem, Subsystem_Number, out Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the the frequency for the desired subsystem whose voltage value is used for normalization. If the frequency selected is that at which the frequency response curve is at its maximum, the precorrector file contains only values from 0.0 to 1.0. If a different frequency is selected, factors greater than 1.0 also occur.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only in Set Display Store Trace As: Equalization List.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:EQUalization:NORMfrequency &lt;nu&gt;
        /// MMEMory:FFT&lt;1|2&gt;:EQUalization:NORMfrequency &lt;nu&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Normalization_Frequency">
        /// This control sets the frequency for the desired subsystem whose voltage value is used for normalization.
        /// 
        /// Valid Range: 0.0 to 1000.0 Hz 
        /// 
        /// Default Value: 1000.0 Hz
        /// </param>
        /// <param name="Units">
        /// This control sets the units of normalization frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayNormalizationFrequency(int Subsystem, int Subsystem_Number, double Normalization_Frequency, int Units)
        {
            int pInvokeResult = PInvoke.SetDisplayNormalizationFrequency(this._handle, Subsystem, Subsystem_Number, Normalization_Frequency, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the the frequency for the desired subsystem whose voltage value is used for normalization. If the frequency selected is that at which the frequency response curve is at its maximum, the precorrector file contains only values from 0.0 to 1.0. If a different frequency is selected, factors greater than 1.0 also occur.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:EQUalization:NORMfrequency?
        /// MMEMory:FFT&lt;1|2&gt;:EQUalization:NORMfrequency?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Normalization_Frequency">
        /// This control gets the frequency for the desired subsystem whose voltage value is used for normalization.
        /// 
        /// Valid Range: 0.0 to 1000.0 Hz 
        /// </param>
        /// <param name="Units">
        /// This control gets the units of normalization frequency.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayNormalizationFrequency(int Subsystem, int Subsystem_Number, out double Normalization_Frequency, out int Units)
        {
            int pInvokeResult = PInvoke.GetDisplayNormalizationFrequency(this._handle, Subsystem, Subsystem_Number, out Normalization_Frequency, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the modify equalization for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only in Set Display Store Trace As: Equalization List.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:EQUalization:MODify ON | OFF
        /// MMEMory:FFT&lt;1|2&gt;:EQUalization:MODify ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Modify_Equlization">
        /// This control sets the state of the modify equalization for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayModifyEqu(int Subsystem, int Subsystem_Number, bool Modify_Equlization)
        {
            int pInvokeResult = PInvoke.SetDisplayModifyEqu(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Modify_Equlization));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the state of the modify equalization for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:EQUalization:MODify?
        /// MMEMory:FFT&lt;1|2&gt;:EQUalization:MODify?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Modify_Equlization">
        /// This control gets the state of the modify equalization for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayModifyEqu(int Subsystem, int Subsystem_Number, out bool Modify_Equlization)
        {
            ushort Modify_EqulizationAsUShort;
            int pInvokeResult = PInvoke.GetDisplayModifyEqu(this._handle, Subsystem, Subsystem_Number, out Modify_EqulizationAsUShort);
            Modify_Equlization = System.Convert.ToBoolean(Modify_EqulizationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/desactivate the invert equalization.
        /// 
        /// Remote-control command(s):
        /// MMEMory:FFT&lt;n2&gt;:EQUalization:INVert ON | OFF
        /// MMEMory:SWEep&lt;n2&gt;:EQUalization:INVert ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Invert_Equalization">
        /// This control activate/desactivate the invert equalization.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayInvertEqu(int Subsystem, int Subsystem_Number, bool Invert_Equalization)
        {
            int pInvokeResult = PInvoke.SetDisplayInvertEqu(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Invert_Equalization));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the invert equalization.
        /// 
        /// Remote-control command(s):
        /// MMEMory:FFT&lt;n2&gt;:EQUalization:INVert?
        /// MMEMory:SWEep&lt;n2&gt;:EQUalization:INVert?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Invert_Equalization">
        /// This control returns the state of the invert equalization.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayInvertEqu(int Subsystem, int Subsystem_Number, out bool Invert_Equalization)
        {
            ushort Invert_EqualizationAsUShort;
            int pInvokeResult = PInvoke.GetDisplayInvertEqu(this._handle, Subsystem, Subsystem_Number, out Invert_EqualizationAsUShort);
            Invert_Equalization = System.Convert.ToBoolean(Invert_EqualizationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the offset state to the limit trace data for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) When a limit file is generated, an offset value is added to the Y data. This value is specified in the following parameter field. Offset allows for example two limit files to be generated from a "golden unit", together forming a tolerance band, by generating a limit file for Upper Limit with an offset value of say 10 dBV and a limit file for Lower Limit with an offset value of -10 dBV. This produces a tolerance band with a width of 20 dBV so that the ideal frequency response of a selected DUT can be compared with the currently different DUT.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:LIMit:OFFSet ON | OFF
        /// MMEMory:FFT&lt;1|2&gt;:LIMit:OFFSet ON | OFF
        /// MMEMory:BARgraph&lt;1|2&gt;:LIMit:OFFSet ON | OFF
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Limit_Offset">
        /// This control sets the offset state to the limit trace data for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitOffset(int Subsystem, int Subsystem_Number, bool Limit_Offset)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitOffset(this._handle, Subsystem, Subsystem_Number, System.Convert.ToUInt16(Limit_Offset));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the offset state to the limit trace data for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) When a limit file is generated, an offset value is added to the Y data. This value is specified in the following parameter field. Offset allows for example two limit files to be generated from a "golden unit", together forming a tolerance band, by generating a limit file for Upper Limit with an offset value of say 10 dBV and a limit file for Lower Limit with an offset value of -10 dBV. This produces a tolerance band with a width of 20 dBV so that the ideal frequency response of a selected DUT can be compared with the currently different DUT.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:LIMit:OFFSet?
        /// MMEMory:FFT&lt;1|2&gt;:LIMit:OFFSet?
        /// MMEMory:BARgraph&lt;1|2&gt;:LIMit:OFFSet?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Limit_Offset">
        /// This control gets the offset state to the limit trace data for the desired subsystem.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitOffset(int Subsystem, int Subsystem_Number, out bool Limit_Offset)
        {
            ushort Limit_OffsetAsUShort;
            int pInvokeResult = PInvoke.GetDisplayLimitOffset(this._handle, Subsystem, Subsystem_Number, out Limit_OffsetAsUShort);
            Limit_Offset = System.Convert.ToBoolean(Limit_OffsetAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the offset value to the limit trace data for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) It is an additive value for generating limit files based on the trace data set of an ideal DUT. Generating two limit files, one with a positive and the other with a negative offset, allows a tolerance band to be generated.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:LIMit:OFFSet:VALue
        /// MMEMory:FFT&lt;1|2&gt;:LIMit:OFFSet:VALue
        /// MMEMory:BARgraph&lt;1|2&gt;:LIMit:OFFSet:VALue
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Limit_Offset_Value">
        /// This control sets the offset value to the limit trace data for the desired subsystem.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLimitOffsetValue(int Subsystem, int Subsystem_Number, double Limit_Offset_Value)
        {
            int pInvokeResult = PInvoke.SetDisplayLimitOffsetValue(this._handle, Subsystem, Subsystem_Number, Limit_Offset_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the offset value to the limit trace data for the desired subsystem.
        /// 
        /// Note(s):
        /// 
        /// (1) It is an additive value for generating limit files based on the trace data set of an ideal DUT. Generating two limit files, one with a positive and the other with a negative offset, allows a tolerance band to be generated.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:LIMit:OFFSet:VALue?
        /// MMEMory:FFT&lt;1|2&gt;:LIMit:OFFSet:VALue?
        /// MMEMory:BARgraph&lt;1|2&gt;:LIMit:OFFSet:VALue?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor.
        /// </param>
        /// <param name="Limit_Offset_Value">
        /// This control gets the offset value to the limit trace data for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLimitOffsetValue(int Subsystem, int Subsystem_Number, out double Limit_Offset_Value)
        {
            int pInvokeResult = PInvoke.GetDisplayLimitOffsetValue(this._handle, Subsystem, Subsystem_Number, out Limit_Offset_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the current trace, complete with all scans, in the format specified by Set Display Store Trace As, under the specified file name for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:STORe 'filename'
        /// MMEMory:FFT&lt;1|2&gt;:STORe 'filename'
        /// MMEMory:WAVeform:STORe 'filename'
        /// MMEMory:BARgraph&lt;1|2&gt;:STORe 'filename'
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Store_Trace_To_File">
        /// This control stores the current trace, complete with all scans, in the format specified by Set Display Store Trace As, under the specified file name for the desired subsystem.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayStoreTraceToFile(int Subsystem, int Subsystem_Number, string Store_Trace_To_File)
        {
            int pInvokeResult = PInvoke.SetDisplayStoreTraceToFile(this._handle, Subsystem, Subsystem_Number, Store_Trace_To_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the current trace file name for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// MMEMory:SWEep&lt;1...4&gt;:STORe?
        /// MMEMory:FFT&lt;1|2&gt;:STORe?
        /// MMEMory:WAVeform:STORe?
        /// MMEMory:BARgraph&lt;1|2&gt;:STORe?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the control Store Trace To File.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Store_Trace_To_File">
        /// This control  returns the current trace file name for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayStoreTraceToFile(int Subsystem, int Subsystem_Number, int Buffer_Size, System.Text.StringBuilder Store_Trace_To_File)
        {
            int pInvokeResult = PInvoke.GetDisplayStoreTraceToFile(this._handle, Subsystem, Subsystem_Number, Buffer_Size, Store_Trace_To_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects whether is instrument in continuous or single measurement mode.
        /// 
        /// Remote-control command(s):
        /// INIT:CONT ON | OFF | WAI
        /// </summary>
        /// <param name="Measurement_Mode">
        /// This control selects whether is instrument in continuous, single or wait measurement mode.
        /// 
        /// Valid Values:
        /// VI_FALSE                    (0) - Single
        /// VI_TRUE                     (1) - Continuous
        /// RSUPV_MEASUREMENT_MODE_WAIT (2) - Wait
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous: Starts a continuous measurement.
        /// 
        /// (2) Single: Starts a single measurement.
        /// 
        /// (3) Wait: Continous measurement in which the SENSx:DATAy commands, which are used to query the measurement results, stop the IEC/IEEE bus until a measurement result is available.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementMode(int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetMeasurementMode(this._handle, Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether is instrument in continuous or single measurement mode.
        /// 
        /// Remote-control command(s):
        /// INIT:CONT?
        /// </summary>
        /// <param name="Measurement_Mode">
        /// Returns whether is instrument in continuous or single measurement mode.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementMode(out int Measurement_Mode)
        {
            int pInvokeResult = PInvoke.GetMeasurementMode(this._handle, out Measurement_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines mesurement timeout. If timeout occurs without a new measurement result being available, the last measurement result that was read out is returned.
        /// 
        /// Remote-control command(s):
        /// INITiate:CONTinuous:TIMeout
        /// </summary>
        /// <param name="Measurement_Timeout">
        /// This control defines mesurement timeout.
        /// 
        /// Valid Values:
        /// 0.0 to 1000.0 s
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasurementTimeout(double Measurement_Timeout)
        {
            int pInvokeResult = PInvoke.SetMeasurementTimeout(this._handle, Measurement_Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries mesurement timeout.
        /// 
        /// Remote-control command(s):
        /// INITiate:CONTinuous:TIMeout?
        /// </summary>
        /// <param name="Measurement_Timeout">
        /// This control returns mesurement timeout.
        /// 
        /// Valid Values:
        /// 0.0 to 1000.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasurementTimeout(out double Measurement_Timeout)
        {
            int pInvokeResult = PInvoke.GetMeasurementTimeout(this._handle, out Measurement_Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a single measurement. This function has no effect if it is output while a continuous measurement is being performed.
        /// 
        /// Remote-control command(s):
        /// INITiate[:IMMediate]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartMeasurement()
        {
            int pInvokeResult = PInvoke.StartMeasurement(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers all actions waiting for a trigger event and waits for operation completed (OPC) before returning the status code.
        /// 
        /// Remote-control command(s):
        /// *TRG
        /// *OPC?
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the triggering routine to be finished. If the length of time required for triggering exceeds the timeout value, then the function will return with a timeout error.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 15000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartMeasurementWaitOPC(int Timeout)
        {
            int pInvokeResult = PInvoke.StartMeasurementWaitOPC(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the measurement control type.
        /// 
        /// Remote-control command(s):
        /// INITiate:FORCe STARt | SINGle | STOP | CONTinuous
        /// </summary>
        /// <param name="Measurement">
        /// This control selects the measurement type.
        /// 
        /// Valid Values:
        /// RSUPV_MEAS_START    (0) - Start
        /// RSUPV_MEAS_STOP     (1) - Stop
        /// RSUPV_MEAS_SINGLE   (2) - Single
        /// RSUPV_MEAS_CONT     (3) - Continuous
        /// 
        /// Defaul Value: RSUPV_MEAS_START   (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Start: An in-progress measurement is stopped immediately. A new continuous measurement is started. Identical to INITiate:CONTinuous ON. Identical to pressing the Start key.
        /// 
        /// (2) Stop: Stops a measurement as if the STOP/CONT key was pressed while a measurement was in progress. (Identical to the "ABORt" command).
        /// 
        /// (3) Single: An in-progress measurement is stopped immediately. A new single measurement is started. Identical to INITiate:CONTinuous OFF
        /// 
        /// (4) Continuous: An in-progress measurement is stopped immediately.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MeasurementControl(int Measurement)
        {
            int pInvokeResult = PInvoke.MeasurementControl(this._handle, Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the analyzer level units.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:UNIT[1 | 2] BITS | DBFS | DBM | DBR | DBU | DBUI | DBV | DEGFRM | DPCT | DPCTV | DPCTW | DV | DW | FS| LSBS | NS | PCTFRM | PCTFS | PCTPPR | PCTUI | PCTVVR | PPMUI | PPR | UI | UIR | UIS | V | VVR | W | MV | UV  | MW | UW | DB | VPP | MVPP | UVPP | DMV | DUV | FSBIT | HEX | HZ | KHZ | DHZ | DKHZ | FFR | DPCTHZ | TOCT | OCT | DEC | S | MS | US | CYC | KCYC | MCYC | DS | DMS | DUS | MIN | DEG | RAD | DDEG | DRAD | PCT | VVON | PCTON | DBON | OHM | KOHM | DBMG | CORR  | POL
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement type.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// Note(s):
        /// 
        /// (1) The list of units offered at this point is dependent on whether the analog or digital analyzer is selected and in the digital case, on whether the Meas Mode = Audio Data, Jitter/Phase and Common/Input.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerUnit(int Channel, int Measurement, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerUnit(this._handle, Channel, Measurement, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the units.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:UNIT[1 | 2]?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Units">
        /// This control returns the units of analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerUnit(int Channel, int Measurement, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerUnit(this._handle, Channel, Measurement, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the Unit Funct Track parameter field or whether it can be user-selected.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:UNAuto[1 | 2] ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Unit_Auto">
        /// This control determines whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the Unit Funct Track parameter field or whether it can be user-selected.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerUnitAuto(int Channel, int Measurement, bool Unit_Auto)
        {
            int pInvokeResult = PInvoke.SetAnalyzerUnitAuto(this._handle, Channel, Measurement, System.Convert.ToUInt16(Unit_Auto));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the Unit Funct Track parameter field or whether it can be user-selected.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:UNAuto[1 | 2]?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Unit_Auto">
        /// This control gets whether the unit label displayed on the Y axis for Trace A or Trace B is the same as the unit set in the 
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerUnitAuto(int Channel, int Measurement, out bool Unit_Auto)
        {
            ushort Unit_AutoAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerUnitAuto(this._handle, Channel, Measurement, out Unit_AutoAsUShort);
            Unit_Auto = System.Convert.ToBoolean(Unit_AutoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets an user-defined unit.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:USERunit[1 | 2] 'Unitstring'
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="User_Unit">
        /// This control sets an user-defined unit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Defaul Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerUserUnit(int Channel, int Measurement, string User_Unit)
        {
            int pInvokeResult = PInvoke.SetAnalyzerUserUnit(this._handle, Channel, Measurement, User_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets an user-defined unit.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:USERunit[1 | 2]?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="User_Unit">
        /// This control gets an user-defined unit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerUserUnit(int Channel, int Measurement, System.Text.StringBuilder User_Unit)
        {
            int pInvokeResult = PInvoke.GetAnalyzerUserUnit(this._handle, Channel, Measurement, User_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the reference.
        /// 
        /// Note(s):
        /// 
        /// (1) References 'Meas Ch1' and 'Meas Ch2' are not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:REFerence:MODE&lt;1..2&gt; CH1Store | CH2Store | STORe | CH1Meas | CH2Meas | GENTrack | VALue | DIGoutampl
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC  (1)
        /// </param>
        /// <param name="Reference">
        /// This control selects the reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1S   (0) - Store Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2S   (1) - Store Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_STOR   (2) - Store
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1M   (3) - Meas Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2M   (4) - Meas Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_GENT   (5) - Gen Track
        /// RSUPV_ANALYZER_FUNCTION_REF_VAL    (6) - Value
        /// RSUPV_ANALYZER_FUNCTION_REF_DIG    (7) - DIGoutampl
        /// 
        /// Default Value: RSUPV_ANALYZER_FUNCTION_REF_VAL (6)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerReference(int Channel, int Measurement, int Reference)
        {
            int pInvokeResult = PInvoke.SetAnalyzerReference(this._handle, Channel, Measurement, Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the reference.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:REFerence:MODE&lt;1..2&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Reference">
        /// This control gets the reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1S   (0) - Store Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2S   (1) - Store Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_STOR   (2) - Store
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1M   (3) - Meas Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2M   (4) - Meas Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_GENT   (5) - Gen Track
        /// RSUPV_ANALYZER_FUNCTION_REF_VAL    (6) - Value
        /// RSUPV_ANALYZER_FUNCTION_REF_DIG    (7) - DIGoutampl
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerReference(int Channel, int Measurement, out int Reference)
        {
            int pInvokeResult = PInvoke.GetAnalyzerReference(this._handle, Channel, Measurement, out Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the reference value.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:REFerence&lt;1..2&gt;
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Reference_Value">
        /// This control sets the reference value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Units">
        /// This control selects the reference value unit.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_V (47) - V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerReferenceValue(int Channel, int Measurement, double Reference_Value, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerReferenceValue(this._handle, Channel, Measurement, Reference_Value, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the reference value.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;1 | 2 | 6&gt;:REFerence&lt;1..2&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Measurement">
        /// This control sets the measurement.
        /// 
        /// Valid Values: 
        /// RSUPV_ANALYZER_MEASUREMENT_FUNC  (1) - Measurement Function
        /// RSUPV_ANALYZER_MEASUREMENT_IMON  (2) - Input
        /// RSUPV_ANALYZER_MEASUREMENT_LMON  (6) - Level Monitor
        /// 
        /// Default Value: RSUPV_ANALYZER_MEASUREMENT_FUNC (1)
        /// </param>
        /// <param name="Reference_Value">
        /// This control gets the reference value.
        /// </param>
        /// <param name="Units">
        /// This control returns the units of reference value.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerReferenceValue(int Channel, int Measurement, out double Reference_Value, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerReferenceValue(this._handle, Channel, Measurement, out Reference_Value, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the frequency unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:UNIT[1 | 2] HZ | DHZ | DPCTHZ | TOCT | OCT | DEC | FFR | KHZ
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for frequency unit.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Units">
        /// This control sets the units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// 
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFrequencyUnit(int Channel, int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFrequencyUnit(this._handle, Channel, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:UNIT[1 | 2]?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for frequency unit.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Units">
        /// This control returns the units of analyzer.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// RSUPV_UNIT_MV     (52) - MV
        /// RSUPV_UNIT_UV     (53) - UV
        /// RSUPV_UNIT_MW     (54) - MW
        /// RSUPV_UNIT_UW     (55) - UW
        /// RSUPV_UNIT_MVPP   (56) - MVpp
        /// RSUPV_UNIT_UVPP   (57) - UVpp
        /// RSUPV_UNIT_DMV    (58) - dMV
        /// RSUPV_UNIT_DUV    (59) - dUV   
        /// RSUPV_UNIT_FSBIT  (60) - FSbit
        /// RSUPV_UNIT_KHZ    (61) - kHz
        /// RSUPV_UNIT_DKHZ   (62) - dkHz
        /// RSUPV_UNIT_MS     (63) - Ms
        /// RSUPV_UNIT_US     (64) - Us
        /// RSUPV_UNIT_KCYC   (65) - Kcyc
        /// RSUPV_UNIT_MCYC   (66) - Mcyc 
        /// RSUPV_UNIT_DMS    (67) - dMs
        /// RSUPV_UNIT_DUS    (68) - dUs
        /// RSUPV_UNIT_MIN    (69) - Min      
        /// RSUPV_UNIT_KOHM   (70) - kOhm
        /// RSUPV_UNIT_DBMG   (71) - dBMG 
        /// RSUPV_UNIT_CORR   (72) - Corr
        /// RSUPV_UNIT_POL    (73) - POL
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFrequencyUnit(int Channel, out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFrequencyUnit(this._handle, Channel, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the phase unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:PHASe:UNIT DEG | RAD | DDEG | S | DS
        /// </summary>
        /// <param name="Units">
        /// This control selects the phase unit.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_RAD (41) - RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerPhaseUnit(int Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerPhaseUnit(this._handle, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the phase unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:PHASe:UNIT?
        /// </summary>
        /// <param name="Units">
        /// This control returns the phase units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerPhaseUnit(out int Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerPhaseUnit(this._handle, out Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets frequency and phase unit auto.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:UNAuto[1 | 2] ON | OFF
        /// SENSe3:PHASe:UNAuto ON | OFF
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for unit auto.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Unit_Auto">
        /// This control sets the frequency unit auto.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_TRUE (1) - On
        /// </param>
        /// <param name="Phase_Unit_Auto">
        /// This control sets the phase unit auto.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_TRUE (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFrequencyPhaseUnitAuto(int Channel, bool Frequency_Unit_Auto, bool Phase_Unit_Auto)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFrequencyPhaseUnitAuto(this._handle, Channel, System.Convert.ToUInt16(Frequency_Unit_Auto), System.Convert.ToUInt16(Phase_Unit_Auto));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets frequency and phase unit auto.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:UNAuto[1 | 2]?
        /// SENSe3:PHASe:UNAuto?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for unit auto.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Unit_Auto">
        /// This control gets the frequency unit auto state.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <param name="Phase_Unit_Auto">
        /// This control gets the phase unit auto state.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFrequencyPhaseUnitAuto(int Channel, out bool Frequency_Unit_Auto, out bool Phase_Unit_Auto)
        {
            ushort Frequency_Unit_AutoAsUShort;
            ushort Phase_Unit_AutoAsUShort;
            int pInvokeResult = PInvoke.GetAnalyzerFrequencyPhaseUnitAuto(this._handle, Channel, out Frequency_Unit_AutoAsUShort, out Phase_Unit_AutoAsUShort);
            Frequency_Unit_Auto = System.Convert.ToBoolean(Frequency_Unit_AutoAsUShort);
            Phase_Unit_Auto = System.Convert.ToBoolean(Phase_Unit_AutoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency and phase user unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:USERunit[1 | 2] 'Unitstring'
        /// SENSe3:PHASe:USERunit 'Unitstring'
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for user unit.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_User_Unit">
        /// This control sets the frequency user unit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Phase_User_Unit">
        /// This control sets the phase user unit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFrequencyPhaseUserUnit(int Channel, string Frequency_User_Unit, string Phase_User_Unit)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFrequencyPhaseUserUnit(this._handle, Channel, Frequency_User_Unit, Phase_User_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency and phase user unit.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:USERunit[1 | 2]?
        /// SENSe3:PHASe:USERunit?
        /// </summary>
        /// <param name="Channel">
        /// This control sets the channel for user unit.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_User_Unit">
        /// This control gets the frequency user unit.
        /// </param>
        /// <param name="Phase_User_Unit">
        /// This control gets the phase user unit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFrequencyPhaseUserUnit(int Channel, System.Text.StringBuilder Frequency_User_Unit, System.Text.StringBuilder Phase_User_Unit)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFrequencyPhaseUserUnit(this._handle, Channel, Frequency_User_Unit, Phase_User_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the frequency and phase reference.
        /// 
        /// Note(s):
        /// 
        /// (1) Reference Frequency 'Store' is not available in UPP.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:REFerence:MODE CH1Store | CH2Store | STORe | CH1Meas | CH2Meas | GENTrack | VALue | SOURce | DIGoutampl | MREFchannel | CH3Store | CH4Store | CH5Store | CH6Store | CH7Store
        /// SENSe3:PHASe:REFerence:MODE STORe | VALue | GENTrack 
        /// 
        /// </summary>
        /// <param name="Ref_Frequency">
        /// This control selects the frequency reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1S   (0)  - Store Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2S   (1)  - Store Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_STOR   (2)  - Store
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1M   (3)  - Meas Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2M   (4)  - Meas Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_GENT   (5)  - Gen Track
        /// RSUPV_ANALYZER_FUNCTION_REF_VAL    (6)  - Value
        /// RSUPV_ANALYZER_FUNCTION_REF_DIG    (7)  - Digoutampl
        /// RSUPV_ANALYZER_FUNCTION_REF_SOUR   (8)  - Source
        /// RSUPV_ANALYZER_FUNCTION_REF_MREF   (9)  - Meas Ref Ch
        /// RSUPV_ANALYZER_FUNCTION_REF_CH3S   (10) - Store Ch3
        /// RSUPV_ANALYZER_FUNCTION_REF_CH4S   (11) - Store Ch4
        /// RSUPV_ANALYZER_FUNCTION_REF_CH5S   (12) - Store Ch5
        /// RSUPV_ANALYZER_FUNCTION_REF_CH6S   (13) - Store Ch6
        /// RSUPV_ANALYZER_FUNCTION_REF_CH7S   (14) - Store Ch7
        /// RSUPV_ANALYZER_FUNCTION_REF_CH8S   (15) - Store Ch8
        /// RSUPV_ANALYZER_FUNCTION_REF_CH9S   (16) - Store Ch9
        /// RSUPV_ANALYZER_FUNCTION_REF_CH10S  (17) - Store Ch10
        /// RSUPV_ANALYZER_FUNCTION_REF_CH11S  (18) - Store Ch11
        /// RSUPV_ANALYZER_FUNCTION_REF_CH12S  (19) - Store Ch12
        /// RSUPV_ANALYZER_FUNCTION_REF_CH13S  (20) - Store Ch13
        /// RSUPV_ANALYZER_FUNCTION_REF_CH14S  (21) - Store Ch14
        /// RSUPV_ANALYZER_FUNCTION_REF_CH15S  (22) - Store Ch15
        /// RSUPV_ANALYZER_FUNCTION_REF_CH16S  (23) - Store Ch16
        /// 
        /// Default Value: RSUPV_ANALYZER_FUNCTION_REF_VAL (6)
        /// 
        /// </param>
        /// <param name="Ref_Phase">
        /// This control selects the phase reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_STOR   (0) - Store
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_VAL    (1) - Value
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_GENT   (2) - Gen Track
        /// 
        /// Default Value: RSUPV_ANALYZER_FUNCTION_PHASE_REF_VAL (1)
        /// 
        /// Note(s):
        /// 
        /// (1) This control is available only when Analyzer Instrument is set to Analog (function rsupv_SetAnalyzerInstrument).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFrequencyPhaseReference(int Ref_Frequency, int Ref_Phase)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFrequencyPhaseReference(this._handle, Ref_Frequency, Ref_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the frequency and phase reference.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:REFerence:MODE?
        /// SENSe3:PHASe:REFerence:MODE?
        /// 
        /// </summary>
        /// <param name="Ref_Frequency">
        /// This control gets the frequency reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1S   (0)  - Store Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2S   (1)  - Store Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_STOR   (2)  - Store
        /// RSUPV_ANALYZER_FUNCTION_REF_CH1M   (3)  - Meas Ch1
        /// RSUPV_ANALYZER_FUNCTION_REF_CH2M   (4)  - Meas Ch2
        /// RSUPV_ANALYZER_FUNCTION_REF_GENT   (5)  - Gen Track
        /// RSUPV_ANALYZER_FUNCTION_REF_VAL    (6)  - Value
        /// RSUPV_ANALYZER_FUNCTION_REF_DIG    (7)  - Digoutampl
        /// RSUPV_ANALYZER_FUNCTION_REF_SOUR   (8)  - Source
        /// RSUPV_ANALYZER_FUNCTION_REF_MREF   (9)  - Meas Ref Ch
        /// RSUPV_ANALYZER_FUNCTION_REF_CH3S   (10) - Store Ch3
        /// RSUPV_ANALYZER_FUNCTION_REF_CH4S   (11) - Store Ch4
        /// RSUPV_ANALYZER_FUNCTION_REF_CH5S   (12) - Store Ch5
        /// RSUPV_ANALYZER_FUNCTION_REF_CH6S   (13) - Store Ch6
        /// RSUPV_ANALYZER_FUNCTION_REF_CH7S   (14) - Store Ch7
        /// RSUPV_ANALYZER_FUNCTION_REF_CH8S   (15) - Store Ch8
        /// RSUPV_ANALYZER_FUNCTION_REF_CH9S   (16) - Store Ch9
        /// RSUPV_ANALYZER_FUNCTION_REF_CH10S  (17) - Store Ch10
        /// RSUPV_ANALYZER_FUNCTION_REF_CH11S  (18) - Store Ch11
        /// RSUPV_ANALYZER_FUNCTION_REF_CH12S  (19) - Store Ch12
        /// RSUPV_ANALYZER_FUNCTION_REF_CH13S  (20) - Store Ch13
        /// RSUPV_ANALYZER_FUNCTION_REF_CH14S  (21) - Store Ch14
        /// RSUPV_ANALYZER_FUNCTION_REF_CH15S  (22) - Store Ch15
        /// RSUPV_ANALYZER_FUNCTION_REF_CH16S  (23) - Store Ch16
        /// 
        /// </param>
        /// <param name="Ref_Phase">
        /// This control gets the phase reference.
        /// 
        /// Valid Values:
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_STOR   (0) - Store
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_VAL    (1) - Value
        /// RSUPV_ANALYZER_FUNCTION_PHASE_REF_GENT   (2) - Gen Track
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFrequencyPhaseReference(out int Ref_Frequency, out int Ref_Phase)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFrequencyPhaseReference(this._handle, out Ref_Frequency, out Ref_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency, phase and group delay values.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:REFerence
        /// SENSe3:PHASe:REFerence
        /// SENSe3:GROupdelay:REFerence
        /// </summary>
        /// <param name="Ref_Frequency_Value">
        /// This control sets the frequency reference value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Frequency_Units">
        /// This control selects the frequency unit.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_HZ (33) - Hz
        /// 
        /// </param>
        /// <param name="Ref_Phase_Value">
        /// This control sets the phase reference value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Phase_Units">
        /// This control selects the phase unit.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_RAD (41) - RAD
        /// 
        /// </param>
        /// <param name="Group_Delay_Ref_Value">
        /// This control sets the group delay reference value.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Group_Delay_Units">
        /// This control selects the group delay unit.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// Default Value:
        /// RSUPV_UNIT_S (42) - s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAnalyzerFrequencyPhaseReferenceValue(double Ref_Frequency_Value, int Frequency_Units, double Ref_Phase_Value, int Phase_Units, double Group_Delay_Ref_Value, int Group_Delay_Units)
        {
            int pInvokeResult = PInvoke.SetAnalyzerFrequencyPhaseReferenceValue(this._handle, Ref_Frequency_Value, Frequency_Units, Ref_Phase_Value, Phase_Units, Group_Delay_Ref_Value, Group_Delay_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency, phase and group delay values.
        /// 
        /// Remote-control command(s):
        /// SENSe3:FREQuency:REFerence?
        /// SENSe3:PHASe:REFerence?
        /// SENSe3:GROupdelay:REFerence?
        /// </summary>
        /// <param name="Ref_Frequency_Value">
        /// This control gets the frequency reference value.
        /// </param>
        /// <param name="Frequency_Units">
        /// This control returns the frequency units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <param name="Ref_Phase_Value">
        /// This control gets the phase reference value.
        /// </param>
        /// <param name="Phase_Units">
        /// This control returns the phase units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <param name="Group_Delay_Ref_Value">
        /// This control gets the group delay reference value.
        /// </param>
        /// <param name="Group_Delay_Units">
        /// This control returns the group delay units.
        /// 
        /// Valid Values:
        /// RSUPV_UNIT_PCT     (0) - %
        /// RSUPV_UNIT_PCTFRM  (1) - %FRM
        /// RSUPV_UNIT_PCTFS   (2) - %FS
        /// RSUPV_UNIT_PCTON   (3) - %on
        /// RSUPV_UNIT_PCTPPR  (4) - %P/Pr
        /// RSUPV_UNIT_PCTUI   (5) - %UI
        /// RSUPV_UNIT_PCTVVR  (6) - %V/Vr
        /// RSUPV_UNIT_BITS    (7) - bits
        /// RSUPV_UNIT_CYC     (8) - cyc
        /// RSUPV_UNIT_DPCT    (9) - d%
        /// RSUPV_UNIT_DPCTHZ (10) - d%Hz
        /// RSUPV_UNIT_DPCTV  (11) - d%V
        /// RSUPV_UNIT_DPCTW  (12) - d%W
        /// RSUPV_UNIT_DB     (13) - dB
        /// RSUPV_UNIT_DBFS   (14) - dBFS
        /// RSUPV_UNIT_DBM    (15) - dBm
        /// RSUPV_UNIT_DBON   (16) - dBon
        /// RSUPV_UNIT_DBR    (17) - dBr
        /// RSUPV_UNIT_DBU    (18) - dBu
        /// RSUPV_UNIT_DBUI   (19) - dBUI
        /// RSUPV_UNIT_DBV    (20) - dBV
        /// RSUPV_UNIT_DDEG   (21) - dDeg
        /// RSUPV_UNIT_DEC    (22) - Dec
        /// RSUPV_UNIT_DEG    (23) - DEG
        /// RSUPV_UNIT_DEGFRM (24) - Deg FRM
        /// RSUPV_UNIT_DHZ    (25) - dHz
        /// RSUPV_UNIT_DRAD   (26) - dRAD
        /// RSUPV_UNIT_DS     (27) - ds
        /// RSUPV_UNIT_DV     (28) - dV
        /// RSUPV_UNIT_DW     (29) - dW
        /// RSUPV_UNIT_FFR    (30) - f/fr
        /// RSUPV_UNIT_FS     (31) - FS
        /// RSUPV_UNIT_HEX    (32) - Hex
        /// RSUPV_UNIT_HZ     (33) - Hz
        /// RSUPV_UNIT_LSBS   (34) - LSBS
        /// RSUPV_UNIT_MLT    (35) - MLT
        /// RSUPV_UNIT_NS     (36) - ns
        /// RSUPV_UNIT_OCT    (37) - Oct
        /// RSUPV_UNIT_OHM    (38) - Ohm
        /// RSUPV_UNIT_PPR    (39) - P/Pr
        /// RSUPV_UNIT_PPMUI  (40) - ppm
        /// RSUPV_UNIT_RAD    (41) - RAD
        /// RSUPV_UNIT_S      (42) - s
        /// RSUPV_UNIT_TOCT   (43) - Toct
        /// RSUPV_UNIT_UI     (44) - UI
        /// RSUPV_UNIT_UIR    (45) - UIr
        /// RSUPV_UNIT_UIS    (46) - UIs
        /// RSUPV_UNIT_V      (47) - V
        /// RSUPV_UNIT_VVON   (48) - V/on
        /// RSUPV_UNIT_VVR    (49) - V/Vr
        /// RSUPV_UNIT_VPP    (50) - Vpp
        /// RSUPV_UNIT_W      (51) - W
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAnalyzerFrequencyPhaseReferenceValue(out double Ref_Frequency_Value, out int Frequency_Units, out double Ref_Phase_Value, out int Phase_Units, out double Group_Delay_Ref_Value, out int Group_Delay_Units)
        {
            int pInvokeResult = PInvoke.GetAnalyzerFrequencyPhaseReferenceValue(this._handle, out Ref_Frequency_Value, out Frequency_Units, out Ref_Phase_Value, out Phase_Units, out Group_Delay_Ref_Value, out Group_Delay_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is reading measurement results. Depending on the measurements activated in the Analyzer, the R&amp;S UPV indicates up to 16 results.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n&gt;:DATA&lt;1...32&gt;?
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement">
        /// This control selects the measurement result.
        /// 
        /// Valid Values: 
        /// RSUPV_MEASUREMENT_FUNCTION        (0) - Measurement Function
        /// RSUPV_MEASUREMENT_INPUT_MONITOR   (1) - Input Monitor
        /// RSUPV_MEASUREMENT_LEVEL_MONITOR   (2) - Level Monitor
        /// RSUPV_MEASUREMENT_FREQUENCY       (3) - Frequency
        /// RSUPV_MEASUREMENT_PHASE_GRP_DELAY (4) - Phase or Group Delay
        /// 
        /// Default Value: RSUPV_MEASUREMENT_FUNCTION (0)
        /// 
        /// </param>
        /// <param name="Measurement_Result">
        /// This control returns the analyzer measurement result.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the string desribing the measurement result units.
        /// 
        /// Note(s):
        /// 
        /// (1) The array should be long enough to accomodate the unit string.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadMeasurementResult(int Channel, int Measurement, out double Measurement_Result, System.Text.StringBuilder Units)
        {
            int pInvokeResult = PInvoke.ReadMeasurementResult(this._handle, Channel, Measurement, out Measurement_Result, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is reading minimum or maximum of measurement results. Depending on the measurements activated in the Analyzer, the R&amp;S UPV indicates up to 16 results.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;n&gt;:DATA&lt;1...32&gt;? MIN | MAX
        /// </summary>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement">
        /// This control selects the measurement result.
        /// 
        /// Valid Values: 
        /// RSUPV_MEASUREMENT_FUNCTION        (0) - Measurement Function
        /// RSUPV_MEASUREMENT_INPUT_MONITOR   (1) - Input Monitor
        /// RSUPV_MEASUREMENT_LEVEL_MONITOR   (2) - Level Monitor
        /// RSUPV_MEASUREMENT_FREQUENCY       (3) - Frequency
        /// RSUPV_MEASUREMENT_PHASE_GRP_DELAY (4) - Phase or Group Delay
        /// 
        /// Default Value: RSUPV_MEASUREMENT_FUNCTION (0)
        /// 
        /// </param>
        /// <param name="Modifier">
        /// This control selects which statistical type of measurement should be queried.
        /// 
        /// Valid Values: 
        /// RSUPV_VAL_MAX (0) - Maximum
        /// RSUPV_VAL_MIN (1) - Minimum
        /// 
        /// Default Value: RSUPV_VAL_MAX (0)
        /// </param>
        /// <param name="Measurement_Result">
        /// This control returns the analyzer measurement result.
        /// 
        /// </param>
        /// <param name="Units">
        /// This control returns the string desribing the measurement result units.
        /// 
        /// Note(s):
        /// 
        /// (1) The array should be long enough to accomodate the unit string.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadMeasurementResultMinMax(int Channel, int Measurement, int Modifier, out double Measurement_Result, System.Text.StringBuilder Units)
        {
            int pInvokeResult = PInvoke.ReadMeasurementResultMinMax(this._handle, Channel, Measurement, Modifier, out Measurement_Result, Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function outputs trace data sets for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:AX?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:AY?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:BX?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:BY?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:AX?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:AY?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:BX?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:BY?
        /// TRACe:WAVeform:LOAD:AX?
        /// TRACe:WAVeform:LOAD:AY?
        /// TRACe:WAVeform:LOAD:BX?
        /// TRACe:WAVeform:LOAD:BY?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:AX?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:AY?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:BX?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:BY?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_Set">
        /// This control selects the data set for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DATA_SET_AX  (0) - AX
        /// RSUPV_DATA_SET_AY  (1) - AY
        /// RSUPV_DATA_SET_BX  (2) - BX
        /// RSUPV_DATA_SET_BY  (3) - BY
        /// 
        /// Default Value: RSUPV_DATA_SET_AX   (0)
        /// 
        /// Note(s):
        /// 
        /// (1) AX designates the X-axis of trace A. 
        /// 
        /// (2) AY designates the Y-axis of trace A. 
        /// 
        /// (3) BX designates the X-axis of trace B. 
        /// 
        /// (4) BY designates the Y-axis of trace B.
        /// </param>
        /// <param name="Number_Of_Results">
        /// This control sets the number of resutls to be returned by the control Output.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 100
        /// </param>
        /// <param name="Output">
        /// This control outputs trace data sets for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadTraceDataSets(int Subsystem, int Subsystem_Number, int Data_Set, int Number_Of_Results, double[] Output)
        {
            int pInvokeResult = PInvoke.ReadTraceDataSets(this._handle, Subsystem, Subsystem_Number, Data_Set, Number_Of_Results, Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves sweep graph trace data sets.
        /// 
        /// Note(s):
        /// 
        /// (1) The transfer of data for the X-axis (...:AX and ...:BX) is reserved exclusively for the sweep subsystem! "X source" must be set to "Manual" - use function SetDisplaySweepGraphXSource.
        /// 
        /// Remote-control command(s):
        /// TRACe:SWEep&lt;1...4&gt;:STORe:AX &lt;n,n,n,n&gt;                                                 TRACe:SWEep&lt;1...4&gt;:STORe:BX &lt;n,n,n,n&gt;
        /// TRACe:SWEep&lt;1...4&gt;:STORe:AY &lt;n,n,n,n&gt;
        /// TRACe:SWEep&lt;1...4&gt;:STORe:BY &lt;n,n,n,n&gt;
        /// TRACe:FFT&lt;1|2&gt;:STORe:AY &lt;n,n,n,n&gt;
        /// TRACe:FFT&lt;1|2&gt;:STORe:BY &lt;n,n,n,n&gt;
        /// TRACe:WAVeform:STORe:AY &lt;n,n,n,n&gt;
        /// TRACe:WAVeform:STORe:BY &lt;n,n,n,n&gt;
        /// TRACe:BARgraph&lt;1|2&gt;:STORe:AY &lt;n,n,n,n&gt;
        /// TRACe:BARgraph&lt;1|2&gt;:STORe:BY &lt;n,n,n,n&gt;
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_Set">
        /// This control selects the data set for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DATA_SET_AX  (0) - AX
        /// RSUPV_DATA_SET_AY  (1) - AY
        /// RSUPV_DATA_SET_BX  (2) - BX
        /// RSUPV_DATA_SET_BY  (3) - BY
        /// 
        /// Default Value: RSUPV_DATA_SET_AX   (0)
        /// 
        /// Note(s):
        /// 
        /// (1) AX designates the X-axis of trace A. 
        /// 
        /// (2) AY designates the Y-axis of trace A. 
        /// 
        /// (3) BX designates the X-axis of trace B. 
        /// 
        /// (4) BY designates the Y-axis of trace B.
        /// 
        /// (5) AX and BX are available only for Sweep Graph subsystem.
        /// </param>
        /// <param name="Number_Of_Data_Sets">
        /// This control sets the number of resutls to be entered by the control Data Sets.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 4
        /// </param>
        /// <param name="Data_Sets">
        /// This control saves graph trace data sets for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteTraceDataSets(int Subsystem, int Subsystem_Number, int Data_Set, int Number_Of_Data_Sets, double[] Data_Sets)
        {
            int pInvokeResult = PInvoke.WriteTraceDataSets(this._handle, Subsystem, Subsystem_Number, Data_Set, Number_Of_Data_Sets, Data_Sets);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function outputs trace data set count for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:COUNt:AX?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:COUNt:AY?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:COUNt:BX?
        /// TRACe:SWEep&lt;1...4&gt;:LOAD:COUNt:BY?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:COUNt:AX?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:COUNt:AY?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:COUNt:BX?
        /// TRACe:FFT&lt;1|2&gt;:LOAD:COUNt:BY?
        /// TRACe:WAVeform:LOAD:COUNt:AX?
        /// TRACe:WAVeform:LOAD:COUNt:AY?
        /// TRACe:WAVeform:LOAD:COUNt:BX?
        /// TRACe:WAVeform:LOAD:COUNt:BY?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:COUNt:AX?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:COUNt:AY?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:COUNt:BX?
        /// TRACe:BARgraph&lt;1|2&gt;:LOAD:COUNt:BY?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_Set">
        /// This control selects the data set for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DATA_SET_AX  (0) - AX
        /// RSUPV_DATA_SET_AY  (1) - AY
        /// RSUPV_DATA_SET_BX  (2) - BX
        /// RSUPV_DATA_SET_BY  (3) - BY
        /// 
        /// Default Value: RSUPV_DATA_SET_AX   (0)
        /// </param>
        /// <param name="Output_Count">
        /// This control outputs trace data set count for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadTraceDataSetCount(int Subsystem, int Subsystem_Number, int Data_Set, out int Output_Count)
        {
            int pInvokeResult = PInvoke.ReadTraceDataSetCount(this._handle, Subsystem, Subsystem_Number, Data_Set, out Output_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function outputs trace data list for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// TRACe:SWEep&lt;1...4&gt;:LDList:AX?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:AY?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:BX?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:BY?
        /// TRACe:FFT&lt;1|2&gt;:LDList:AX?
        /// TRACe:FFT&lt;1|2&gt;:LDList:AY?
        /// TRACe:FFT&lt;1|2&gt;:LDList:BX?
        /// TRACe:FFT&lt;1|2&gt;:LDList:BY?
        /// TRACe:WAVeform:LDList:AX?
        /// TRACe:WAVeform:LDList:AY?
        /// TRACe:WAVeform:LDList:BX?
        /// TRACe:WAVeform:LDList:BY?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:AX?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:AY?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:BX?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:BY?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_List">
        /// This control selects the data list for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DATA_SET_AX  (0) - AX
        /// RSUPV_DATA_SET_AY  (1) - AY
        /// RSUPV_DATA_SET_BX  (2) - BX
        /// RSUPV_DATA_SET_BY  (3) - BY
        /// 
        /// Default Value: RSUPV_DATA_SET_AX   (0)
        /// </param>
        /// <param name="Number_Of_Results">
        /// This control sets the number of resutls to be returned by the control Output.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 100
        /// </param>
        /// <param name="Output">
        /// This control outputs trace data list for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadTraceDataList(int Subsystem, int Subsystem_Number, int Data_List, int Number_Of_Results, double[] Output)
        {
            int pInvokeResult = PInvoke.ReadTraceDataList(this._handle, Subsystem, Subsystem_Number, Data_List, Number_Of_Results, Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function outputs trace data list count for the desired subsystem.
        /// 
        /// Remote-control command(s):
        /// TRACe:SWEep&lt;1...4&gt;:LDList:COUNt:AX?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:COUNt:AY?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:COUNt:BX?
        /// TRACe:SWEep&lt;1...4&gt;:LDList:COUNt:BY?
        /// TRACe:FFT&lt;1|2&gt;:LDList:COUNt:AX?
        /// TRACe:FFT&lt;1|2&gt;:LDList:COUNt:AY?
        /// TRACe:FFT&lt;1|2&gt;:LDList:COUNt:BX?
        /// TRACe:FFT&lt;1|2&gt;:LDList:COUNt:BY?
        /// TRACe:WAVeform:LDList:COUNt:AX?
        /// TRACe:WAVeform:LDList:COUNt:AY?
        /// TRACe:WAVeform:LDList:COUNt:BX?
        /// TRACe:WAVeform:LDList:COUNt:BY?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:COUNt:AX?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:COUNt:AY?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:COUNt:BX?
        /// TRACe:BARgraph&lt;1|2&gt;:LDList:COUNt:BY?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_WAV  (2) - Waveform
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Data_List">
        /// This control selects the data list for the desired subsystem.
        /// 
        /// Valid Range: 
        /// RSUPV_DATA_SET_AX  (0) - AX
        /// RSUPV_DATA_SET_AY  (1) - AY
        /// RSUPV_DATA_SET_BX  (2) - BX
        /// RSUPV_DATA_SET_BY  (3) - BY
        /// 
        /// Default Value: RSUPV_DATA_SET_AX   (0)
        /// </param>
        /// <param name="Output_Count">
        /// This control outputs trace data list count for the desired subsystem.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadTraceDataListCount(int Subsystem, int Subsystem_Number, int Data_List, out int Output_Count)
        {
            int pInvokeResult = PInvoke.ReadTraceDataListCount(this._handle, Subsystem, Subsystem_Number, Data_List, out Output_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the x-axis data or the y-axis data of selected channel.
        /// 
        /// Remote-control command(s):
        /// DATA:SWEep&lt;1...4&gt;:X?
        /// DATA:SWEep&lt;1...4&gt;:Y?
        /// DATA:FFT&lt;1|2&gt;:X?
        /// DATA:FFT&lt;1|2&gt;:Y?
        /// DATA:BARgraph&lt;1|2&gt;:X?
        /// DATA:BARgraph&lt;1|2&gt;:Y?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Axis">
        /// This control selects the axis.
        /// 
        /// Valid Range: 
        /// RSUPV_AXIS_X  (0) - X
        /// RSUPV_AXIS_Y  (1) - Y
        /// 
        /// Default Value: RSUPV_AXIS_X (0)
        /// </param>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_Results">
        /// This control sets the number of resutls to be returned by the control Output.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 100
        /// </param>
        /// <param name="Output">
        /// This control returns desired data.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadAxisData(int Subsystem, int Subsystem_Number, int Axis, int Channel, int Number_Of_Results, double[] Output)
        {
            int pInvokeResult = PInvoke.ReadAxisData(this._handle, Subsystem, Subsystem_Number, Axis, Channel, Number_Of_Results, Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads count of the x-axis data or the y-axis data of selected channel.
        /// 
        /// Remote-control command(s):
        /// DATA:SWEep&lt;1...4&gt;:COUNt:X?
        /// DATA:SWEep&lt;1...4&gt;:COUNt:Y?
        /// DATA:FFT&lt;1|2&gt;:COUNt:X?
        /// DATA:FFT&lt;1|2&gt;:COUNt:Y?
        /// DATA:BARgraph&lt;1|2&gt;:COUNt:X?
        /// DATA:BARgraph&lt;1|2&gt;:COUNt:Y?
        /// </summary>
        /// <param name="Subsystem">
        /// This control selects the sysbsystem type.
        /// 
        /// Valid Values:
        /// RSUPV_DISP_SUBSYS_SWE  (0) - Sweep Graph
        /// RSUPV_DISP_SUBSYS_FFT  (1) - FFT Graph
        /// RSUPV_DISP_SUBSYS_BAR  (3) - Bargraph
        /// 
        /// Default Value: RSUPV_DISP_SUBSYS_SWE  (0)
        /// </param>
        /// <param name="Subsystem_Number">
        /// This control sets the subsystem number.
        /// 
        /// Valid Values:
        /// 1 to 4 for Sweep Graph
        /// 1 for FFT Monitor
        /// 1 to 2 for FFT Graph
        /// 1 for Waveform
        /// 1 to 2 for Bargraph
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is ignored for subsystems FFT Monitor and Waveform.
        /// </param>
        /// <param name="Axis">
        /// This control selects the axis.
        /// 
        /// Valid Range: 
        /// RSUPV_AXIS_X  (0) - X
        /// RSUPV_AXIS_Y  (1) - Y
        /// 
        /// Default Value: RSUPV_AXIS_X (0)
        /// </param>
        /// <param name="Channel">
        /// This control selects the channel.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Output_Count">
        /// This control returns count of desired data.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadAxisDataCount(int Subsystem, int Subsystem_Number, int Axis, int Channel, out int Output_Count)
        {
            int pInvokeResult = PInvoke.ReadAxisDataCount(this._handle, Subsystem, Subsystem_Number, Axis, Channel, out Output_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets a minimum timeout value for driver I/O transactions in milliseconds. The timeout period may vary on computer platforms.
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Sets the I/O timeout for all functions in the driver. It is specified in milliseconds.
        /// 
        /// Valid Range: &gt; 0 ms
        /// 
        /// Default Value: 10000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setTimeOut(int Timeout)
        {
            int pInvokeResult = PInvoke.setTimeOut(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the timeout value for driver I/O transactions in milliseconds.
        /// 
        /// The timeout period may vary on computer platforms.
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Returns the timeout value for driver I/O transactions in milliseconds.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int getTimeOut(out int Timeout)
        {
            int pInvokeResult = PInvoke.getTimeOut(this._handle, out Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the screen content to be output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:SOURce WINDow | GRAPhics
        /// </summary>
        /// <param name="Source">
        /// This control selects the screen content to be output.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_SOURCE_WINDOW    (0) - UPV Window (Bitmap)
        /// RSUPV_HCOPY_SOURCE_GRAPHICS  (1) - Active Graphics (Vector)
        /// 
        /// Default Value: RSUPV_HCOPY_SOURCE_WINDOW  (0)
        /// 
        /// Notes:
        /// 
        /// (1) UPV Window (Bitmap): This setting outputs the entire screen of the R&amp;S UPV as a bitmap.
        /// 
        /// (2) Active Graphics (Vector): This setting outputs the momentarily active graphical window as a vector graphic. This is for the graphics "FFT Monitor", "FFT Graph", "Waveform", "Bargraph" and "Sweep Graph".
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopySource(int Source)
        {
            int pInvokeResult = PInvoke.SetHardcopySource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the screen content to be output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:SOURce?
        /// </summary>
        /// <param name="Source">
        /// This control returns the screen content to be output.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_SOURCE_WINDOW    (0) - UPV Window (Bitmap)
        /// RSUPV_HCOPY_SOURCE_GRAPHICS  (1) - Active Graphics (Vector)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopySource(out int Source)
        {
            int pInvokeResult = PInvoke.GetHardcopySource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the destination for the screen content to be output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:DESTination PRINter | FILE | CLIPboard
        /// </summary>
        /// <param name="Destination">
        /// This control selects the destination for the screen content to be output.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_DESTIN_PRINTER    (0) - Printer
        /// RSUPV_HCOPY_DESTIN_FILE       (1) - File
        /// RSUPV_HCOPY_DESTIN_CLIPBRD    (2) - Clipboard
        /// 
        /// Default Value: RSUPV_HCOPY_DESTIN_PRINTER  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Printer: The screen content selected under "Source" is output direct to the printer set as the default printer under Windows XP.
        /// 
        /// (2) File: The screen content selected under "Source" is output to a file specified under "File Name" - set by command HCOPy:FILE 'filename' or function rsupv_SetHardcopyFileName.
        /// 
        /// (3) Clipboard: The screen content selected under "Source" is output direct to the Windows clipboard and can be used direct in other applications.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyDestination(int Destination)
        {
            int pInvokeResult = PInvoke.SetHardcopyDestination(this._handle, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the destination for the screen content to be output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:DESTination?
        /// </summary>
        /// <param name="Destination">
        /// This control returns the destination for the screen content to be output.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_DESTIN_PRINTER    (0) - Printer
        /// RSUPV_HCOPY_DESTIN_FILE       (1) - File
        /// RSUPV_HCOPY_DESTIN_CLIPBRD    (2) - Clipboard
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyDestination(out int Destination)
        {
            int pInvokeResult = PInvoke.GetHardcopyDestination(this._handle, out Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the orientation wished on the Windows printer (only if "Destination" is configured as "Printer").
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:ORIentation PORTrait | LANDscape
        /// </summary>
        /// <param name="Orientation">
        /// This control selects the orientation wished on the Windows printer.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_ORIENTATION_PORTRAIT    (0) - Portrait
        /// RSUPV_HCOPY_ORIENTATION_LANDSCAPE   (1) - Landscape
        /// 
        /// Default Value: RSUPV_HCOPY_ORIENTATION_PORTRAIT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Portrait: Output on the printer is in portrait format.
        /// 
        /// (2) Landscape: Output on the printer is in landscape format.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyOrientation(int Orientation)
        {
            int pInvokeResult = PInvoke.SetHardcopyOrientation(this._handle, Orientation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the orientation wished on the Windows printer.
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:ORIentation?
        /// </summary>
        /// <param name="Orientation">
        /// This control returns the orientation wished on the Windows printer.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_ORIENTATION_PORTRAIT    (0) - Portrait
        /// RSUPV_HCOPY_ORIENTATION_LANDSCAPE   (1) - Landscape
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyOrientation(out int Orientation)
        {
            int pInvokeResult = PInvoke.GetHardcopyOrientation(this._handle, out Orientation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for output to a file (only if "Destination" is configured as "File").
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE:MODe NEW | OVERwrite | INCRement
        /// </summary>
        /// <param name="Store_Mode">
        /// This control selects the mode for output to a file.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_FILE_MODE_NEW       (0) - New
        /// RSUPV_HCOPY_FILE_MODE_OVERWRITE (1) - Overwrite
        /// RSUPV_HCOPY_FILE_MODE_INCREMENT (2) - AutoIncrement
        /// 
        /// Default Value: RSUPV_HCOPY_ORIENTATION_PORTRAIT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) New: Press H Copy to open the file selection box and enter the name of the destination file.
        /// 
        /// (2) Overwrite: Output is always to the file of "File Name", which is overwritten without asking you each time.
        /// 
        /// (3) AutoIncrement: Output is to a file whose name is composed of two parts: The beginning of the file name is that name entered as "File Name", followed by a consecutive number that is incremented by 1 every time you press H Copy .
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyStoreMode(int Store_Mode)
        {
            int pInvokeResult = PInvoke.SetHardcopyStoreMode(this._handle, Store_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode for output to a file.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE:MODe?
        /// </summary>
        /// <param name="Store_Mode">
        /// This control returns the mode for output to a file.
        /// 
        /// Valid Values:
        /// RSUPV_HCOPY_FILE_MODE_NEW       (0) - New
        /// RSUPV_HCOPY_FILE_MODE_OVERWRITE (1) - Overwrite
        /// RSUPV_HCOPY_FILE_MODE_INCREMENT (2) - AutoIncrement
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyStoreMode(out int Store_Mode)
        {
            int pInvokeResult = PInvoke.GetHardcopyStoreMode(this._handle, out Store_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the name of the file for output to a file (only if "Destination" is configured as "File" and "Store Mode" is not "New").
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE 'filename'
        /// </summary>
        /// <param name="File_Name">
        /// This control sets the name of the file for output to a file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyFileName(string File_Name)
        {
            int pInvokeResult = PInvoke.SetHardcopyFileName(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the name of the file for output to a file.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the file name control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="File_Name">
        /// This control gets the name of the file for output to a file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyFileName(int Buffer_Size, System.Text.StringBuilder File_Name)
        {
            int pInvokeResult = PInvoke.GetHardcopyFileName(this._handle, Buffer_Size, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the required header and footer in the output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:ADDition OFF | ON
        /// </summary>
        /// <param name="Header_Footer">
        /// This control selects the required header and footer in the output.
        /// 
        /// Valid Values:
        /// VI_FALSE   (0) - Off
        /// VI_TRUE    (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off: The header and footer are not visible.
        /// 
        /// (2) On: The header and footer are visible.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyHeaderFooterState(bool Header_Footer)
        {
            int pInvokeResult = PInvoke.SetHardcopyHeaderFooterState(this._handle, System.Convert.ToUInt16(Header_Footer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the required header and footer in the output.
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:ADDition?
        /// </summary>
        /// <param name="Header_Footer">
        /// This control returns the required header and footer in the output.
        /// 
        /// Valid Values:
        /// VI_FALSE   (0) - Off
        /// VI_TRUE    (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyHeaderFooterState(out bool Header_Footer)
        {
            ushort Header_FooterAsUShort;
            int pInvokeResult = PInvoke.GetHardcopyHeaderFooterState(this._handle, out Header_FooterAsUShort);
            Header_Footer = System.Convert.ToBoolean(Header_FooterAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the required text for the header (only if "Header/Footer" is "On"). This text forms the title in the middle of the header line.
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:HEADer 'text'
        /// </summary>
        /// <param name="Define_Header">
        /// This control selects the required text for the header.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyDefineHeader(string Define_Header)
        {
            int pInvokeResult = PInvoke.SetHardcopyDefineHeader(this._handle, Define_Header);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the required text for the header
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:HEADer?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size of the header control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Define_Header">
        /// This control returns the required text for the header.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyDefineHeader(int Buffer_Size, System.Text.StringBuilder Define_Header)
        {
            int pInvokeResult = PInvoke.GetHardcopyDefineHeader(this._handle, Buffer_Size, Define_Header);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the required text for the footer (only if "Header/Footer" is "On"). This text forms the legend in the middle of the footer line.
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:FOOTer 'text'
        /// </summary>
        /// <param name="Define_Footer">
        /// This control selects the required text for the footer.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopyDefineFooter(string Define_Footer)
        {
            int pInvokeResult = PInvoke.SetHardcopyDefineFooter(this._handle, Define_Footer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the required text for the footer
        /// 
        /// Remote-control command(s):
        /// HCOPy:PRINter:FOOTer?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size of the footer control.
        /// 
        /// Valid Values:
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Define_Footer">
        /// This control returns the required text for the footer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopyDefineFooter(int Buffer_Size, System.Text.StringBuilder Define_Footer)
        {
            int pInvokeResult = PInvoke.GetHardcopyDefineFooter(this._handle, Buffer_Size, Define_Footer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Graph Size of the actual Graphic when stored to File or Clipboard
        /// 
        /// Remote-control command(s):
        /// HCOPy:GSIZe 'size'
        /// </summary>
        /// <param name="Size">
        /// This control defines the Graph Size of the actual Graphic when stored to File or Clipboard.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "800x600"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHardcopySize(string Size)
        {
            int pInvokeResult = PInvoke.SetHardcopySize(this._handle, Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Graph Size of the actual Graphic when stored to File or Clipboard
        /// 
        /// Remote-control command(s):
        /// HCOPy:GSIZe?
        /// </summary>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the Size control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Size">
        /// This control returns the Graph Size of the actual Graphic when stored to File or Clipboard.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHardcopySize(int Buffer_Size, System.Text.StringBuilder Size)
        {
            int pInvokeResult = PInvoke.GetHardcopySize(this._handle, Buffer_Size, Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers the function for output of measured results. The required action is immediately executed according to the settings.
        /// 
        /// Remote-control command(s):
        /// HCOPy[:IMMediate]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int HardcopyImmediate()
        {
            int pInvokeResult = PInvoke.HardcopyImmediate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the style of file selector window.
        /// 
        /// Remote-control command(s):
        /// SYSTem:WINStyle OFF | ON
        /// </summary>
        /// <param name="File_Selector_Window_Style">
        /// This control selects the style of file selector window.
        /// 
        /// Valid Values:
        /// RSUPV_WINSTYLE_UPV     (0) - UPV
        /// RSUPV_WINSTYLE_WINDOWS (1) - Windows
        /// 
        /// Default Value: RSUPV_WINSTYLE_UPV  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetWindowStyle(int File_Selector_Window_Style)
        {
            int pInvokeResult = PInvoke.SetWindowStyle(this._handle, File_Selector_Window_Style);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the style of file selector window.
        /// 
        /// Remote-control command(s):
        /// SYSTem:WINStyle?
        /// </summary>
        /// <param name="File_Selector_Window_Style">
        /// This control returns the style of file selector window.
        /// 
        /// Valid Values:
        /// RSUPV_WINSTYLE_UPV     (0) - UPV
        /// RSUPV_WINSTYLE_WINDOWS (1) - Windows
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetWindowStyle(out int File_Selector_Window_Style)
        {
            int pInvokeResult = PInvoke.GetWindowStyle(this._handle, out File_Selector_Window_Style);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the string to be cached.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MEMory:STRing&lt;i&gt; 'String'
        /// </summary>
        /// <param name="String_Number">
        /// This control sets the string number.
        /// 
        /// Valid Values:
        /// 
        /// 1 to 1024
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="String">
        /// This control defines the string.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Any strings up to a length of 540 bytes can be cached.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMemoryString(int String_Number, string String)
        {
            int pInvokeResult = PInvoke.SetMemoryString(this._handle, String_Number, String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the cached string.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MEMory:STRing&lt;i&gt;?
        /// </summary>
        /// <param name="String_Number">
        /// This control sets the string number.
        /// 
        /// Valid Values:
        /// 
        /// 1 to 1024
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the string control.
        /// 
        /// Valid Values: 
        /// up to 540
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="String">
        /// This control returns the string.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMemoryString(int String_Number, int Buffer_Size, System.Text.StringBuilder String)
        {
            int pInvokeResult = PInvoke.GetMemoryString(this._handle, String_Number, Buffer_Size, String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores up to 16 data sets with a length limited only by the storage capacity made available by the operating system.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MEMory:DATA&lt;i&gt; &lt;n,n,n,n&gt;
        /// </summary>
        /// <param name="String_Number">
        /// This control sets the number of the memory set.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Data">
        /// This control sets the number of data in the data control.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: none
        /// </param>
        /// <param name="Data">
        /// This control sets the numeric strings consisting of floating-point values without a unit in ASCII format.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StoreMemoryDataNumeric(int String_Number, int Number_Of_Data, double[] Data)
        {
            int pInvokeResult = PInvoke.StoreMemoryDataNumeric(this._handle, String_Number, Number_Of_Data, Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores up to 16 data sets with a length limited only by the storage capacity made available by the operating system.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MEMory:DATA&lt;i&gt; #&lt;LengthOfLength&gt;&lt;Length&gt;&lt;Binary data&gt;
        /// </summary>
        /// <param name="String_Number">
        /// This control sets the number of the memory set.
        /// 
        /// Valid Values:
        /// 1 to 16
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Binary_Length">
        /// This control sets the number of bytes in the 'Binary Block Data' array.
        /// 
        /// Valid Values: 
        /// &gt;0
        /// 
        /// Default Value: none
        /// </param>
        /// <param name="Binary_Block_Data">
        /// This control sets the binary block data array to be writen to the memory with the size limited with 'Binary Block Length' parameter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StoreMemoryDataBinary(int String_Number, int Binary_Length, string Binary_Block_Data)
        {
            int pInvokeResult = PInvoke.StoreMemoryDataBinary(this._handle, String_Number, Binary_Length, Binary_Block_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns memory space of the available data buffers to the operating system.
        /// 
        /// Remote-control command(s):
        /// SYSTem:MEMory:FREE STRing | DATA
        /// </summary>
        /// <param name="Free_Buffers">
        /// This control returns memory space of the available data buffers to the operating system.
        /// 
        /// Valid Values:
        /// RSUPV_MEM_FREE_STRING (0) - String
        /// RSUPV_MEM_FREE_DATA   (1) - Data
        /// 
        /// Default Value: RSUPV_MEM_FREE_STRING (0)
        /// 
        /// Note(s):
        /// 
        /// (1) String: Returns the memory space of all string buffers.
        /// 
        /// (2) Data: Returns the memory space of all data buffers.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetMemoryBuffers(int Free_Buffers)
        {
            int pInvokeResult = PInvoke.ResetMemoryBuffers(this._handle, Free_Buffers);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shuts down the R&amp;S UPV by remote control. &lt;nu&gt; is the time until shutdown in seconds.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SHUtdown &lt;nu&gt;
        /// </summary>
        /// <param name="Time">
        /// This control shuts down the R&amp;S UPV by remote control.
        /// 
        /// Valid Values:
        /// &gt;= 0
        /// 
        /// Default Value: 0 s
        /// 
        /// Note(s):
        /// 
        /// (1) Zero seconds means immediate shutdown.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SystemShutdown(int Time)
        {
            int pInvokeResult = PInvoke.SystemShutdown(this._handle, Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the instrument setup file to be loaded.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:STATe
        /// </summary>
        /// <param name="Setup">
        /// This control defines the setup file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadSetup(string Setup)
        {
            int pInvokeResult = PInvoke.LoadSetup(this._handle, Setup);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the instrument setup file to be saved.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:STATe
        /// </summary>
        /// <param name="Setup">
        /// This control defines the setup file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveSetup(string Setup)
        {
            int pInvokeResult = PInvoke.SaveSetup(this._handle, Setup);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the GPIB address.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:GPIB:ADDRess
        /// </summary>
        /// <param name="GPIB_Address">
        /// This control sets the GPIB address.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 20
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGPIBAddress(int GPIB_Address)
        {
            int pInvokeResult = PInvoke.SetGPIBAddress(this._handle, GPIB_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches state checking of the instrument (reading of the Standard Event Register and checking it for error) status subsystem. Driver functions are using state checking which is by default enabled.
        /// 
        /// Note:
        /// 
        /// (1) In debug mode enable state checking.
        /// 
        /// (2) For better bus throughput and instruments performance disable state checking.
        /// 
        /// (3) When state checking is disabled driver does not check if correct instrument model or option is used with each of the functions. This might cause unexpected behaviour of the instrument.
        /// 
        /// </summary>
        /// <param name="State_Checking">
        /// This control switches instrument state checking On or Off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int errorCheckState(bool State_Checking)
        {
            int pInvokeResult = PInvoke.errorCheckState(this._handle, System.Convert.ToUInt16(State_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the instrument and write it to a user specified file on the host computer.
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA? &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Source">
        /// This control selects file for the data transfer from instrument to control computer.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from instrument to control computer applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readToFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.readToFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the host computer and write it to a user specified file in the instrument.
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Source">
        /// This control selects file for the data transfer from control computer to instrument.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from control computer to instrument applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeFromFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.writeFromFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the host computer and write it to a user specified file in the instrument. It is used for huge files. It sends only file header. To send file data, call into rssmu_contHugeFile in a loop until EOF argument is set to VI_TRUE.
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Source">
        /// This control selects file for the data transfer from control computer to instrument.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from control computer to instrument applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="File_Handle">
        /// This control contains handle to opened file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeHugeFileStart(string Source, string Destination, out int File_Handle)
        {
            int pInvokeResult = PInvoke.writeHugeFileStart(this._handle, Source, Destination, out File_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the host computer and write it to a user specified file in the instrument. It is used for huge files. To start file transfer, call into rssmu_writeHugeFileStart prior to call into this function. Call into this function until EOF argument is set to VI_TRUE.
        /// 
        /// 
        /// </summary>
        /// <param name="File_Handle">
        /// This control contains handle to opened file. It can be obtained by call into rssmu_writeHugeFileStart.
        /// </param>
        /// <param name="Offset">
        /// This control defines offset from which data should be read.
        /// </param>
        /// <param name="Block_Length">
        /// This control contains length of the block to be send to instrument.
        /// </param>
        /// <param name="EOF">
        /// This control indicates, whether end of file has been reached. If EOF = VI_TRUE, transfer is finished and file is closed.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int contHugeFile(int File_Handle, uint Offset, uint Block_Length, out bool EOF)
        {
            ushort EOFAsUShort;
            int pInvokeResult = PInvoke.contHugeFile(this._handle, File_Handle, Offset, Block_Length, out EOFAsUShort);
            EOF = System.Convert.ToBoolean(EOFAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes commands and queries to the instrument to modify parameters and query device settings.
        /// 
        /// </summary>
        /// <param name="Write_Buffer">
        /// The user can use this control to send common commands and queries to the instrument. This control can also be used to write any valid command to the instrument.
        /// 
        /// Default Value:  "*RST"
        /// 
        /// Notes:
        /// 
        /// (1) The command or query to be sent to the instrument may be a literal enclosed in double quotes i.e. "*RST" or may be contained in a variable of type string.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.writeInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument's output buffer and returns it to the specified variable in memory.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) If valid data is not available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled this function will hang indefinitely and it may be necessary to reboot the computer to break out.
        /// 
        /// </summary>
        /// <param name="Number_Bytes_To_Read">
        /// The number of bytes specified by this control should be greater than or equal to the number of bytes which are to be read from the instrument. If the actual number of bytes to be read is greater than the number this control specifies then multiple reads will be required to empty the instrument's output buffer.
        /// 
        /// If the instrument's output buffer is not emptied the instrument may return invalid data when future reads are performed.
        /// 
        /// Default Value:  50 (See NOTE 2)
        /// 
        /// Notes:
        /// 
        /// (1) If NO DATA is available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled, this function will hang indefinitely and it may be necessary to reboot the computer.
        /// 
        /// (2) If the number of bytes expected is greater than 50 the value of this control may be increased. If the actual number of bytes read is larger than the declared size of the read buffer a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// The incoming data from the instrument is placed into this variable.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) This function does not overwrite any old data left in the string variable from the last time the function was called. String data in LabWindows/CVI is terminated with an ASCII null(0x0) and string manipulation functions will only recognize data before the ASCII null.
        /// 
        /// (3) The declared size of the string variable must be greater than the actual number of bytes read from the instrument if it is not a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="NumBytes_Read">
        /// This variable contains the actual number of bytes read from the instrument. This is the value which is returned by the read function.
        /// 
        /// Notes:
        /// 
        /// (1) If the actual number of bytes read is less than the number of bytes specified in the Number Bytes To Read control then the output buffer has probably been emptied. If the read function fails and the number of bytes read is 0, the most probable cause for the failure is there was no data available at the instrument's output buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readInstrData(int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read)
        {
            int pInvokeResult = PInvoke.readInstrData(this._handle, Number_Bytes_To_Read, Read_Buffer, out NumBytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s).
        /// 
        /// Note:
        /// 
        /// (1) When is Self-Test Failed you read your manual.
        /// 
        /// </summary>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test.  Zero means success.  For any other code, see the device's operator's manual.
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// This control contains the string returned from the self test. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code from the instrument's error queue.
        /// 
        /// </summary>
        /// <param name="Error_Code">
        /// This control returns the error code read from the instrument's error queue.
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// This control returns the error message string read from the instrument's error message queue.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware, and tells the user with which  instrument firmware this revision of the driver is compatible.
        /// 
        /// </summary>
        /// <param name="Instrument_Driver_Revision">
        /// This control returns the Instrument Driver Software Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <param name="Firmware_Revision">
        /// This control returns the Instrument Firmware Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsupv_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the Enable, NTransition, and PTransition bits     of status questionable and operating registers.
        /// 
        /// Remote-control command(s):
        /// STATus:PRESet
        /// STATus:OPERation:ENABle
        /// STATus:OPERation:NTRansition
        /// STATus:OPERation:PTRansition
        /// STATus:QUEStionable:ENABle
        /// STATus:QUEStionable:NTRansition
        /// STATus:QUEStionable:PTRansition
        /// STATus:QUEStionable:UNDerrange:ENABle
        /// STATus:QUEStionable:UNDerrange:NTRansition
        /// STATus:QUEStionable:UNDerrange:PTRansition
        /// STATus:QUEStionable:OVERrange:ENABle
        /// STATus:QUEStionable:OVERrange:NTRansition
        /// STATus:QUEStionable:OVERrange:PTRansition
        /// STATus:QUEStionable:MEASuring:ENABle
        /// STATus:QUEStionable:MEASuring:NTRansition
        /// STATus:QUEStionable:MEASuring:PTRansition
        /// STATus:XQUEstionabl:ENABle
        /// STATus:XQUEstionabl:NTRansition
        /// STATus:XQUEstionabl:PTRansition
        /// </summary>
        /// <param name="Register_Operation">
        /// Specifies the operation to perform.
        /// 
        /// Valid Values:
        /// 0 - Preset Registers (Default Value)
        /// 1 - Set Questionable Register
        /// 2 - Set Operation Register
        /// 3 - Set X Questionable Register
        /// 
        /// Notes:
        /// 
        /// (1) Preset Registers:
        /// This command resets the edge detectors and ENABle parts of all registers to a defined value. All PTRansition parts are set to FFFFh, i.e., all transitions from 0 to 1 are detected. All NTRansition parts are set to 0, i.e., a transition from 1 to 0 in a CONDition bit is not detected. The ENABle part of the STATus:OPERation and STATus:QUEStionable registers are set to 0, i.e., all events in these registers are not passed on.
        /// 
        /// </param>
        /// <param name="Questionable_Register">
        /// This control selects the registers that will be configured. 
        /// 
        /// Valid Values:
        /// 0 - Main(Default Value)
        /// 1 - Underrange
        /// 2 - Overrange
        /// 3 - Measuring
        /// </param>
        /// <param name="Enable">
        /// This control sets the enable bits of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// 
        /// (1) The ENABle register selectively enables the individual events of the associated EVENt section for the sum bit in the status byte.
        /// 
        /// </param>
        /// <param name="PTransition">
        /// This control sets the PTransition bits (edge detectors) of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="NTransition">
        /// This control sets the NTransition bits (edge detectors) of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsspecan_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value Meaning
        /// -------------------------------
        /// 0 Success
        /// Positive Values Warnings
        /// Negative Values Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex) Status Code Types
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF VISA Warnings
        /// 3FFC0000 to 3FFCFFFF VXIPnP Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF VISA Errors
        /// BFFC0000 to BFFCFFFF VXIPnP Driver Errors
        /// </returns>
        public int setStatusRegister(int Register_Operation, int Questionable_Register, int Enable, int PTransition, int NTransition)
        {
            int pInvokeResult = PInvoke.setStatusRegister(this._handle, Register_Operation, Questionable_Register, Enable, PTransition, NTransition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function contains the commands for the querying status reporting system.
        /// 
        /// Note:
        /// 
        /// For detailed description of Status Reporting System see also operating manual.
        /// 
        /// Remote-control command(s):
        /// STATus:OPERation:EVENt?
        /// STATus:OPERation:CONDition?
        /// STATus:QUEStionable:EVENt?
        /// STATus:QUEStionable:CONDition?
        /// STATus:QUEStionable:UNDerrange:EVENt? 
        /// STATus:QUEStionable:UNDerrange:CONDition? 
        /// STATus:QUEStionable:OVERrange:EVENt?
        /// STATus:QUEStionable:OVERrange:CONDition? 
        /// STATus:QUEStionable:MEASuring:EVENt? 
        /// STATus:QUEStionable:MEASuring:CONDition? 
        /// STATus:XQUEstionabl:EVENt? 
        /// STATus:XQUEstionabl:CONDition? 
        /// STATus:QUEue?
        /// </summary>
        /// <param name="Status_Registers_Query">
        /// This control selects the registers to be queried.
        /// 
        /// Valid Values:
        /// 0 - Operation Event (Default Value)
        /// 1 - Operation Condition
        /// 2 - Main Event
        /// 3 - Main Condition
        /// 4 - Underrange Event
        /// 5 - Underrange Condition
        /// 6 - Overrrange Event
        /// 7 - Overrrange Condition
        /// 8 - Measuring Event
        /// 9 - Measuring Condition
        /// 10 - Xquestionable Event
        /// 11 - Xquestionable Condition
        /// 12 - Queue Next
        /// 
        /// Notes:
        /// 
        /// (1) Operation Event:
        /// This command queries the contents of the EVENt section of the STATus:OPERation register.
        /// 
        /// (2) Operation Condition:
        /// This command queries the CONDition section of the STATus:OPERation register.
        /// 
        /// (3) Main Event:
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable register.
        /// 
        /// (4) Main Condition:
        /// This command queries the CONDition section of the STATus:QUEStionable register.
        /// 
        /// (5) Underrange Event:
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable:UNDerrange register.
        /// 
        /// (6) Underrange Condition:
        /// This command queries the content of the CONDition section of the STATus:QUEStionable:UNDerrange register.
        /// 
        /// (7) Overrange Event:
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable:OVERrrange register.
        /// 
        /// (8) Overrange Condition:
        /// This command queries the contents of the CONDition section of the STATus:QUEStionable:OVERrrange register.
        /// 
        /// (9) Measuring Event:
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable:MEASuring register.
        /// 
        /// (10) Measuring Condition:
        /// This command queries the contents of the CONDition section of the STATus:QUEStionable:MEASuring register.
        /// 
        /// (11) Xquestionable Event:
        /// This command queries the contents of the EVENt section of the STATus:XQUEstionable register.
        /// 
        /// (12) Xquestionable Condition:
        /// This command queries the contents of the CONDition section of the STATus:XQUEstionable register.
        /// 
        /// (13) Queue Next:
        /// This command queries the earliest entry to the error queue, thus deleting it.
        /// </param>
        /// <param name="Register_Value">
        /// Returns content of selected register.
        /// 
        /// Note:
        /// 
        /// For detailed description of Status Reporting System see also operating manual.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rsspecan_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value Meaning
        /// -------------------------------
        /// 0 Success
        /// Positive Values Warnings
        /// Negative Values Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex) Status Code Types
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF VISA Warnings
        /// 3FFC0000 to 3FFCFFFF VXIPnP Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF VISA Errors
        /// BFFC0000 to BFFCFFFF VXIPnP Driver Errors
        /// </returns>
        public int getStatusRegister(int Status_Registers_Query, out int Register_Value)
        {
            int pInvokeResult = PInvoke.getStatusRegister(this._handle, Status_Registers_Query, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        private class PInvoke
        {

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorInstrument", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorInstrument(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorInstrument", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorInstrument(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Instrument);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorAnalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorAnalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Output_Type, int Impedance, int Common, int Bandwidth, int Volt_Range, double Max_Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorOutputType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorOutputType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Output_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorOutputType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorOutputType(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Output_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorCommon", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorCommon(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Common);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorCommon", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorCommon(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Common);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorVoltageRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorVoltageRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Volt_Range);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorVoltageRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorVoltageRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Volt_Range);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMaxVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMaxVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Max_Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMaxVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMaxVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Max_Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorDigital", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorDigital(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To, int Sample_Freq, double Sample_Freq_Value, int Sync_Output, double Int_Clk_Freq, int Sync_Out_Type, int Aux_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorDigitalAudioRefGen", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorDigitalAudioRefGen(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ref_Gen_Data, int Phase_To_Ref, double Frame_Phase_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorSourceMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorSourceMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorSourceMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorSourceMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorAddImpairment", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorAddImpairment(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Add_Impairment);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorAddImpairment", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorAddImpairment(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Add_Impairment);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Variable_Sample_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Variable_Sample_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorSyncOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorSyncOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorSyncOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorSyncOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorInternalClockFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorInternalClockFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Internal_Clock_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorInternalClockFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorInternalClockFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Internal_Clock_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorSyncOutType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorSyncOutType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_Output_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorSyncOutType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorSyncOutType(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_Output_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorAuxOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorAuxOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Aux_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorAuxOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorAuxOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Aux_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorBalancedImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorBalancedImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Balanced_Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorBalancedImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorBalancedImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Balanced_Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorUnbalancedImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorUnbalancedImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Unbalanced_Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorUnbalancedImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorUnbalancedImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Unbalanced_Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorBalancedAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorBalancedAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Balanced_Amplitude, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorBalancedAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorBalancedAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Balanced_Amplitude, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorUnbalancedAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorUnbalancedAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Unbalanced_Amplitude, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorUnbalancedAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorUnbalancedAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Unbalanced_Amplitude, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorUnbalancedOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorUnbalancedOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Unbalanced_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorUnbalancedOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorUnbalancedOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Unbalanced_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorCableSimulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorCableSimulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Cable_Simulation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorCableSimulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorCableSimulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Cable_Simulation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, ushort Gen_Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, out ushort Gen_Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorRefGeneratorData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorRefGeneratorData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ref_Generator_Data);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorRefGeneratorData", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorRefGeneratorData(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ref_Generator_Data);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorPhaseToRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorPhaseToRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Phase_To_Ref);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorPhaseToRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorPhaseToRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Phase_To_Ref);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalGeneratorFramePhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalGeneratorFramePhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frame_Phase, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalGeneratorFramePhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalGeneratorFramePhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frame_Phase, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorI2S", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorI2S(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To, int Word_Length, int Sample_Frequency, double Variable_Sample_Frequency, int MClk_Ratio, int Audio_Bits, int Format, int Fsync_Shape, int Fsync_Polarity, int Word_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorWordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorWordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Word_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorWordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorWordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Word_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Variable_Sample_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorBClkFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorBClkFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double BClk_Freq);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Variable_Sample_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int MClk_Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int MClk_Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorFsyncShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorFsyncShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Shape);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorFsyncShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorFsyncShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Shape);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorFsyncPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorFsyncPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Polarity);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorFsyncPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorFsyncPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Polarity);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SGeneratorWordOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SGeneratorWordOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Word_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SGeneratorWordOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SGeneratorWordOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Word_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorClockAndFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorClockAndFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock, ushort Mixed_Sampling_Frequency, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples, int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorTxData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorTxData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Data_Line, string Signal_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorSlot", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorSlot(System.Runtime.InteropServices.HandleRef Instrument_Handle, int First_Bit, int Slot_Length, int Audio_Bits, int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Variable_Sample_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorFsync", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorFsync(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Width, int Variable_Fsync_Width, int Fsync_Offset, int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorSlClk", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorSlClk(System.Runtime.InteropServices.HandleRef Instrument_Handle, int SlClk_Width, int Variable_SlClk_Width, int SlClk_Offset, int SlClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIGeneratorJitter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIGeneratorJitter(System.Runtime.InteropServices.HandleRef Instrument_Handle, double BClk_Jitter_Frequency, double BClk_Jitter_Amplitude, double MClk_Jitter_Frequency, double MClk_Jitter_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_USIGeneratorResync", CallingConvention = CallingConvention.StdCall)]
            public static extern int USIGeneratorResync(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorClock(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorClock(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Clock);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorMixedSamplingFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorMixedSamplingFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Mixed_Sampling_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorMixedSamplingFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorMixedSamplingFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Mixed_Sampling_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSamplesPerFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSamplesPerFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSamplesPerFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSamplesPerFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorNumberOfSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorNumberOfSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorNumberOfSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorNumberOfSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorTxData", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorTxData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Data_Line, int Array_Size, System.Text.StringBuilder Signal_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorFirstBit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorFirstBit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int First_Bit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorFirstBit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorFirstBit(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int First_Bit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSlotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSlotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Slot_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSlotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSlotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Slot_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorLeadBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorLeadBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorLeadBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorLeadBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Variable_Sample_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorFsyncFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorFsyncFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Fsync_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorBClkFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorBClkFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double BClk_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorFsyncWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorFsyncWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Width, int Variable_Fsync_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorFsyncWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorFsyncWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Width, out int Variable_Fsync_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorFsyncOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorFsyncOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorFsyncOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorFsyncOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorBClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorBClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int BClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorBClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorBClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int BClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSlClkWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSlClkWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int SlClk_Width, int Variable_SlClk_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSlClkWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSlClkWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int SlClk_Width, out int Variable_SlClk_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSlClkOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSlClkOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int SlClk_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSlClkOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSlClkOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int SlClk_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorSlClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorSlClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int SlClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorSlClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorSlClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int SlClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorBClkJitterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorBClkJitterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double BClk_Jitter_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorBClkJitterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorBClkJitterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double BClk_Jitter_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorBClkJitterAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorBClkJitterAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, double BClk_Jitter_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorBClkJitterAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorBClkJitterAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double BClk_Jitter_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorMClkJitterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorMClkJitterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double MClk_Jitter_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorMClkJitterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorMClkJitterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double MClk_Jitter_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorMClkJitterAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorMClkJitterAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, double MClk_Jitter_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorMClkJitterAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorMClkJitterAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double MClk_Jitter_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorLogicVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorLogicVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Logic_Voltage);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorLogicVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorLogicVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Logic_Voltage);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIGeneratorCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIGeneratorCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIGeneratorCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIGeneratorCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureHDMIGeneratorAudio", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHDMIGeneratorAudio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Format, int Channel, int Sync_To, int Sample_Frequency, double Variable_Sample_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureHDMIGeneratorVideo", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHDMIGeneratorVideo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source, int Format_Resolution, int Format_Frequency, int Color_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoFormatNo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoFormatNo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Format_No);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorVideoColorDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorVideoColorDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Color_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoColorDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoColorDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Color_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorVideoContent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorVideoContent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Content);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoContent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoContent(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Content);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoColorString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoColorString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Color_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoAVI", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoAVI(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder AVI);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoSPD", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoSPD(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder SPD);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoEEDID", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoEEDID(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder E_EDID);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoCEC", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoCEC(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder CEC);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorVideoFormatResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorVideoFormatResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format_Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoFormatResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoFormatResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Format_Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorVideoFormatFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorVideoFormatFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoFormatFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoFormatFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Format_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorVideoSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorVideoSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorVideoSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorVideoSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorAudioFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorAudioFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorAudioFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorAudioFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorAudioSinkARC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorAudioSinkARC(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sink_ARC);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorAudioSinkARC", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorAudioSinkARC(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sink_ARC);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorAudioInfoFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorAudioInfoFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Audio_Info_Frame);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIGeneratorChannelsMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIGeneratorChannelsMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, ushort Gen_Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIGeneratorChannelsMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIGeneratorChannelsMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, out ushort Gen_Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ref_Voltage, int Voltage_Units, double Ref_Frequency, int Frequency_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRefVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRefVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ref_Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRefVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRefVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRefFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRefFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ref_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRefFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRefFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorTotalVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorTotalVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Voltage_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorTotalVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorTotalVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Voltage_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorVoltageRMS", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorVoltageRMS(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Voltage_RMS, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorVoltageRMS", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorVoltageRMS(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Voltage_RMS, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorCrestFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorCrestFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Crest_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorCrestFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorCrestFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Crest_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorCrestFactorValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorCrestFactorValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Crest_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorCrestFactorValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorCrestFactorValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Crest_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDCOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDCOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DC_Offset, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDCOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDCOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DC_Offset, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDCOffsetChannelValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDCOffsetChannelValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double DC_Offset, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDCOffsetChannelValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDCOffsetChannelValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double DC_Offset, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDCOffsetCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDCOffsetCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDCOffsetCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDCOffsetCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepCtrl", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepCtrl(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Ctrl);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepCtrl", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepCtrl(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sweep_Ctrl);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepNextStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepNextStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Next_Step);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepNextStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepNextStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Next_Step);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Dwell, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Dwell, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepDwellFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepDwellFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Dwell_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepXAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepXAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int X_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepXAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepXAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int X_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepZAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepZAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Z_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepZAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepZAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Z_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepHalt", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepHalt(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, int Halt, double Halt_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepHalt", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepHalt(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out int Halt, out double Halt_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, double Start, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out double Start, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, double Stop, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out double Stop, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, int Points);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out int Points);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSweepSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSweepSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, double Steps, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSweepSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSweepSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, out double Steps, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorTotVoltFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorTotVoltFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Volt_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFreqFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFreqFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Freq_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPhaseFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPhaseFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Phase_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorOnTimeFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorOnTimeFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string On_Time_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorIntervalFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorIntervalFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Interval_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorEqualizerFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorEqualizerFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Equalizer_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorEqualizerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorEqualizerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorEqualizerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorEqualizerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Generator_Function);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Generator_Function);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineLowDistortion", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineLowDistortion(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Low_Distortion);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineLowDistortion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineLowDistortion(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Low_Distortion);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoFrequencyMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoFrequencyMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoFrequencyMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoFrequencyMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Frequency_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoVoltageMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoVoltageMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Voltage_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoVoltageMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoVoltageMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Voltage_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoFrequencyCh2", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoFrequencyCh2(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Ch2, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoFrequencyCh2", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoFrequencyCh2(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Ch2, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoVoltageCh2", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoVoltageCh2(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Voltage_Ch2, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoVoltageCh2", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoVoltageCh2(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Voltage_Ch2, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoChannelFilterCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoChannelFilterCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoChannelFilterCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoChannelFilterCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoChannelFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoChannelFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoChannelFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoChannelFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorStereoEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStereoEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorStereoEqualizerFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStereoEqualizerFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Equal_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultisineNoOfSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultisineNoOfSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int No_of_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultisineNoOfSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultisineNoOfSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int No_of_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultisinePhaseNoi", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultisinePhaseNoi(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number, double Phase_No_i, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultisinePhaseNoi", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultisinePhaseNoi(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number, out double Phase_No_i, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultisineTotalGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultisineTotalGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Total_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultisineTotalGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultisineTotalGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Total_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineBurstLowLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineBurstLowLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Low_Level, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineBurstLowLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineBurstLowLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Low_Level, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineBurstOnTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineBurstOnTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double On_Time, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineBurstOnTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineBurstOnTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double On_Time, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineBurstInterval", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineBurstInterval(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Interval, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineBurstInterval", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineBurstInterval(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Interval, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineBurstOnDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineBurstOnDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Burst_on_Delay, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineBurstOnDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineBurstOnDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Burst_on_Delay, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorModDist", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorModDist(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Upper_Freq, int Upper_Freq__Units, double Lower_Freq, int Lower_Freq__Units, double Volt_Ch2_1, double Total_Voltage, int Voltage_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModDistUpperFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModDistUpperFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Upper_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModDistUpperFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModDistUpperFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Upper_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModDistLowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModDistLowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Lower_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModDistLowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModDistLowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Lower_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModDistLevelRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModDistLevelRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Voltage_LF_UF);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModDistLevelRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModDistLevelRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Voltage_LF_UF);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorDFD", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorDFD(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode, double Diff_Freq, int Diff_Freq_Units, double Mean_Freq, int Mean_Freq_Units, double Upper_Freq, int Upper_Freq_Units, double Voltage_Value, int Voltage_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDFDMeanFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDFDMeanFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Mean_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDFDMeanFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDFDMeanFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Mean_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDFDDiffFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDFDDiffFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Diff_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDFDDiffFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDFDDiffFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Diff_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorDIM", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorDIM(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Square_Sine, int Bandwidth, double Voltage_Value, int Voltage_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDIMSquareToSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDIMSquareToSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Square_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDIMSquareToSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDIMSquareToSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Square_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDIMBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDIMBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDIMBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDIMBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRandomDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRandomDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Domain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRandomDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRandomDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Domain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRandomShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRandomShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Shape);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRandomShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRandomShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Shape);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRandomShapeFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRandomShapeFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Shape_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRandomLowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRandomLowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Lower_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRandomLowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRandomLowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Lower_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorRandomUpperFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorRandomUpperFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Upper_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorRandomUpperFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorRandomUpperFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Upper_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorArbitrary", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorArbitrary(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Shape_File, double Volt_Peak, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorArbitraryShapeFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorArbitraryShapeFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Shape_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorFMModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorFMModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Mod_Freq, int Mod_Freq_Units, double Carrier_Freq, int Carrier_Freq_Units, double Deviation, double Carrier_Volt, int Carrier_Volt_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureGeneratorAMModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGeneratorAMModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Mod_Freq, int Mod_Freq_Units, double Carrier_Freq, int Carrier_Freq_Units, double Mod_Depth, double Carrier_Volt, int Carrier_Volt_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModulationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModulationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Modulation_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModulationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModulationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Modulation_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModulationCarrierFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModulationCarrierFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Carrier_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModulationCarrierFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModulationCarrierFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Carrier_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModulationCarrierVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModulationCarrierVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Carrier_Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModulationCarrierVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModulationCarrierVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Carrier_Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModulationDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModulationDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Deviation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModulationDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModulationDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deviation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorModulationDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorModulationDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Modulation_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorModulationDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorModulationDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Modulation_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayScalePkToFS", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayScalePkToFS(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Scale_Pk_To_FS);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayScalePkToFS", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayScalePkToFS(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Scale_Pk_To_FS);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayShapeFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayShapeFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Shape_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayRestart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayRestart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Restart);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayRestart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayRestart(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Restart);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayAnalyzerLoopChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayAnalyzerLoopChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Loop_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayAnalyzerLoopChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayAnalyzerLoopChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Loop_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPlayAnalyzerLoopGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPlayAnalyzerLoopGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Loop_Gain, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPlayAnalyzerLoopGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPlayAnalyzerLoopGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Loop_Gain, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDither", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDither(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Dither);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDither", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDither(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Dither);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorDitherValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorDitherValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorDitherValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorDitherValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorPDF", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPDF(System.Runtime.InteropServices.HandleRef Instrument_Handle, int PDF);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorPDF", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPDF(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int PDF);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFrequencySpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFrequencySpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFrequencySpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFrequencySpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Frequency_Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFrequencySpacingValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFrequencySpacingValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Spacing_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFrequencySpacingValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFrequencySpacingValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Spacing_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorChannelPhaseRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorChannelPhaseRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Phase_Ch2_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorChannelPhaseRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorChannelPhaseRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Phase_Ch2_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorChannelVoltageRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorChannelVoltageRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Volt_Ch2_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorChannelVoltageRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorChannelVoltageRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Volt_Ch2_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorFunctionMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFunctionMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Function_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorFunctionMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFunctionMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Function_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorAmplitudeVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorAmplitudeVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Amplitude_Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorAmplitudeVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorAmplitudeVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Amplitude_Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorAVModulationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorAVModulationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Modulation_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorAVModulationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorAVModulationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Modulation_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelAllChanSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelAllChanSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort All_Chan_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelAllChanSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelAllChanSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort All_Chan_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelLimitToFS", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelLimitToFS(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Limit_To_FS);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelLimitToFS", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelLimitToFS(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Limit_To_FS);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelTotalGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelTotalGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Total_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelTotalGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelTotalGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Total_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Add_To_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Add_To_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Sine_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSineFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Sine_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSinePhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSinePhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Sine_Phase, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSinePhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSinePhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Sine_Phase, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Sine_Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSineVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSineVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Sine_Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineArbitrary", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineArbitrary(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Arbitrary);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSineArbitrary", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSineArbitrary(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Arbitrary);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineArbitraryFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineArbitraryFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, string Arbitrary_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineVoltPeak", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineVoltPeak(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Volt_Peak, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSineVoltPeak", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSineVoltPeak(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Volt_Peak, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelSineEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelSineEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelSineEqualizerFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelSineEqualizerFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, string Equal_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort DC_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorMultichannelDCOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorMultichannelDCOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double DC_Offset, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorMultichannelDCOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorMultichannelDCOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double DC_Offset, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSingleChannelTrackToOtherChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSingleChannelTrackToOtherChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Track_To_Other_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSingleChannelTrackToOtherChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSingleChannelTrackToOtherChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Track_To_Other_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSingleChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSingleChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSingleChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSingleChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorAllChannelSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorAllChannelSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort All_Channel_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorAllChannelSine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorAllChannelSine(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort All_Channel_Sine);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGeneratorSineVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorSineVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Voltage, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetGeneratorSineVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorSineVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Voltage, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerInstrument", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerInstrument(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerInstrument", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerInstrument(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Instrument);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerChannelInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerChannelInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerChannelInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerChannelInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerChannelInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerChannelInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerChannelInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerChannelInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerChannelInputCommon", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerChannelInputCommon(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Common);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerChannelInputCommon", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerChannelInputCommon(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Common);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerChannelInputRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerChannelInputRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Range);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerChannelInputRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerChannelInputRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Range);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerChannelInputRangeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerChannelInputRangeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Range_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerChannelInputRangeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerChannelInputRangeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Range_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerMeasChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerMeasChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Channel_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerMeasChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerMeasChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Channel_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerCouplingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerCouplingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerCouplingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerCouplingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerChannelRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerChannelRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerChannelRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerChannelRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coupling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerReferenceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerReferenceChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerReferenceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerReferenceChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerImpedanceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerImpedanceChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerImpedanceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerImpedanceChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Impedance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerChannelInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerChannelInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerChannelInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerChannelInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMultichannelAnalyzerTriggerChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMultichannelAnalyzerTriggerChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMultichannelAnalyzerTriggerChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMultichannelAnalyzerTriggerChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalAnalyzerMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalAnalyzerMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalAnalyzerMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalAnalyzerMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalAnalyzerJitterRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalAnalyzerJitterRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Jitter_Ref);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalAnalyzerJitterRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalAnalyzerJitterRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Jitter_Ref);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalAnalyzerAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalAnalyzerAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalAnalyzerAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalAnalyzerAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalAnalyzerAudioInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalAnalyzerAudioInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalAnalyzerAudioInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalAnalyzerAudioInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerWordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerWordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Word_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerWordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerWordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Word_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerWordOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerWordOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Word_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerWordOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerWordOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Word_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerMeasChannelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerMeasChannelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIAnalyzerClockAndFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIAnalyzerClockAndFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock, ushort Mixed_Sampling_Frequency, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIAnalyzerFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIAnalyzerFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples, int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerMeasurementSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerMeasurementSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, int Data_Link);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, string Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIAnalyzerSlot", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIAnalyzerSlot(System.Runtime.InteropServices.HandleRef Instrument_Handle, int First_Bit, int Slot_Length, int Audio_Bits, int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Variable_Sample_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureUSIAnalyzerFsync", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureUSIAnalyzerFsync(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Width, int Variable_Fsync_Width, int Fsync_Offset, int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_USIAnalyzerResync", CallingConvention = CallingConvention.StdCall)]
            public static extern int USIAnalyzerResync(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerMeasChannelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerMeasChannelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, out ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerClock(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerClock(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Clock);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerMixedSamplingFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerMixedSamplingFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Mixed_Sampling_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerMixedSamplingFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerMixedSamplingFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Mixed_Sampling_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSamplesPerFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSamplesPerFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSamplesPerFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSamplesPerFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerNumberOfSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerNumberOfSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerNumberOfSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerNumberOfSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_Of_Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerMeasurementSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerMeasurementSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, out int Data_Link);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSlots", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSlots(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, int Array_Size, System.Text.StringBuilder Slots);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSyncTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSyncTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sync_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerFirstBit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerFirstBit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int First_Bit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerFirstBit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerFirstBit(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int First_Bit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSlotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSlotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Slot_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSlotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSlotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Slot_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerAudioBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerAudioBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerLeadBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerLeadBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerLeadBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerLeadBits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Lead_Bits);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Variable_Sample_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerFsyncFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerFsyncFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Fsync_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerBClkFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerBClkFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double BClk_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerFsyncWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerFsyncWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Width, int Variable_Fsync_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerFsyncWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerFsyncWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Width, out int Variable_Fsync_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerFsyncOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerFsyncOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerFsyncOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerFsyncOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerFsyncSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerFsyncSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fsync_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerBClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerBClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int BClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerBClkSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerBClkSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int BClk_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerMClkRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerMClkRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerSamplingDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerSamplingDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Sampling_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerSamplingDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerSamplingDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sampling_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerLogicVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerLogicVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Logic_Voltage);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerLogicVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerLogicVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Logic_Voltage);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetUSIAnalyzerCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUSIAnalyzerCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetUSIAnalyzerCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUSIAnalyzerCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureHDMIAnalyzerAudio", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHDMIAnalyzerAudio(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input, int Audio_Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIAnalyzerAudioInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIAnalyzerAudioInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Format);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIAnalyzerAudioCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIAnalyzerAudioCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Audio_Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioCoding", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioCoding(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Audio_Coding);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioDetected", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioDetected(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Detected);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioNParameter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioNParameter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int N);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioCTSParameter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioCTSParameter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int CTS);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIAnalyzerAudioChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIAnalyzerAudioChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHDMIAnalyzerAudioMeasChannelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHDMIAnalyzerAudioMeasChannelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioMeasChannelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioMeasChannelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Channel, out ushort State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerAudioInfoFrame", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerAudioInfoFrame(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Audio_Info_Frame);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoFormatNo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoFormatNo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Format_No);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoColorDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoColorDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Color_Depth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoHDCPState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoHDCPState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort HDCP_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoTimings", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoTimings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Timings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoAVI", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoAVI(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder AVI);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoSPD", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoSPD(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder SPD);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHDMIAnalyzerVideoEEDID", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHDMIAnalyzerVideoEEDID(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder E_EDID);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalogAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalogAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalogAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalogAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigitalAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigitalAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigitalAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigitalAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureDigBitstreamAnalyzer", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigBitstreamAnalyzer(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock_Source, int Channel_Mode, int Alignment, int Dwnsmpl_Fact, double Clock_Frequency, double Duty_Cycle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerClockSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Clock_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerClockSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Clock_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerChannelMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerChannelMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerAlignment", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerAlignment(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Alignment);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerAlignment", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerAlignment(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Alignment);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerClockFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerClockFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Clock_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerClockFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerClockFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Clock_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerDutyCycle", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerDutyCycle(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Duty_Cycle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerDutyCycle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerDutyCycle(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Duty_Cycle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDigBitstreamAnalyzerDownSamplingFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDigBitstreamAnalyzerDownSamplingFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Dwnsmpl_Fact);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDigBitstreamAnalyzerDownSamplingFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDigBitstreamAnalyzerDownSamplingFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Dwnsmpl_Fact);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Sample_Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Sample_Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetI2SAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetI2SAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sample_Frequency, double Sample_Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetI2SAnalyzerSampleFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetI2SAnalyzerSampleFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Frequency, out double Sample_Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRefImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ref_Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRefImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Imped);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerStartCondition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerStartCondition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Start_Condition);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerStartCondition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerStartCondition(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Start_Condition);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerStartDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerStartDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerStartDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerStartDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTriggerSettlingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTriggerSettlingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Settling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTriggerSettlingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTriggerSettlingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Settling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTriggerSettlingCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTriggerSettlingCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTriggerSettlingCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTriggerSettlingCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTriggerSettlingResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTriggerSettlingResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTriggerSettlingResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTriggerSettlingResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTriggerSettlingTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTriggerSettlingTolerance(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Tolerance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTriggerSettlingTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTriggerSettlingTolerance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Tolerance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetExternalSweepStartValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSweepStartValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, double Start, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetExternalSweepStartValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSweepStartValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, out double Start, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetExternalSweepStopValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSweepStopValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, double Stop, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetExternalSweepStopValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSweepStopValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, out double Stop, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetExternalSweepMinimumLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSweepMinimumLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Min_Volt);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetExternalSweepMinimumLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSweepMinimumLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Min_Volt);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetExternalSweepVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSweepVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, double Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetExternalSweepVariation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSweepVariation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, out double Variation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Function);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Function);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureMeasurementFunctionsSettling", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasurementFunctionsSettling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fnct_Settling, int Samples, double Timeout, double Resolution, double Tolerance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementFunctionsSettling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementFunctionsSettling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fnct_Settling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementFunctionsSettling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementFunctionsSettling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fnct_Settling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementFunctionSettlingCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementFunctionSettlingCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Samples);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementFunctionSettlingCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementFunctionSettlingCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Settling_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementFunctionSettlingResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementFunctionSettlingResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementFunctionSettlingResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementFunctionSettlingResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementFunctionSettlingTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementFunctionSettlingTolerance(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Tolerance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementFunctionSettlingTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementFunctionSettlingTolerance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Tolerance);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementFunctionSettlingTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementFunctionSettlingTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementFunctionSettlingTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementFunctionSettlingTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control, int Spacing, int Points, double Start, int Start_Units, double Stop, int Stop_Units, double Step, int Step_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepControl", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepControl(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Control);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepControl", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepControl(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sweep_Control);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Stop, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Stop, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Points);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Points);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSweepSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSweepSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSweepSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSweepSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasTimeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasTimeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Meas_Time_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasTimeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasTimeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Meas_Time_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSNSequenceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSNSequenceState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort S_N_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSNSequenceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSNSequenceState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort S_N_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerPeakMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerPeakMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode, int Interval_Time, double Interval_Time_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPeakMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPeakMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPeakMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPeakMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPeakMeasIntervalTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPeakMeasIntervalTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Interval_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPeakMeasIntervalTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPeakMeasIntervalTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Interval_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPeakMeasIntervalTimeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPeakMeasIntervalTimeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Interval_Time_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPeakMeasIntervalTimeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPeakMeasIntervalTimeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Interval_Time_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasBandwidthValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasBandwidthValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Bandwidth_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasBandwidthValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasBandwidthValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Bandwidth_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasFrequencyMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasFrequencyMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasFrequencyMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasFrequencyMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Frequency_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasFrequencyValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasFrequencyValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasFrequencyValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasFrequencyValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasFrequencyFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasFrequencyFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasFrequencyFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasFrequencyFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Start);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Start);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMeasFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMeasFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Stop);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMeasFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMeasFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Stop);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelDCMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelDCMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelDCMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelDCMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerDynamicMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerDynamicMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Dynamic_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerDynamicMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerDynamicMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Dynamic_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerBargraphState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerBargraphState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Bargraph_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerBargraphState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerBargraphState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Bargraph_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRefinement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRefinement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Refinement);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRefinement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRefinement(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Refinement);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerFundamental", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerFundamental(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fundamental, double Fundamental_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDFundamental", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDFundamental(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Fundamental);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDFundamental", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDFundamental(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Fundamental);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDFundamentalValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDFundamentalValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Fundamental_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDFundamentalValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDFundamentalValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Fundamental_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerTHD", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerTHD(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode, int Harmonic, ushort Harmonic_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDHarmonicState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDHarmonicState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Harmonic, ushort Harmonic_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDHarmonicState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDHarmonicState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Harmonic, out ushort Harmonic_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNRejection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNRejection(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Rejection);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNRejection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNRejection(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Rejection);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNRejectBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNRejectBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Reject_Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNRejectBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNRejectBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Reject_Bandwidth);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNEqualizerFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNEqualizerFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Equal_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNFrequencyLimLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNFrequencyLimLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Freq_Lim_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNFrequencyLimLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNFrequencyLimLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Freq_Lim_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerTHDNFrequencyLimUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerTHDNFrequencyLimUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Freq_Lim_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerTHDNFrequencyLimUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerTHDNFrequencyLimUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Freq_Lim_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerDFDMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerDFDMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerDFDMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerDFDMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTEqualizer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTEqualizer(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Equalizer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTEqualizerFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTEqualizerFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Equal_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerFFTFrequencyLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerFFTFrequencyLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Limit_Enable, double Freq_Lim_Low, double Freq_Lim_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTFrequencyLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTFrequencyLimitState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Limit_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTFrequencyLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTFrequencyLimitState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Limit_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTFrequencyLimitLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTFrequencyLimitLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Freq_Lim_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTFrequencyLimitLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTFrequencyLimitLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Freq_Lim_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTFrequencyLimitUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTFrequencyLimitUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Freq_Lim_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTFrequencyLimitUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTFrequencyLimitUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Freq_Lim_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int FFT_Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int FFT_Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTMaxSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTMaxSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int FFT_Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTMaxSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTMaxSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int FFT_Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTResolution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTResolution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Resolution);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTMeasurementTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTMeasurementTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTWindow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTWindow(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Window);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTWindow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTWindow(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Window);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTMonitorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTMonitorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort FFT_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTMonitorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTMonitorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort FFT_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPostFFTState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPostFFTState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Post_FFT);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPostFFTState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPostFFTState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Post_FFT);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTDelayCh1", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTDelayCh1(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Delay_Channel_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTDelayCh1", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTDelayCh1(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Delay_Channel_1);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTAvgMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTAvgMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Avg_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTAvgMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTAvgMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Avg_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTAvgCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTAvgCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Avg_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTAvgCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTAvgCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Avg_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTTriggeredState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTTriggeredState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Triggered_FFT_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTTriggeredState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTTriggeredState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Triggered_FFT_Enable);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTUndersampleState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTUndersampleState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Undersample);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTUndersampleState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTUndersampleState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Undersample);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTCompFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTCompFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Comp_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTCompFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTCompFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Comp_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFFTZoomCenter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFFTZoomCenter(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Center);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTZoomCenter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTZoomCenter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Center);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTZoomStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTZoomStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFFTZoomStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFFTZoomStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Stop);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerPEAQ", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerPEAQ(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Model_Version, int Measurement_Mode, string Store_WAV_To_Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPEAQModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPEAQModel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Model_Version);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQModel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Model_Version);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPEAQMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPEAQMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPEAQStoreWAVTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPEAQStoreWAVTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Store_WAV_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPEAQFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPEAQFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Reference_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQDegLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQDegLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deg_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQAvgDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQAvgDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Avg_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPEAQDelayDetect", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPEAQDelayDetect(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Delay_Detect);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerPESQ", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerPESQ(System.Runtime.InteropServices.HandleRef Instrument_Handle, int According_To, int Measurement_Mode, string Store_WAV_To_Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPESQAccordingTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPESQAccordingTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int According_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPESQAccordingTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPESQAccordingTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int According_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPESQMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPESQMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPESQMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPESQMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPESQStoreWAVTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPESQStoreWAVTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Store_WAV_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPESQFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPESQFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPESQReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPESQReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Reference_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPESQDegLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPESQDegLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deg_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPESQAvgDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPESQAvgDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Avg_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPOLQABand", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPOLQABand(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Band);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQABand", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQABand(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Band);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPOLQAMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPOLQAMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPOLQAGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPOLQAGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQADegLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQADegLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deg_Level);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAAttenuation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAAttenuation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQASNRRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQASNRRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double SNR_Ref);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQASNRDegraded", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQASNRDegraded(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double SNR_Degraded);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQARefSpRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQARefSpRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Sp__Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQADegSpRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQADegSpRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deg_Sp__Ratio);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAMinDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAMinDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Min_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPOLQAMaxDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPOLQAMaxDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Max_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Waveform_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Waveform_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorCompressionFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorCompressionFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Compression_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorCompressionFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorCompressionFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Compression_Factor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorTraceLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorTraceLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trace_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorTraceLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorTraceLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trace_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Level, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Level, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorPretrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorPretrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pretrigger);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorPretrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorPretrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pretrigger);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerWaveformMonitorAutotrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerWaveformMonitorAutotrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Autotrigger);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerWaveformMonitorAutotrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerWaveformMonitorAutotrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Autotrigger);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerCombinedMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerCombinedMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Combined_Measurement);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerCombinedMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerCombinedMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Combined_Measurement);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerMeasurementTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerMeasurementTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerMeasurementTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerMeasurementTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFormatPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFormatPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format_Phase);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFormatPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFormatPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Format_Phase);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerInputMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerInputMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerInputMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerInputMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Input_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerLevelMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerLevelMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Level_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerLevelMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerLevelMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Level_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPrefilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPrefilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Pre_nFilter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPrefilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPrefilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Pre_nFilter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out int Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAnalyzerNotchFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAnalyzerNotchFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Notch_Gain, int Notch_Frequency, double Notch_Center_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerNotchGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerNotchGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Notch_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerNotchGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerNotchGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Notch_Gain);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerNotchFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerNotchFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Notch_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerNotchFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerNotchFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Notch_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerNotchCenterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerNotchCenterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Notch_Center_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerNotchCenterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerNotchCenterFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Notch_Center_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerDCSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerDCSuppression(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort DC_Suppression);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerDCSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerDCSuppression(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort DC_Suppression);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSNMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSNMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSNMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSNMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerSNMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerSNMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerSNMeasTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerSNMeasTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerNOCTMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerNOCTMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerNOCTMeasMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerNOCTMeasMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Meas_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Record_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Record_Length, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Record_Length, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordFileLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordFileLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int File_Length);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Level, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Level, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Slope);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerRecordPretrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerRecordPretrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Record_Pretrigger, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerRecordPretrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerRecordPretrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Record_Pretrigger, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Protocol_Analysis_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Protocol_Analysis_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisDisplayState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Protocol_Analysis_DisplayState);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisDisplayState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Protocol_Analysis_DisplayState);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisDisplayMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisDisplayMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Display_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisDisplayMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisDisplayMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Display_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisHighlight", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisHighlight(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Highlight);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisHighlight", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisHighlight(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Highlight);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisPersistence", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisPersistence(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Persistence);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisPersistence", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisPersistence(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Persistence);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolAnalysisViewMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolAnalysisViewMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int View_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisViewMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisViewMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int View_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisChannelByte", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisChannelByte(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Byte_Value, out int Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolAnalysisError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolAnalysisError(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, int Array_Size, System.Text.StringBuilder Error_Message);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetLipSyncAnalysisActiveColorHigh", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLipSyncAnalysisActiveColorHigh(System.Runtime.InteropServices.HandleRef Instrument_Handle, string RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetLipSyncAnalysisActiveColorHigh", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLipSyncAnalysisActiveColorHigh(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetLipSyncAnalysisActiveColorLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLipSyncAnalysisActiveColorLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, string RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetLipSyncAnalysisActiveColorLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLipSyncAnalysisActiveColorLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetLipSyncAnalysisActivePatternColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLipSyncAnalysisActivePatternColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, string RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetLipSyncAnalysisActivePatternColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLipSyncAnalysisActivePatternColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetLipSyncAnalysisMutePatternColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLipSyncAnalysisMutePatternColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, string RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetLipSyncAnalysisMutePatternColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLipSyncAnalysisMutePatternColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder RGB_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetLipSyncAnalysisAudioTriggerThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLipSyncAnalysisAudioTriggerThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Low, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetLipSyncAnalysisAudioTriggerThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLipSyncAnalysisAudioTriggerThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Low, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureLPorHPFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLPorHPFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, int Filter_Order, double Passband, double Filter_Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureBPorBSFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureBPorBSFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Passb_Low, double Passb_Upp, double Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureNotchFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureNotchFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Center_Freq, double Filter_Width, double Filter_Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureOctaveFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOctaveFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Center_Freq, double Filter_Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureFileDefinedFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFileDefinedFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, string File_Defined_Filter, double Filter_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, int Filter_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out int Filter_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterAttenuation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterAttenuation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Filter_Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterAttenuation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterAttenuation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Filter_Attenuation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterOrder(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, int Filter_Order);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterOrder(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out int Filter_Order);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterPassband", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterPassband(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Passband);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterPassband", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterPassband(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Passband);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterStopband", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterStopband(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Stopband);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterPassbandLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterPassbandLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Passband_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterPassbandLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterPassbandLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Passband_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterPassbandUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterPassbandUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Passband_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterPassbandUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterPassbandUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Passband_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterStopbandLow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterStopbandLow(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Stopband_Low);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterStopbandUpp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterStopbandUpp(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Stopband_Upp);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterCenterFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterCenterFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Center_Freq);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterCenterFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterCenterFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Center_Freq);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Filter_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Filter_Width);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, double Filter_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetFilterDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFilterDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, out double Filter_Delay);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetFilterFileDefined", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFilterFileDefined(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Filter_Number, string File_Def_Filter);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ConfigureAudioMonitoring", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAudioMonitoring(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Source, short Monitoring_Channel, ushort Speaker, int Phone_Output__reserved_, double Volume);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxAudioMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxAudioMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Audio_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxAudioMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxAudioMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Audio_Monitor);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxSpeaker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxSpeaker(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Speaker);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxSpeaker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxSpeaker(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Speaker);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxSpeakerMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxSpeakerMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Monitor_Number, int Monitored_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxSpeakerMonitor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxSpeakerMonitor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Monitor_Number, out int Monitored_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxPhoneState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxPhoneState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Phone_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxPhoneState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxPhoneState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Phone_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxPhonePermanentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxPhonePermanentState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Aux_Phone_Permanent_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxPhonePermanentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxPhonePermanentState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Aux_Phone_Permanent_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxPhoneOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxPhoneOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Phone_Out);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxPhoneOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxPhoneOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Phone_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxSignalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxSignalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Signal_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxMonitoringChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxMonitoringChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Monitoring_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxMonitoringChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxMonitoringChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Monitoring_Channel);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxVolume", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxVolume(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Volume);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxVolume", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxVolume(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Volume);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxAnalogOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxAnalogOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Analog_Aux_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxAnalogOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxAnalogOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Analog_Aux_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxDCVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxDCVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DC_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxDCVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxDCVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DC_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerInputEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerInputEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Trigger_Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerInputEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerInputEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Trigger_Input);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerInputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerInputMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Input_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerInputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerInputMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Input_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerInputEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerInputEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Input_Edge);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerInputEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerInputEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Input_Edge);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerOutputEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerOutputEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Trigger_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerOutputEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerOutputEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Trigger_Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerOutputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerOutputMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Output_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerOutputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerOutputMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Output_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerOutputFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerOutputFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Output_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerOutputFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerOutputFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Output_Frequency);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAuxTriggerOutputEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAuxTriggerOutputEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Output_Edge);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAuxTriggerOutputEdge", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAuxTriggerOutputEdge(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Output_Edge);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Switcher_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Switcher_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherTracking", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherTracking(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Tracking);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherTracking", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherTracking(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Switcher_Tracking);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Offset, int Offset_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Offset, out int Offset_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Input, int Input_Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherInput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Input, out int Input_Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Output, int Output_Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Output, out int Output_Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherConnection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherConnection(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Switcher_Connection);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherConnection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherConnection(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Switcher_Connection);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetSwitcherPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSwitcherPort(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Com_Port);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetSwitcherPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSwitcherPort(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Com_Port);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorCodingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorCodingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Coding_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolGeneratorCodingMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolGeneratorCodingMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Coding_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorCodingFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorCodingFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Protocol_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorCRC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorCRC(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort CRC);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolGeneratorCRC", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolGeneratorCRC(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort CRC);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Validity);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolGeneratorValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolGeneratorValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Validity);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorAllBitsToZero", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorAllBitsToZero(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorChannelByte", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorChannelByte(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Byte_Value, int Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolGeneratorChannelByte", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolGeneratorChannelByte(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Byte_Value, out int Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetProtocolGeneratorChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetProtocolGeneratorChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetProtocolGeneratorChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetProtocolGeneratorChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channels);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayScreen", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayScreen(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Screen_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayScreen", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayScreen(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Screen_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Subsystem, int Trace, int Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Subsystem, int Trace, out int Channel_Number);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayShowMinMax", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayShowMinMax(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Show_Min_Max);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayShowMinMax", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayShowMinMax(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Show_Min_Max);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayDataListFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayDataListFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_List_Filter_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayDataListFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayDataListFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Data_List_Filter_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayScanOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayScanOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Scan_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayScanOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayScanOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Scan_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayMaxChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayMaxChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Channels_Display);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayMaxChannels", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayMaxChannels(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Max_Channels_Display);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplaySweepYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplaySweepYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplaySweepYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplaySweepYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplaySweepMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplaySweepMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplaySweepMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplaySweepMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayFFTGraphYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayFFTGraphYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayFFTGraphYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayFFTGraphYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayFFTGraphMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayFFTGraphMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayFFTGraphMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayFFTGraphMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayWaveformYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayWaveformYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayWaveformYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayWaveformYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayWaveformMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayWaveformMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayWaveformMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayWaveformMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayBargraphYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayBargraphYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayBargraphYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayBargraphYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayBargraphMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayBargraphMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayBargraphMultichannelYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayBargraphMultichannelYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayPESQYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayPESQYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayPESQYSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayPESQYSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem_Number, int Trace, out int Y_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayYSourceFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayYSourceFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, string Y_Source_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayTraceUpdate", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayTraceUpdate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Trace_Update_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayTraceUpdate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayTraceUpdate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Trace_Update_Type);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Reference);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Reference);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Reference_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Reference_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayReferenceFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayReferenceFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, string Reference_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayNormalization", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayNormalization(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Normalization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayNormalization", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayNormalization(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Normalization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayNormalizeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayNormalizeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Normalize_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayNormalizeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayNormalizeValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Normalize_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCopyReferenceSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCopyReferenceSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Copy_Reference_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCopyReferenceSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCopyReferenceSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Copy_Reference_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCopyScalingSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCopyScalingSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Copy_Scaling_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCopyScalingSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCopyScalingSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Copy_Scaling_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayUnitFunctionTrack", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUnitFunctionTrack(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Unit_Function_Track);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayUnitFunctionTrack", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUnitFunctionTrack(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Unit_Function_Track);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayYAxisSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayYAxisSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayYAxisSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayYAxisSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayYAxisTop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayYAxisTop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Top, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayYAxisTop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayYAxisTop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Top, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayYAxisBottom", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayYAxisBottom(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Bottom, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayYAxisBottom", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayYAxisBottom(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Bottom, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayUnitUserString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUnitUserString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, string Unit_User_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayUnitUserString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUnitUserString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Unit_User_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayAxisLabelAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayAxisLabelAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Axis_Label_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayAxisLabelAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayAxisLabelAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Axis_Label_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayAxisLabelUserString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayAxisLabelUserString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, string Axis_Label_User_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayAxisLabelUserString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayAxisLabelUserString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Axis_Label_User_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLegendState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLegendState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Legend);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLegendState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLegendState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Legend);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLegend", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLegend(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, string Legend_String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLegend", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLegend(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Buffer_Size, System.Text.StringBuilder Legend);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCopyLimitSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCopyLimitSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Copy_Limit_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCopyLimitSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCopyLimitSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Copy_Limit_Settings);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, ushort Limit_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out ushort Limit_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, int Limit_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out int Limit_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitSourceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitSourceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, double Limit_Source_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitSourceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitSourceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, out double Limit_Source_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitSourceFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitSourceFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, string Limit_Source_Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitSourceFilename", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitSourceFilename(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Limit_Type, int Buffer_Size, System.Text.StringBuilder Limit_Source_Filename);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitShift", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitShift(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Limit_Shift);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitShift", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitShift(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Limit_Shift);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitShiftParallel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitShiftParallel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Limit_Shift_Parallel, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitShiftParallel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitShiftParallel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Limit_Shift_Parallel, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitShiftSymmetrical", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitShiftSymmetrical(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Limit_Shift_Symmetrical, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitShiftSymmetrical", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitShiftSymmetrical(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Limit_Shift_Symmetrical, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplaySweepGraphXSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplaySweepGraphXSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Graph_Number, int X_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplaySweepGraphXSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplaySweepGraphXSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Graph_Number, out int X_Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplaySweepGraphXAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplaySweepGraphXAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Graph_Number, int X_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplaySweepGraphXAxis", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplaySweepGraphXAxis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_Graph_Number, out int X_Axis);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayXAxisReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayXAxisReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, double Reference_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayXAxisReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayXAxisReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out double Reference_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayXAxisScaling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayXAxisScaling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Scaling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayXAxisScaling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayXAxisScaling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Scaling);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayXAxisSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayXAxisSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayXAxisSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayXAxisSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Spacing);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayXAxisLeft", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayXAxisLeft(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, double Left, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayXAxisLeft", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayXAxisLeft(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out double Left, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayXAxisRight", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayXAxisRight(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, double Right, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayXAxisRight", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayXAxisRight(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out double Right, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_State);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_Amplitude);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorMoveTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorMoveTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, int Set_Cursor_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorXPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorXPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, double Cursor_X_Position, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorXPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorXPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_X_Position, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorYPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorYPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, double Cursor_Y_Position, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorYPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorYPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out double Cursor_Y_Position, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayCursorMovement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayCursorMovement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, int Cursor_Position_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayCursorMovement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayCursorMovement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Cursor_Type, out int Cursor_Position_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayMarkerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayMarkerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Marker_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayMarkerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayMarkerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out int Marker_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayMarkerHarmonics", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayMarkerHarmonics(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, ushort Harmonics);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayMarkerHarmonics", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayMarkerHarmonics(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out ushort Harmonics);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayMarkerMoveTo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayMarkerMoveTo(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, int Move_To);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayMarkerXPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayMarkerXPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, double Marker_X_Position, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayMarkerXPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayMarkerXPosition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace, out double Marker_X_Position, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayStoreTraceAs", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayStoreTraceAs(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Store_Trace_As);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayStoreTraceAs", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayStoreTraceAs(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Store_Trace_As);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayTraceSelect", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayTraceSelect(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Trace);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayTraceSelect", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayTraceSelect(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out int Trace);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayNormalizationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayNormalizationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, double Normalization_Frequency, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayNormalizationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayNormalizationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out double Normalization_Frequency, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayModifyEqu", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayModifyEqu(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Modify_Equlization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayModifyEqu", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayModifyEqu(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Modify_Equlization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayInvertEqu", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayInvertEqu(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Invert_Equalization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayInvertEqu", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayInvertEqu(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Invert_Equalization);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, ushort Limit_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out ushort Limit_Offset);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayLimitOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLimitOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, double Limit_Offset_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayLimitOffsetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLimitOffsetValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, out double Limit_Offset_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetDisplayStoreTraceToFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayStoreTraceToFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, string Store_Trace_To_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetDisplayStoreTraceToFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayStoreTraceToFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Buffer_Size, System.Text.StringBuilder Store_Trace_To_File);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMeasurementTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasurementTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Measurement_Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMeasurementTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasurementTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Measurement_Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_StartMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_StartMeasurementWaitOPC", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartMeasurementWaitOPC(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_MeasurementControl", CallingConvention = CallingConvention.StdCall)]
            public static extern int MeasurementControl(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, ushort Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, out ushort Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerUserUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerUserUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, string User_Unit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerUserUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerUserUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, System.Text.StringBuilder User_Unit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, int Reference);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, out int Reference);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, double Reference_Value, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, out double Reference_Value, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFrequencyUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFrequencyUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFrequencyUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFrequencyUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerPhaseUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerPhaseUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerPhaseUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerPhaseUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFrequencyPhaseUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFrequencyPhaseUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, ushort Frequency_Unit_Auto, ushort Phase_Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFrequencyPhaseUnitAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFrequencyPhaseUnitAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out ushort Frequency_Unit_Auto, out ushort Phase_Unit_Auto);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFrequencyPhaseUserUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFrequencyPhaseUserUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, string Frequency_User_Unit, string Phase_User_Unit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFrequencyPhaseUserUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFrequencyPhaseUserUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, System.Text.StringBuilder Frequency_User_Unit, System.Text.StringBuilder Phase_User_Unit);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFrequencyPhaseReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFrequencyPhaseReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ref_Frequency, int Ref_Phase);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFrequencyPhaseReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFrequencyPhaseReference(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ref_Frequency, out int Ref_Phase);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetAnalyzerFrequencyPhaseReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAnalyzerFrequencyPhaseReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ref_Frequency_Value, int Frequency_Units, double Ref_Phase_Value, int Phase_Units, double Group_Delay_Ref_Value, int Group_Delay_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetAnalyzerFrequencyPhaseReferenceValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAnalyzerFrequencyPhaseReferenceValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Ref_Frequency_Value, out int Frequency_Units, out double Ref_Phase_Value, out int Phase_Units, out double Group_Delay_Ref_Value, out int Group_Delay_Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadMeasurementResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementResult(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, out double Measurement_Result, System.Text.StringBuilder Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadMeasurementResultMinMax", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementResultMinMax(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, int Measurement, int Modifier, out double Measurement_Result, System.Text.StringBuilder Units);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadTraceDataSets", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadTraceDataSets(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_Set, int Number_Of_Results, [In, Out] double[] Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_WriteTraceDataSets", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteTraceDataSets(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_Set, int Number_Of_Data_Sets, double[] Data_Sets);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadTraceDataSetCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadTraceDataSetCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_Set, out int Output_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadTraceDataList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadTraceDataList(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_List, int Number_Of_Results, [In, Out] double[] Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadTraceDataListCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadTraceDataListCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Data_List, out int Output_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadAxisData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadAxisData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Axis, int Channel, int Number_Of_Results, [In, Out] double[] Output);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ReadAxisDataCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadAxisDataCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Subsystem, int Subsystem_Number, int Axis, int Channel, out int Output_Count);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_setTimeOut", CallingConvention = CallingConvention.StdCall)]
            public static extern int setTimeOut(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_getTimeOut", CallingConvention = CallingConvention.StdCall)]
            public static extern int getTimeOut(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Timeout);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopySource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopySource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopySource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopySource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyDestination", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyDestination(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Destination);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyDestination", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyDestination(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Destination);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyOrientation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyOrientation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Orientation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyOrientation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyOrientation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Orientation);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyStoreMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyStoreMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Store_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyStoreMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyStoreMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Store_Mode);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder File_Name);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyHeaderFooterState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyHeaderFooterState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Header_Footer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyHeaderFooterState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyHeaderFooterState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Header_Footer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyDefineHeader", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyDefineHeader(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Define_Header);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyDefineHeader", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyDefineHeader(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Define_Header);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopyDefineFooter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopyDefineFooter(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Define_Footer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopyDefineFooter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopyDefineFooter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Define_Footer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetHardcopySize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHardcopySize(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetHardcopySize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHardcopySize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Size);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_HardcopyImmediate", CallingConvention = CallingConvention.StdCall)]
            public static extern int HardcopyImmediate(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetWindowStyle", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetWindowStyle(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Selector_Window_Style);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetWindowStyle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetWindowStyle(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int File_Selector_Window_Style);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetMemoryString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMemoryString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int String_Number, string String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_GetMemoryString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMemoryString(System.Runtime.InteropServices.HandleRef Instrument_Handle, int String_Number, int Buffer_Size, System.Text.StringBuilder String);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_StoreMemoryDataNumeric", CallingConvention = CallingConvention.StdCall)]
            public static extern int StoreMemoryDataNumeric(System.Runtime.InteropServices.HandleRef Instrument_Handle, int String_Number, int Number_Of_Data, double[] Data);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_StoreMemoryDataBinary", CallingConvention = CallingConvention.StdCall)]
            public static extern int StoreMemoryDataBinary(System.Runtime.InteropServices.HandleRef Instrument_Handle, int String_Number, int Binary_Length, string Binary_Block_Data);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_ResetMemoryBuffers", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetMemoryBuffers(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Free_Buffers);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SystemShutdown", CallingConvention = CallingConvention.StdCall)]
            public static extern int SystemShutdown(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Time);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_LoadSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadSetup(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Setup);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SaveSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveSetup(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Setup);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_SetGPIBAddress", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGPIBAddress(System.Runtime.InteropServices.HandleRef Instrument_Handle, int GPIB_Address);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_errorCheckState", CallingConvention = CallingConvention.StdCall)]
            public static extern int errorCheckState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State_Checking);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_readToFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int readToFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_writeFromFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeFromFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_writeHugeFileStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeHugeFileStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination, out int File_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_contHugeFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int contHugeFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Handle, uint Offset, uint Block_Length, out ushort EOF);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_writeInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Write_Buffer);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_readInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int readInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_setStatusRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int setStatusRegister(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Operation, int Questionable_Register, int Enable, int PTransition, int NTransition);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_getStatusRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int getStatusRegister(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Status_Registers_Query, out int Register_Value);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rsupv_64.dll", EntryPoint = "rsupv_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Status_Code, System.Text.StringBuilder Message);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                System.Text.StringBuilder msg = new System.Text.StringBuilder(256);
                PInvoke.error_message(handle, code, msg);
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class rsupvConstants
    {

        public const int GenAnalog = 0;

        public const int GenDigitalAudio = 1;

        public const int GenI2s = 2;

        public const int GenImpairment = 3;

        public const int GenU2c = 4;

        public const int GenHdmi = 5;

        public const int GenChOff = 0;

        public const int GenCh1 = 1;

        public const int GenCh2 = 2;

        public const int GenCh21 = 3;

        public const int GenCh2180 = 4;

        public const int GenOutputUnbal = 0;

        public const int GenOutputBal = 1;

        public const int GenOutputCtest = 2;

        public const int GenImpedance10 = 0;

        public const int GenImpedance200 = 1;

        public const int GenImpedance600 = 2;

        public const int GenImpedance25 = 3;

        public const int GenOutputCommFloat = 0;

        public const int GenOutputCommGnd = 1;

        public const int GenBwidth22 = 0;

        public const int GenBwidth40 = 1;

        public const int GenBwidth80 = 2;

        public const int GenBwidthAuto = 3;

        public const int GenVoltRangAuto = 0;

        public const int GenVoltRangFix = 1;

        public const int UnitPct = 0;

        public const int UnitPctfrm = 1;

        public const int UnitPctfs = 2;

        public const int UnitPcton = 3;

        public const int UnitPctppr = 4;

        public const int UnitPctui = 5;

        public const int UnitPctvvr = 6;

        public const int UnitBits = 7;

        public const int UnitCyc = 8;

        public const int UnitDpct = 9;

        public const int UnitDpcthz = 10;

        public const int UnitDpctv = 11;

        public const int UnitDpctw = 12;

        public const int UnitDb = 13;

        public const int UnitDbfs = 14;

        public const int UnitDbm = 15;

        public const int UnitDbon = 16;

        public const int UnitDbr = 17;

        public const int UnitDbu = 18;

        public const int UnitDbui = 19;

        public const int UnitDbv = 20;

        public const int UnitDdeg = 21;

        public const int UnitDec = 22;

        public const int UnitDeg = 23;

        public const int UnitDegfrm = 24;

        public const int UnitDhz = 25;

        public const int UnitDrad = 26;

        public const int UnitDs = 27;

        public const int UnitDv = 28;

        public const int UnitDw = 29;

        public const int UnitFfr = 30;

        public const int UnitFs = 31;

        public const int UnitHex = 32;

        public const int UnitHz = 33;

        public const int UnitLsbs = 34;

        public const int UnitMlt = 35;

        public const int UnitNs = 36;

        public const int UnitOct = 37;

        public const int UnitOhm = 38;

        public const int UnitPpr = 39;

        public const int UnitPpmui = 40;

        public const int UnitRad = 41;

        public const int UnitS = 42;

        public const int UnitToct = 43;

        public const int UnitUi = 44;

        public const int UnitUir = 45;

        public const int UnitUis = 46;

        public const int UnitV = 47;

        public const int UnitVvon = 48;

        public const int UnitVvr = 49;

        public const int UnitVpp = 50;

        public const int UnitW = 51;

        public const int GenSyncIntClk = 0;

        public const int GenSyncAudioIn = 1;

        public const int GenSyncAuxIn = 2;

        public const int GenSyncIn = 3;

        public const int GenSyncInInv = 4;

        public const int GenSyncInEdar = 5;

        public const int GenSyncInEclk = 6;

        public const int GenSyncInEicl = 7;

        public const int GenSyncInHint = 8;

        public const int GenSyncInHaux = 9;

        public const int GenSampleFreq32 = 0;

        public const int GenSampleFreq44 = 1;

        public const int GenSampleFreq48 = 2;

        public const int GenSampleFreq88 = 3;

        public const int GenSampleFreq96 = 4;

        public const int GenSampleFreq176 = 5;

        public const int GenSampleFreq192 = 6;

        public const int GenSampleFreqVal = 7;

        public const int GenSampleFreqSync = 8;

        public const int GenSyncOutpAudioOut = 0;

        public const int GenSyncOutpAudioIn = 1;

        public const int GenSyncOutpAuxIn = 2;

        public const int GenSyncOutpGenPll = 3;

        public const int GenSyncOutpJittPll = 4;

        public const int GenSyncOutpAux = 5;

        public const int GenSyncOutpSyncIn = 6;

        public const int GenSyncOutpIntClk = 7;

        public const int GenOutpTypeWord = 0;

        public const int GenOutpTypeBiphase = 1;

        public const int GenAuxOutpAudioOut = 0;

        public const int GenAuxOutpAudioIn = 1;

        public const int GenAuxOutpAudioReclock = 2;

        public const int GenAuxOutpAudioRefGen = 3;

        public const int GenAuxOutpInput = 4;

        public const int GenRefDataZero = 0;

        public const int GenRefDataOne = 1;

        public const int GenPhaseRefOff = 0;

        public const int GenPhaseRefVal = 1;

        public const int GenDigJitter = 1;

        public const int GenDigCommon = 2;

        public const int GenChMulti = 5;

        public const int GenOutpBalImpR5 = 0;

        public const int GenOutpBalImpR15 = 1;

        public const int GenOutpBalImpR10 = 2;

        public const int GenOutpBalImpR30 = 3;

        public const int GenOutpBalImpR200 = 4;

        public const int GenOutpBalImpR150 = 5;

        public const int GenOutpBalImpR600 = 6;

        public const int GenOutpBalImpR25 = 7;

        public const int GenOutpBalImpR50 = 8;

        public const int GenOutpBalImpUser = 9;

        public const int GenUnbalOutpAudioOut = 0;

        public const int GenUnbalOutpAudioIn = 1;

        public const int GenCableSimOff = 0;

        public const int GenCableSimLong = 1;

        public const int GenI2sSyncIntClk = 0;

        public const int GenI2sSyncExtMclk = 1;

        public const int GenI2sSyncExtWclk = 2;

        public const int GenI2sWlength16 = 0;

        public const int GenI2sWlength24 = 1;

        public const int GenI2sWlength32 = 2;

        public const int GenI2sSampleFreq08 = 0;

        public const int GenI2sSampleFreq11 = 1;

        public const int GenI2sSampleFreq16 = 2;

        public const int GenI2sSampleFreq22 = 3;

        public const int GenI2sSampleFreq32 = 4;

        public const int GenI2sSampleFreq44 = 5;

        public const int GenI2sSampleFreq48 = 6;

        public const int GenI2sSampleFreq88 = 7;

        public const int GenI2sSampleFreq96 = 8;

        public const int GenI2sSampleFreq176 = 9;

        public const int GenI2sSampleFreq192 = 10;

        public const int GenI2sSampleFreq384 = 11;

        public const int GenI2sSampleFreqVal = 12;

        public const int GenI2sMclkRatio64 = 0;

        public const int GenI2sMclkRatio96 = 1;

        public const int GenI2sMclkRatio128 = 2;

        public const int GenI2sMclkRatio192 = 3;

        public const int GenI2sMclkRatio256 = 4;

        public const int GenI2sMclkRatio384 = 5;

        public const int GenI2sMclkRatio512 = 6;

        public const int GenI2sFormatSi2s = 0;

        public const int GenI2sFormatUser = 1;

        public const int GenI2sFsyncShapeSquare = 0;

        public const int GenI2sFsyncShapeBit = 1;

        public const int GenI2sFsyncPolarityLftl = 0;

        public const int GenI2sFsyncPolarityLfth = 1;

        public const int GenI2sFsyncPolarityPos = 2;

        public const int GenI2sFsyncPolarityNeg = 3;

        public const int ClockContinuous = 0;

        public const int ClockGated = 1;

        public const int DualSyncIntClk = 0;

        public const int DualSyncExtMclk = 1;

        public const int DualSyncExtFsyn = 2;

        public const int DualSyncExtFam = 3;

        public const int DualSyncExtFbcl = 4;

        public const int DualBitMsb = 0;

        public const int DualBitLsb = 1;

        public const int SampleFreq08 = 0;

        public const int SampleFreq11 = 1;

        public const int SampleFreq16 = 2;

        public const int SampleFreq22 = 3;

        public const int SampleFreq32 = 4;

        public const int SampleFreq44 = 5;

        public const int SampleFreq48 = 6;

        public const int SampleFreq88 = 7;

        public const int SampleFreq96 = 8;

        public const int SampleFreq176 = 9;

        public const int SampleFreq192 = 10;

        public const int SampleFreq384 = 11;

        public const int SampleFreqVal = 12;

        public const int DualFwidthBit = 0;

        public const int DualFwidthSlot = 1;

        public const int DualFwidthSquare = 2;

        public const int DualFwidthValue = 3;

        public const int SlopeRising = 0;

        public const int SlopeFalling = 1;

        public const int Voltage0v9 = 0;

        public const int Voltage1v2 = 1;

        public const int Voltage1v8 = 2;

        public const int Voltage2v5 = 3;

        public const int Voltage3v3 = 4;

        public const int CodingNone = 0;

        public const int CodingAlaw = 1;

        public const int CodingUlaw = 2;

        public const int HdmiAudioFormatPcmL0 = 0;

        public const int HdmiAudioFormatPcmL1 = 1;

        public const int HdmiAudioFormatDd = 2;

        public const int HdmiAudioFormatDdp = 3;

        public const int HdmiAudioFormatDts = 4;

        public const int HdmiAudioFormatDthd = 5;

        public const int HdmiAudioFormatDtshd = 6;

        public const int HdmiAudioFormatDhdm = 7;

        public const int GenHdmiVideoSourceIntern = 0;

        public const int GenHdmiVideoSourceAuxIn = 1;

        public const int GenHdmiFormatResolP640x4804x3 = 0;

        public const int GenHdmiFormatResolP720x5764x3 = 1;

        public const int GenHdmiFormatResolP720x57616x9 = 2;

        public const int GenHdmiFormatResolI720x5764x3 = 3;

        public const int GenHdmiFormatResolI720x57616x9 = 4;

        public const int GenHdmiFormatResolP720x4804x3 = 5;

        public const int GenHdmiFormatResolP720x48016x9 = 6;

        public const int GenHdmiFormatResolI720x4804x3 = 7;

        public const int GenHdmiFormatResolI720x48016x9 = 8;

        public const int GenHdmiFormatResolP1280x72016x9 = 9;

        public const int GenHdmiFormatResolP1920x108016x9 = 10;

        public const int GenHdmiFormatResolI1920x108016x9 = 11;

        public const int GenHdmiFormatFreq23 = 0;

        public const int GenHdmiFormatFreq24 = 1;

        public const int GenHdmiFormatFreq25 = 2;

        public const int GenHdmiFormatFreq29 = 3;

        public const int GenHdmiFormatFreq30 = 4;

        public const int GenHdmiFormatFreq50 = 5;

        public const int GenHdmiFormatFreq59 = 6;

        public const int GenHdmiFormatFreq60 = 7;

        public const int GenHdmiFormatFreq100 = 8;

        public const int GenHdmiFormatFreq119 = 9;

        public const int GenHdmiFormatFreq120 = 10;

        public const int GenHdmiColorDepth08 = 0;

        public const int GenHdmiColorDepth10 = 1;

        public const int GenHdmiColorDepth12 = 2;

        public const int GenHdmiVideoContentMonochrome = 0;

        public const int GenHdmiVideoContentLipsync = 1;

        public const int GenHdmiVideoContentBert = 2;

        public const int GenHdmiVideoContentPattern = 3;

        public const int GenHdmiAudioSinkArcLoopback = 0;

        public const int GenHdmiAudioSinkArcDagen = 1;

        public const int GenCrFactorOpt = 0;

        public const int GenCrFactorVal = 1;

        public const int GenCrFactorDefPhase = 2;

        public const int GenStereoFilterTrack = 0;

        public const int GenStereoFilterSplit = 1;

        public const int GenSweepOff = 0;

        public const int GenSweepAutoSweep = 1;

        public const int GenSweepAutoList = 2;

        public const int GenSweepManSweep = 3;

        public const int GenSweepManList = 4;

        public const int GenSweepNstepAnlrSync = 0;

        public const int GenSweepNstepDwellVal = 1;

        public const int GenSweepNstepDwellFile = 2;

        public const int GenSweepAxisVolt = 1;

        public const int GenSweepAxisFreq = 2;

        public const int GenSweepAxisOnTime = 3;

        public const int GenSweepAxisInterval = 4;

        public const int GenSweepAxisPhase = 5;

        public const int GenSweepAxisOff = 0;

        public const int GenSweepStart = 0;

        public const int GenSweepValue = 1;

        public const int GenSweepMute = 2;

        public const int GenSweepSpacLinPoint = 0;

        public const int GenSweepSpacLinStep = 1;

        public const int GenSweepSpacLogPoint = 2;

        public const int GenSweepSpacLogStep = 3;

        public const int GenFilterOff = 0;

        public const int GenFilterUfil1 = 1;

        public const int GenFilterUfil2 = 2;

        public const int GenFilterUfil3 = 3;

        public const int GenFilterUfil4 = 4;

        public const int GenFilterUfil5 = 5;

        public const int GenFilterUfil6 = 6;

        public const int GenFilterUfil7 = 7;

        public const int GenFilterUfil8 = 8;

        public const int GenFilterUfil9 = 9;

        public const int GenFilterAwe = 10;

        public const int GenFilterCcir = 11;

        public const int GenFilterCcia = 12;

        public const int GenFilterCciu = 13;

        public const int GenFilterCcit = 14;

        public const int GenFilterCmes = 15;

        public const int GenFilterDcn = 16;

        public const int GenFilterDemp17 = 17;

        public const int GenFilterDemp5015 = 18;

        public const int GenFilterDemp50 = 19;

        public const int GenFilterDemp75 = 20;

        public const int GenFilterIect = 21;

        public const int GenFilterJitt = 22;

        public const int GenFilterUrum = 23;

        public const int GenFilterWrum = 24;

        public const int GenFilterPemp17 = 25;

        public const int GenFilterPemp5015 = 26;

        public const int GenFilterPemp50 = 27;

        public const int GenFilterPemp75 = 28;

        public const int GenFilterHp22 = 29;

        public const int GenFilterHp400 = 30;

        public const int GenFilterLp22 = 31;

        public const int GenFilterLp30 = 32;

        public const int GenFilterLp80 = 33;

        public const int GenFilterAes17 = 34;

        public const int GenFilterCwe = 35;

        public const int GenFuncSine = 0;

        public const int GenFuncStereoSine = 1;

        public const int GenFuncMultisine = 2;

        public const int GenFuncSineBurst = 3;

        public const int GenFuncSine2Burst = 4;

        public const int GenFuncModDist = 5;

        public const int GenFuncDfd = 6;

        public const int GenFuncDim = 7;

        public const int GenFuncRandom = 8;

        public const int GenFuncArb = 9;

        public const int GenFuncPolarity = 10;

        public const int GenFuncModulation = 11;

        public const int GenFuncDc = 12;

        public const int GenFuncPlay = 13;

        public const int GenFuncPlya = 14;

        public const int GenFuncSquare = 16;

        public const int GenFuncChirp = 15;

        public const int GenFuncUniversal = 17;

        public const int GenFuncLipsync = 18;

        public const int GenStereoFreqFqph = 0;

        public const int GenStereoFreqFqfq = 1;

        public const int GenStereoVoltVlrt = 0;

        public const int GenStereoVoltVlvl = 1;

        public const int GenModeIec268 = 2;

        public const int GenModeIec118 = 3;

        public const int GenDimDima = 0;

        public const int GenDimDimb = 1;

        public const int GenDimBwidthF30 = 0;

        public const int GenDimBwidthF100 = 1;

        public const int GenDimDims = 2;

        public const int GenRandomDomainFreq = 0;

        public const int GenRandomDomainTime = 1;

        public const int GenRandomShapeWhite = 0;

        public const int GenRandomShapePink = 1;

        public const int GenRandomShapeOctave = 2;

        public const int GenRandomShapeFile = 3;

        public const int GenPlayChanMleft = 0;

        public const int GenPlayChanMright = 1;

        public const int GenPlayChanStereo = 2;

        public const int GenPlayModeTocont = 0;

        public const int GenPlayModeTosing = 1;

        public const int GenPlayModeTicont = 2;

        public const int GenPlayModeTising = 3;

        public const int GenPlayRestOff = 0;

        public const int GenPlayRestAuto = 1;

        public const int GenPlayRestOnce = 2;

        public const int GenPlayAnlrLoopChOff = 0;

        public const int GenPlayAnlrLoopCh1 = 1;

        public const int GenPlayAnlrLoopCh2 = 2;

        public const int GenPlayAnlrLoopChStereo = 3;

        public const int GenPlayAnlrLoopChCrossed = 4;

        public const int GenPdfGauss = 0;

        public const int GenPdfTriangle = 1;

        public const int GenPdfRectangle = 2;

        public const int GenSpacingAnlrTr = 0;

        public const int GenSpacingDef = 1;

        public const int GenModeEqual = 0;

        public const int GenModeDef = 1;

        public const int GenModeFm = 4;

        public const int GenModeAm = 5;

        public const int GenAmVariationOff = 0;

        public const int GenAmVariationSine = 1;

        public const int GenAmVariationBurst = 2;

        public const int AnalyzerAnalog = 0;

        public const int AnalyzerDigital = 1;

        public const int AnalyzerI2s = 2;

        public const int AnalyzerA8c = 3;

        public const int AnalyzerA16c = 4;

        public const int AnalyzerU2c = 5;

        public const int AnalyzerU8c = 6;

        public const int AnalyzerDigbits = 7;

        public const int AnalyzerHdmi = 8;

        public const int AnalyzerCouplingAc = 0;

        public const int AnalyzerCouplingDc = 1;

        public const int AnalyzerChInputBal = 0;

        public const int AnalyzerChInputGen1 = 1;

        public const int AnalyzerChInputGen2 = 2;

        public const int AnalyzerChInputImpedanceR300 = 0;

        public const int AnalyzerChInputImpedanceR600 = 1;

        public const int AnalyzerChInputImpedanceR200k = 2;

        public const int AnalyzerChInputImpedanceR110 = 3;

        public const int AnalyzerChInputImpedanceR10k = 4;

        public const int AnalyzerChInputImpedanceR20k = 5;

        public const int AnalyzerChInputImpedanceUser = 6;

        public const int AnalyzerChInputCommonFloat = 0;

        public const int AnalyzerChInputCommonGround = 1;

        public const int AnalyzerChInputRangeAuto = 0;

        public const int AnalyzerChInputRangeFix = 1;

        public const int AnalyzerChInputRangeLower = 2;

        public const int MultichannelAnalyzerCouplingTrack = 0;

        public const int MultichannelAnalyzerCouplingSplit = 1;

        public const int AnalyzerMeasModeAdata = 0;

        public const int AnalyzerMeasModeJphase = 1;

        public const int AnalyzerMeasModeCinput = 2;

        public const int AnalyzerJitterIntc = 0;

        public const int AnalyzerJitterRefp = 1;

        public const int AnalyzerDigAudInBal = 0;

        public const int AnalyzerDigAudInUnb = 1;

        public const int AnalyzerDigAudInOpt = 2;

        public const int AnalyzerDigAudInInt = 3;

        public const int AnalyzerI2sW16 = 0;

        public const int AnalyzerI2sW24 = 1;

        public const int AnalyzerI2sW32 = 2;

        public const int AnalyzerI2sFormI2s = 0;

        public const int AnalyzerI2sFormUser = 1;

        public const int AnalyzerI2sFslopeFall = 0;

        public const int AnalyzerI2sFslopeRais = 1;

        public const int AnalyzerI2sInputDsub = 0;

        public const int AnalyzerI2sInputInt = 1;

        public const int SampleFreqAuto = 13;

        public const int AnalyzerHdmiInputSink = 0;

        public const int AnalyzerHdmiInputSarc = 1;

        public const int AnalyzerHdmiInputDiunbal = 2;

        public const int AnalyzerHdmiInputDioptical = 3;

        public const int AnalyzerHdmiAudioCodingPcm = 0;

        public const int AnalyzerHdmiAudioCodingAutoDetect = 1;

        public const int AnalyzerCh1 = 0;

        public const int AnalyzerCh2 = 1;

        public const int AnalyzerChBoth = 5;

        public const int AnalyzerChMulti = 6;

        public const int AnalyzerCh1and2 = 2;

        public const int AnalyzerCh21 = 3;

        public const int AnalyzerCh12 = 4;

        public const int AnalyzerDigAudChClkSourceIntern = 0;

        public const int AnalyzerDigAudChClkSourceExtern = 1;

        public const int AnalyzerDigAudChModeMono = 0;

        public const int AnalyzerDigAudChModeStereo = 1;

        public const int AnalyzerDigAudAligmentRising = 0;

        public const int AnalyzerDigAudAligmentFalling = 1;

        public const int AnalyzerDigAudAligmentCh1hCh2l = 2;

        public const int AnalyzerDigAudAligmentCh1lCh2h = 3;

        public const int AnalyzerDigAudAligmentCh1rCh2f = 4;

        public const int AnalyzerDigAudAligmentCh1fCh2r = 5;

        public const int AnalyzerDigAudDwnsmplFactorM16 = 0;

        public const int AnalyzerDigAudDwnsmplFactorM32 = 1;

        public const int AnalyzerDigAudDwnsmplFactorM64 = 2;

        public const int AnalyzerDigAudDwnsmplFactorM128 = 3;

        public const int AnalyzerDigAudDwnsmplFactorM256 = 4;

        public const int AnalyzerBwidth22 = 0;

        public const int AnalyzerBwidth40 = 1;

        public const int AnalyzerBwidth80 = 2;

        public const int AnalyzerBwidth250 = 3;

        public const int AnalyzerSampleFreqF32 = 0;

        public const int AnalyzerSampleFreqF44 = 1;

        public const int AnalyzerSampleFreqF48 = 2;

        public const int AnalyzerSampleFreqF88 = 3;

        public const int AnalyzerSampleFreqF96 = 4;

        public const int AnalyzerSampleFreqF176 = 5;

        public const int AnalyzerSampleFreqF192 = 6;

        public const int AnalyzerSampleFreqValue = 7;

        public const int AnalyzerSampleFreqAuto = 8;

        public const int AnalyzerSampleFreqChstat = 9;

        public const int AnalyzerI2sSampleFreqF08 = 0;

        public const int AnalyzerI2sSampleFreqF11 = 1;

        public const int AnalyzerI2sSampleFreqF16 = 2;

        public const int AnalyzerI2sSampleFreqF22 = 3;

        public const int AnalyzerI2sSampleFreqF32 = 4;

        public const int AnalyzerI2sSampleFreqF44 = 5;

        public const int AnalyzerI2sSampleFreqF48 = 6;

        public const int AnalyzerI2sSampleFreqF88 = 7;

        public const int AnalyzerI2sSampleFreqF96 = 8;

        public const int AnalyzerI2sSampleFreqF176 = 9;

        public const int AnalyzerI2sSampleFreqF192 = 10;

        public const int AnalyzerI2sSampleFreqF384 = 11;

        public const int AnalyzerI2sSampleFreqValue = 12;

        public const int AnalyzerI2sSampleFreqAuto = 13;

        public const int AnalyzerStartConditionAuto = 0;

        public const int AnalyzerStartConditionTim = 1;

        public const int AnalyzerStartConditionTch = 2;

        public const int AnalyzerStartConditionCh1f = 3;

        public const int AnalyzerStartConditionCh2f = 4;

        public const int AnalyzerStartConditionCh1r = 5;

        public const int AnalyzerStartConditionCh2r = 6;

        public const int AnalyzerStartConditionCh1l = 7;

        public const int AnalyzerStartConditionCh2l = 8;

        public const int AnalyzerStartConditionCh1t = 9;

        public const int AnalyzerStartConditionCh2t = 10;

        public const int AnalyzerStartConditionCh1e = 11;

        public const int AnalyzerStartConditionCh2e = 12;

        public const int AnalyzerStartConditionFreq = 13;

        public const int AnalyzerStartConditionRap = 14;

        public const int AnalyzerStartConditionLev = 15;

        public const int AnalyzerStartConditionTrig = 16;

        public const int AnalyzerStartConditionEdg = 17;

        public const int AnalyzerTrigSettlingOff = 0;

        public const int AnalyzerTrigSettlingExp = 1;

        public const int AnalyzerTrigSettlingFlat = 2;

        public const int AnalyzerTrigSettlingAver = 3;

        public const int AnalyzerFreq = 0;

        public const int AnalyzerVolt = 1;

        public const int UnitMv = 52;

        public const int UnitUv = 53;

        public const int UnitMw = 54;

        public const int UnitUw = 55;

        public const int UnitMvpp = 56;

        public const int UnitUvpp = 57;

        public const int UnitDmv = 58;

        public const int UnitDuv = 59;

        public const int UnitFsbit = 60;

        public const int UnitKhz = 61;

        public const int UnitDkhz = 62;

        public const int UnitMs = 63;

        public const int UnitUs = 64;

        public const int UnitKcyc = 65;

        public const int UnitMcyc = 66;

        public const int UnitDms = 67;

        public const int UnitDus = 68;

        public const int UnitMin = 69;

        public const int UnitKohm = 70;

        public const int UnitDbmg = 71;

        public const int UnitCorr = 72;

        public const int UnitPol = 73;

        public const int AnalyzerFuncOff = 0;

        public const int AnalyzerFuncRms = 1;

        public const int AnalyzerFuncRmss = 2;

        public const int AnalyzerFuncPeak = 3;

        public const int AnalyzerFuncQpe = 4;

        public const int AnalyzerFuncDc = 5;

        public const int AnalyzerFuncThd = 6;

        public const int AnalyzerFuncThdn = 7;

        public const int AnalyzerFuncMdis = 8;

        public const int AnalyzerFuncDfd = 9;

        public const int AnalyzerFuncWaf = 10;

        public const int AnalyzerFuncPol = 11;

        public const int AnalyzerFuncFft = 12;

        public const int AnalyzerFuncFilt = 13;

        public const int AnalyzerFuncWav = 14;

        public const int AnalyzerFuncCoh = 15;

        public const int AnalyzerFuncRubb = 16;

        public const int AnalyzerFuncProt = 17;

        public const int AnalyzerFuncThir = 18;

        public const int AnalyzerFuncSn = 19;

        public const int AnalyzerFuncNoct = 20;

        public const int AnalyzerFuncRec = 21;

        public const int AnalyzerFuncDim = 22;

        public const int AnalyzerFuncPesq = 23;

        public const int AnalyzerFuncPeaq = 24;

        public const int AnalyzerFuncPolqa = 25;

        public const int AnalyzerFuncLipsync = 26;

        public const int AnalyzerFuncPlugin = 27;

        public const int MeasFuncSettlingOff = 0;

        public const int MeasFuncSettlingExp = 1;

        public const int MeasFuncSettlingFlat = 2;

        public const int MeasFuncSettlingAver = 3;

        public const int AnalyzerSweepCtrlOff = 0;

        public const int AnalyzerSweepCtrlAsw = 1;

        public const int AnalyzerSweepCtrlAlis = 2;

        public const int AnalyzerSweepCtrlMsw = 3;

        public const int AnalyzerSweepCtrlMlis = 4;

        public const int AnalyzerSweepSpacLinp = 0;

        public const int AnalyzerSweepSpacLins = 1;

        public const int AnalyzerSweepSpacLogp = 2;

        public const int AnalyzerSweepSpacLogs = 3;

        public const int AnalyzerMeasTimeAfas = 0;

        public const int AnalyzerMeasTimeAuto = 1;

        public const int AnalyzerMeasTimeVal = 2;

        public const int AnalyzerMeasTimeGent = 3;

        public const int AnalyzerMeasTimeSfas = 4;

        public const int AnalyzerMeasTimeFas = 5;

        public const int AnalyzerMeasTimeSlow = 6;

        public const int AnalyzerPeakMeasModePpe = 0;

        public const int AnalyzerPeakMeasModeNpe = 1;

        public const int AnalyzerPeakMeasModePtop = 2;

        public const int AnalyzerPeakMeasModePabs = 3;

        public const int AnalyzerPeakMeasIntvTimeSfas = 0;

        public const int AnalyzerPeakMeasIntvTimeFast = 1;

        public const int AnalyzerPeakMeasIntvTimeSlow = 2;

        public const int AnalyzerPeakMeasIntvTimeVal = 3;

        public const int AnalyzerPeakMeasIntvTimeFix = 4;

        public const int AnalyzerMeasBandPpct1 = 0;

        public const int AnalyzerMeasBandPpct3 = 1;

        public const int AnalyzerMeasBandPoct12 = 2;

        public const int AnalyzerMeasBandPtoc = 3;

        public const int AnalyzerMeasBandPfas = 4;

        public const int AnalyzerMeasBandPfix = 5;

        public const int AnalyzerMeasBandSpct1 = 6;

        public const int AnalyzerMeasBandSpct3 = 7;

        public const int AnalyzerMeasBandSoct12 = 8;

        public const int AnalyzerMeasBandStoc = 9;

        public const int AnalyzerMeasBandSfas = 10;

        public const int AnalyzerMeasBandSfix = 11;

        public const int AnalyzerMeasFmodeFix = 0;

        public const int AnalyzerMeasFmodeGent = 1;

        public const int AnalyzerMeasFmodeCh1f = 2;

        public const int AnalyzerMeasFmodeCh2f = 3;

        public const int AnalyzerMeasFmodeAuto = 4;

        public const int AnalyzerMeasFmodeReff = 5;

        public const int AnalyzerDmodeFast = 0;

        public const int AnalyzerDmodePrec = 1;

        public const int AnalyzerRefinementN1 = 0;

        public const int AnalyzerRefinementN2 = 1;

        public const int AnalyzerRefinementN4 = 2;

        public const int AnalyzerRefinementN8 = 3;

        public const int AnalyzerThdFundAuto = 0;

        public const int AnalyzerThdFundVal = 1;

        public const int AnalyzerThdFundGent = 2;

        public const int AnalyzerThdMmodeSel = 0;

        public const int AnalyzerThdMmodeDev = 1;

        public const int AnalyzerThdMmodeDodd = 2;

        public const int AnalyzerThdMmodeDall = 3;

        public const int AnalyzerThdMmodeLsel = 4;

        public const int AnalyzerThdMmodeLdev = 5;

        public const int AnalyzerThdMmodeLdod = 6;

        public const int AnalyzerThdMmodeLdal = 7;

        public const int AnalyzerThdnMmodeThdn = 0;

        public const int AnalyzerThdnMmodeSndr = 1;

        public const int AnalyzerThdnMmodeNois = 2;

        public const int AnalyzerThdnMmodeLthd = 3;

        public const int AnalyzerThdnMmodeLno = 4;

        public const int AnalyzerThdnRejNarr = 0;

        public const int AnalyzerThdnRejWide = 1;

        public const int AnalyzerThdnRejectbwWide = 0;

        public const int AnalyzerThdnRejectbwMed = 1;

        public const int AnalyzerThdnRejectbwNarr = 2;

        public const int AnalyzerDfdMmodeD2268 = 0;

        public const int AnalyzerDfdMmodeD3268 = 1;

        public const int AnalyzerDfdMmodeD2118 = 2;

        public const int AnalyzerDfdMmodeD3118 = 3;

        public const int AnalyzerFftSizeS512 = 0;

        public const int AnalyzerFftSizeS1k = 1;

        public const int AnalyzerFftSizeS2k = 2;

        public const int AnalyzerFftSizeS4k = 3;

        public const int AnalyzerFftSizeS8k = 4;

        public const int AnalyzerFftSizeS16k = 5;

        public const int AnalyzerFftSizeS32k = 6;

        public const int AnalyzerFftSizeS64k = 7;

        public const int AnalyzerFftSizeS128k = 8;

        public const int AnalyzerFftSizeS256k = 9;

        public const int AnalyzerFftWindHann = 0;

        public const int AnalyzerFftWindRect = 1;

        public const int AnalyzerFftWindBlac = 2;

        public const int AnalyzerFftWindRif1 = 3;

        public const int AnalyzerFftWindRif2 = 4;

        public const int AnalyzerFftWindRif3 = 5;

        public const int AnalyzerFftWindHamm = 6;

        public const int AnalyzerFftWindFlat = 7;

        public const int AnalyzerFftAverModeOff = 0;

        public const int AnalyzerFftAverModeExp = 1;

        public const int AnalyzerFftAverModeNorm = 2;

        public const int AnalyzerPeaqModelBas = 0;

        public const int AnalyzerPeaqModelAdv = 1;

        public const int AnalyzerPeaqMmodeDut = 0;

        public const int AnalyzerPeaqMmodeOffline = 1;

        public const int AnalyzerPesqMmodeDut = 0;

        public const int AnalyzerPesqMmodeOffline = 1;

        public const int AnalyzerPesqDmodePp862 = 0;

        public const int AnalyzerPesqDmodePpsi862 = 1;

        public const int AnalyzerPesqDmodePpsp862 = 2;

        public const int AnalyzerPesqDmodeMp8621 = 3;

        public const int AnalyzerPesqDmodeMpsi8621 = 4;

        public const int AnalyzerPesqDmodeMpsp8621 = 5;

        public const int AnalyzerPesqDmodeMp8622 = 6;

        public const int AnalyzerPesqDmodeMpsi8622 = 7;

        public const int AnalyzerPesqDmodeMpsp8622 = 8;

        public const int AnalyzerPolqaBandNarrow = 0;

        public const int AnalyzerPolqaBandWide = 1;

        public const int AnalyzerPolqaMmodeDut = 0;

        public const int AnalyzerPolqaMmodeOffline = 1;

        public const int AnalyzerWavMmodeStan = 0;

        public const int AnalyzerWavMmodeComp = 1;

        public const int AnalyzerWavMmodeUsam = 2;

        public const int AnalyzerWavTrgSrcCh1 = 0;

        public const int AnalyzerWavTrgSrcCh2 = 1;

        public const int AnalyzerWavTrgSrcMan = 2;

        public const int AnalyzerWavTrgSrcGenb = 3;

        public const int AnalyzerWavTrgSrcTrgc = 4;

        public const int AnalyzerWavTrgSlopeRis = 0;

        public const int AnalyzerWavTrgSlopeFall = 1;

        public const int AnalyzerFreqPhaseOff = 0;

        public const int AnalyzerFreqPhaseFreq = 1;

        public const int AnalyzerFreqPhaseFqph = 2;

        public const int AnalyzerFreqPhaseFqgr = 3;

        public const int AnalyzerFreqPhaseSfr = 4;

        public const int AnalyzerFreqPhaseFqs = 5;

        public const int AnalyzerMeasTimeFast = 0;

        public const int AnalyzerMeasTimePrec = 1;

        public const int AnalyzerPhaseFormatPos = 0;

        public const int AnalyzerPhaseFormatPosn = 1;

        public const int AnalyzerPhaseFormatNeg = 2;

        public const int AnalyzerPhaseFormatRad = 3;

        public const int AnalyzerPhaseFormatRadb = 4;

        public const int AnalyzerPhaseFormatRadn = 5;

        public const int AnalyzerPhaseFormatInf = 6;

        public const int AnalyzerInputMonOff = 0;

        public const int AnalyzerInputMonIpea = 1;

        public const int AnalyzerInputMonPhas = 2;

        public const int AnalyzerInputMonDig = 3;

        public const int AnalyzerLevMonOff = 0;

        public const int AnalyzerLevMonRms = 1;

        public const int AnalyzerLevMonDc = 2;

        public const int AnalyzerLevMonImax = 3;

        public const int AnalyzerPrefilterOff = 0;

        public const int AnalyzerPrefilterUfil1 = 1;

        public const int AnalyzerPrefilterUfil2 = 2;

        public const int AnalyzerPrefilterUfil3 = 3;

        public const int AnalyzerPrefilterUfil4 = 4;

        public const int AnalyzerPrefilterUfil5 = 5;

        public const int AnalyzerPrefilterUfil6 = 6;

        public const int AnalyzerPrefilterUfil7 = 7;

        public const int AnalyzerPrefilterUfil8 = 8;

        public const int AnalyzerPrefilterUfil9 = 9;

        public const int AnalyzerPrefilterAwe = 10;

        public const int AnalyzerPrefilterCcir = 13;

        public const int AnalyzerPrefilterCarm = 11;

        public const int AnalyzerPrefilterCciu = 12;

        public const int AnalyzerPrefilterCcit = 14;

        public const int AnalyzerPrefilterCmes = 15;

        public const int AnalyzerPrefilterDcn = 16;

        public const int AnalyzerPrefilterDemp17 = 17;

        public const int AnalyzerPrefilterDemp5015 = 18;

        public const int AnalyzerPrefilterDemp50 = 19;

        public const int AnalyzerPrefilterDemp75 = 20;

        public const int AnalyzerPrefilterIect = 21;

        public const int AnalyzerPrefilterJitt = 22;

        public const int AnalyzerPrefilterUrum = 23;

        public const int AnalyzerPrefilterWrum = 24;

        public const int AnalyzerPrefilterPemp17 = 25;

        public const int AnalyzerPrefilterPemp5015 = 26;

        public const int AnalyzerPrefilterPemp50 = 27;

        public const int AnalyzerPrefilterPemp75 = 28;

        public const int AnalyzerPrefilterHp22 = 29;

        public const int AnalyzerPrefilterHp400 = 30;

        public const int AnalyzerPrefilterLp22 = 31;

        public const int AnalyzerPrefilterLp30 = 32;

        public const int AnalyzerPrefilterLp80 = 33;

        public const int AnalyzerPrefilterAes17 = 34;

        public const int AnalyzerPrefilterCwe = 35;

        public const int AnalyzerFilterOff = 0;

        public const int AnalyzerFilterUfil1 = 1;

        public const int AnalyzerFilterUfil2 = 2;

        public const int AnalyzerFilterUfil3 = 3;

        public const int AnalyzerFilterUfil4 = 4;

        public const int AnalyzerFilterUfil5 = 5;

        public const int AnalyzerFilterUfil6 = 6;

        public const int AnalyzerFilterUfil7 = 7;

        public const int AnalyzerFilterUfil8 = 8;

        public const int AnalyzerFilterUfil9 = 9;

        public const int AnalyzerFilterAwe = 10;

        public const int AnalyzerFilterCcir = 11;

        public const int AnalyzerFilterCarm = 12;

        public const int AnalyzerFilterCciu = 13;

        public const int AnalyzerFilterCcit = 14;

        public const int AnalyzerFilterCmes = 15;

        public const int AnalyzerFilterDcn = 16;

        public const int AnalyzerFilterDemp17 = 17;

        public const int AnalyzerFilterDemp5015 = 18;

        public const int AnalyzerFilterDemp50 = 19;

        public const int AnalyzerFilterDemp75 = 20;

        public const int AnalyzerFilterIect = 21;

        public const int AnalyzerFilterJitt = 22;

        public const int AnalyzerFilterUrum = 23;

        public const int AnalyzerFilterWrum = 24;

        public const int AnalyzerFilterPemp17 = 25;

        public const int AnalyzerFilterPemp5015 = 26;

        public const int AnalyzerFilterPemp50 = 27;

        public const int AnalyzerFilterPemp75 = 28;

        public const int AnalyzerFilterHp22 = 29;

        public const int AnalyzerFilterHp400 = 30;

        public const int AnalyzerFilterLp22 = 31;

        public const int AnalyzerFilterLp30 = 32;

        public const int AnalyzerFilterLp80 = 33;

        public const int AnalyzerFilterAes17 = 34;

        public const int AnalyzerFilterCwe = 35;

        public const int AnalyzerNotchGainOff = 0;

        public const int AnalyzerNotchGainDb0 = 1;

        public const int AnalyzerNotchGainDb12 = 2;

        public const int AnalyzerNotchGainDb30 = 3;

        public const int AnalyzerNotchFreqFix = 0;

        public const int AnalyzerNotchFreqGent = 1;

        public const int AnalyzerSnMeasModeRms = 0;

        public const int AnalyzerSnMeasModeQpe = 1;

        public const int AnalyzerSnMeasModePpe = 2;

        public const int AnalyzerSnMeasModeNpe = 3;

        public const int AnalyzerSnMeasModePtop = 4;

        public const int AnalyzerSnMeasModePabs = 5;

        public const int AnalyzerMeasTimeFix = 7;

        public const int AnalyzerNoctMeasModeOct1 = 0;

        public const int AnalyzerNoctMeasModeOct3 = 1;

        public const int AnalyzerNoctMeasModeOct6 = 2;

        public const int AnalyzerNoctMeasModeOct12 = 3;

        public const int AnalyzerNoctMeasModeOct24 = 4;

        public const int AnalyzerRecTrgSrcCh1 = 0;

        public const int AnalyzerRecTrgSrcCh2 = 1;

        public const int AnalyzerRecTrgSrcMan = 2;

        public const int AnalyzerRecTrgSrcGenb = 3;

        public const int AnalyzerRecTrgSlopeRis = 0;

        public const int AnalyzerRecTrgSlopeFal = 1;

        public const int ProtocolCodingModeAuto = 0;

        public const int ProtocolCodingModePro = 1;

        public const int ProtocolCodingModeCons = 2;

        public const int ProtocolHighlightNothing = 0;

        public const int ProtocolHighlightOutput = 1;

        public const int ProtocolHighlightChannels = 2;

        public const int ProtocolHighlightChanges = 3;

        public const int ProtocolPersistenceShort = 0;

        public const int ProtocolPersistenceLong = 1;

        public const int ProtocolPersistenceForever = 2;

        public const int AnalyzerProtViewBint = 0;

        public const int AnalyzerProtViewBin = 1;

        public const int UserDefFilterOrderN4 = 0;

        public const int UserDefFilterOrderN8 = 1;

        public const int UserDefFilterLpas = 0;

        public const int UserDefFilterHpas = 1;

        public const int UserDefFilterBpas = 2;

        public const int UserDefFilterBsto = 3;

        public const int UserDefFilterNotc = 4;

        public const int UserDefFilterToct = 5;

        public const int UserDefFilterOct = 6;

        public const int UserDefFilterFile = 7;

        public const int AuxSignalSourceInp = 0;

        public const int AuxSignalSourceMon = 1;

        public const int AuxSignalSourceFunc = 2;

        public const int AuxSignalSourceGen = 3;

        public const int AuxSignalSourceDc = 4;

        public const int AuxChannelSter = 0;

        public const int AuxChannelCh1 = 1;

        public const int AuxChannelCh2 = 2;

        public const int AuxPhoneOutSpkc = 0;

        public const int AuxPhoneOutPerm = 1;

        public const int AuxAnlgOutDc = 0;

        public const int AuxAnlgOutAudm1 = 1;

        public const int AuxTrgInputModeMsin = 0;

        public const int AuxTrgInputModeMcon = 1;

        public const int AuxTrgInputModeTrig = 2;

        public const int AuxTrgInputEdgeRis = 0;

        public const int AuxTrgInputEdgeFall = 1;

        public const int AuxTrgOutputModeMeas = 0;

        public const int AuxTrgOutputModeAuxc = 1;

        public const int SwitcherTrackingOff = 0;

        public const int SwitcherTrackingBvsa = 1;

        public const int SwitcherTrackingOvsi = 2;

        public const int SwitcherTrackingAll = 3;

        public const int SwitcherOffsetBvsa = 0;

        public const int SwitcherOffsetOvsi = 1;

        public const int SwitcherA = 0;

        public const int SwitcherB = 1;

        public const int SwitcherConnectionCom = 0;

        public const int SwitcherConnectionUsb = 1;

        public const int AudioSwitCom1 = 0;

        public const int AudioSwitCom2 = 1;

        public const int AudioSwitCom3 = 2;

        public const int AudioSwitCom4 = 3;

        public const int AudioSwitAuto = 4;

        public const int ProtocolCodingModeFile = 3;

        public const int ProtocolValidity12 = 0;

        public const int ProtocolValidityNone = 1;

        public const int ProtocolChannels2Is1 = 0;

        public const int ProtocolChannelsSplit = 1;

        public const int DispSubsysSwe = 0;

        public const int DispSubsysFft = 1;

        public const int DispSubsysWav = 2;

        public const int DispSubsysBar = 3;

        public const int DispSubsysPesq = 5;

        public const int TraceA = 0;

        public const int TraceB = 1;

        public const int DispDlistFilterAll = 0;

        public const int DispDlistFilterLimu = 1;

        public const int DispDlistFilterLiml = 2;

        public const int DispDlistFilterLimb = 3;

        public const int DispDlistFilterHarm = 4;

        public const int DispDlistFilterPeak = 5;

        public const int DispYSrcOff = 0;

        public const int DispYSrcFunc1 = 1;

        public const int DispYSrcFunc2 = 2;

        public const int DispYSrcFreq1 = 3;

        public const int DispYSrcFreq2 = 4;

        public const int DispYSrcLmrm1 = 5;

        public const int DispYSrcLmrm2 = 6;

        public const int DispYSrcLmdc1 = 7;

        public const int DispYSrcLmdc2 = 8;

        public const int DispYSrcLmpk1 = 9;

        public const int DispYSrcLmpk2 = 10;

        public const int DispYSrcInpp1 = 11;

        public const int DispYSrcInpp2 = 12;

        public const int DispYSrcPhas = 13;

        public const int DispYSrcGro = 14;

        public const int DispYSrcFilea = 15;

        public const int DispYSrcFileb = 16;

        public const int DispYSrcMultiFunc = 1;

        public const int DispYSrcMultiFreq = 2;

        public const int DispYSrcMultiLmrm = 3;

        public const int DispYSrcMultiLmdc = 4;

        public const int DispYSrcMultiLmpk = 5;

        public const int DispYSrcMultiInpp = 6;

        public const int DispYSrcMultiPhas = 7;

        public const int DispYSrcMultiGro = 8;

        public const int DispYSrcMultiFilea = 9;

        public const int DispYSrcMultiFileb = 10;

        public const int DispYSrcFftl1 = 21;

        public const int DispYSrcFftl2 = 22;

        public const int DispYSrcFftp1 = 23;

        public const int DispYSrcFftp2 = 24;

        public const int DispYSrcFftp21 = 25;

        public const int DispYSrcMultiFftl = 11;

        public const int DispYSrcMultiFftp = 12;

        public const int DispYSrcMultiFftr = 13;

        public const int DispYSrcLev1 = 17;

        public const int DispYSrcLev2 = 18;

        public const int DispYSrcMultiLev = 14;

        public const int DispYSrcPemo = 26;

        public const int DispYSrcDelay = 27;

        public const int DispYSrcRef = 28;

        public const int DispYSrcDeg = 29;

        public const int DispYSrcDrop = 30;

        public const int DispTraceUpdAliv = 0;

        public const int DispTraceUpdHold = 1;

        public const int DispRefMeas = 0;

        public const int DispRefVal = 1;

        public const int DispRefMax = 2;

        public const int DispRefXcur = 3;

        public const int DispRefOcur = 4;

        public const int DispRefRef997 = 5;

        public const int DispRefRef1000 = 6;

        public const int DispRefCh1m = 7;

        public const int DispRefCh2m = 8;

        public const int DispRefGent = 9;

        public const int DispRefFile = 10;

        public const int DispRefIfl = 11;

        public const int DispRefHold = 12;

        public const int DispRefNois = 13;

        public const int NormalizationOff = 0;

        public const int NormalizationVal = 1;

        public const int NormalizationOcur = 2;

        public const int NormalizationXcur = 3;

        public const int XAxis = 2;

        public const int DispSpacLin = 0;

        public const int DispSpacLog = 1;

        public const int DispLimUpp = 0;

        public const int DispLimLow = 1;

        public const int DispLimSrcVal = 0;

        public const int DispLimSrcFile = 1;

        public const int DispLimSrcFint = 2;

        public const int DispLimSrcHold = 3;

        public const int DispXSourceSweep = 0;

        public const int DispXSourceHold = 1;

        public const int DispXSourceMan = 2;

        public const int DispXSourceLrms = 3;

        public const int DispXSourceLdc = 4;

        public const int DispXSourceLpeak = 5;

        public const int DispXSourceFreq = 6;

        public const int DispXAxisTime = 0;

        public const int DispXAxisVolt = 1;

        public const int DispXAxisFreq = 2;

        public const int DispXAxisPhas = 3;

        public const int DispXAxisVdig = 4;

        public const int DispXAxisJpk = 5;

        public const int DispScalAuto = 0;

        public const int DispScalMan = 1;

        public const int DispSubsysMon = 4;

        public const int DispCursTypeO = 0;

        public const int DispCursTypeX = 1;

        public const int DispCurStateOff = 0;

        public const int DispCurStateAct = 1;

        public const int DispCurStateInac = 2;

        public const int DispCurModeVa = 0;

        public const int DispCurModeVb = 1;

        public const int DispCurModeVab = 2;

        public const int DispCurModeHa = 3;

        public const int DispCurModeHb = 4;

        public const int DispCursSetToMax = 0;

        public const int DispCursSetToMin = 1;

        public const int DispCursSetToMrka = 2;

        public const int DispCursSetToMrkb = 3;

        public const int DispCurPosmodePix = 0;

        public const int DispCurPosmodePoin = 1;

        public const int DispCurPosmodePeak = 2;

        public const int DispCurPosmodeHarm = 3;

        public const int DispMarkerModeOff = 0;

        public const int DispMarkerModeFix = 1;

        public const int DispMarkerModeTrkm = 2;

        public const int DispStoreTraceAsTrclist = 0;

        public const int DispStoreTraceAsEqulist = 1;

        public const int DispStoreTraceAsSwplist = 2;

        public const int DispStoreTraceAsLlist = 3;

        public const int DispStoreTraceAsDselect = 4;

        public const int ViFalse = 0;

        public const int ViTrue = 1;

        public const int MeasurementModeWait = 2;

        public const int MeasStart = 0;

        public const int MeasStop = 1;

        public const int MeasSingle = 2;

        public const int MeasCont = 3;

        public const int AnalyzerMeasurementFunc = 1;

        public const int AnalyzerMeasurementImon = 2;

        public const int AnalyzerMeasurementLmon = 6;

        public const int AnalyzerFunctionRefCh1s = 0;

        public const int AnalyzerFunctionRefCh2s = 1;

        public const int AnalyzerFunctionRefStor = 2;

        public const int AnalyzerFunctionRefCh1m = 3;

        public const int AnalyzerFunctionRefCh2m = 4;

        public const int AnalyzerFunctionRefGent = 5;

        public const int AnalyzerFunctionRefVal = 6;

        public const int AnalyzerFunctionRefDig = 7;

        public const int AnalyzerFunctionRefSour = 8;

        public const int AnalyzerFunctionRefMref = 9;

        public const int AnalyzerFunctionRefCh3s = 10;

        public const int AnalyzerFunctionRefCh4s = 11;

        public const int AnalyzerFunctionRefCh5s = 12;

        public const int AnalyzerFunctionRefCh6s = 13;

        public const int AnalyzerFunctionRefCh7s = 14;

        public const int AnalyzerFunctionRefCh8s = 15;

        public const int AnalyzerFunctionRefCh9s = 16;

        public const int AnalyzerFunctionRefCh10s = 17;

        public const int AnalyzerFunctionRefCh11s = 18;

        public const int AnalyzerFunctionRefCh12s = 19;

        public const int AnalyzerFunctionRefCh13s = 20;

        public const int AnalyzerFunctionRefCh14s = 21;

        public const int AnalyzerFunctionRefCh15s = 22;

        public const int AnalyzerFunctionRefCh16s = 23;

        public const int AnalyzerFunctionPhaseRefStor = 0;

        public const int AnalyzerFunctionPhaseRefVal = 1;

        public const int AnalyzerFunctionPhaseRefGent = 2;

        public const int MeasurementFunction = 0;

        public const int MeasurementInputMonitor = 1;

        public const int MeasurementLevelMonitor = 2;

        public const int MeasurementFrequency = 3;

        public const int MeasurementPhaseGrpDelay = 4;

        public const int Max = 0;

        public const int Min = 1;

        public const int DataSetAx = 0;

        public const int DataSetAy = 1;

        public const int DataSetBx = 2;

        public const int DataSetBy = 3;

        public const int AxisX = 0;

        public const int AxisY = 1;

        public const int HcopySourceWindow = 0;

        public const int HcopySourceGraphics = 1;

        public const int HcopyDestinPrinter = 0;

        public const int HcopyDestinFile = 1;

        public const int HcopyDestinClipbrd = 2;

        public const int HcopyOrientationPortrait = 0;

        public const int HcopyOrientationLandscape = 1;

        public const int HcopyFileModeNew = 0;

        public const int HcopyFileModeOverwrite = 1;

        public const int HcopyFileModeIncrement = 2;

        public const int WinstyleUpv = 0;

        public const int WinstyleWindows = 1;

        public const int MemFreeString = 0;

        public const int MemFreeData = 1;
    }
}
