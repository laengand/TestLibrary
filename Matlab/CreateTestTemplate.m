function CreateTestTemplate(name, deviceComm, opt)
if(strcmp(opt, 'bare') == 0 && strcmp(opt, 'full') == 0)
    error('not a valid ''opt'' parameters. Use ''full'' or ''bare'' ');
end
newline = char(10);
classContainer = '';
classContainer = sprintf('%sclassdef %s < handle\r\n', classContainer, name); % start of classDef
classContainer = sprintf('%s%s', classContainer, ...
['properties(Access = public)' newline ...
'    els;' newline ...
'    deviceComm;' newline ...
'end' newline ...
newline]);

classContainer = sprintf('%s%s',classContainer, ...
['methods(Access = public)' newline ...     % start of methods(Access = public)
'%% Constructer' newline...
'function self = ' name '(deviceComm)' newline ...
'    self.deviceComm = deviceComm;' newline]);

if(strcmp(opt, 'bare') == 0)
classContainer = sprintf('%s%s',classContainer, ...
['    self.SetupAllEventListeners;' newline ]);
end

classContainer = sprintf('%s%s',classContainer, ...
['end' newline ...
newline]);

classContainer = sprintf('%s%s',classContainer, ...
['%% Run() ' newline ...
'% Implement your test here ' newline ...
'function Run(self)' newline ...
newline]);

if(strcmp(opt, 'bare') == 0)
classContainer = sprintf('%s%s',classContainer, ...
['    deviceComm = self.deviceComm;' newline ...
'% Connect to the device' newline ...
'    if deviceComm.Connect() == 0' newline ...
'        error(''Unable to connect to device. Reset the device.'')' newline ...
'    end' newline ...
'% Perform test' newline ...
'    disp(''Test is running. Hit a key to stop'')' newline ...
'    deviceComm.C0000Ping.Send' newline ...
'    pause(''on'')' newline ...
'    pause' newline ...
'    pause(''off'')' newline ...
newline ...
'% Disconnect from the device' newline ...
'    deviceComm.Disconnect();' newline]);
end
classContainer = sprintf('%s%s',classContainer, ...
['end' newline ...
newline]);

classContainer = sprintf('%s%s',classContainer, ... % end of methods(Access = public)
['end' newline ...
newline]);

setupEventListeners = sprintf('%s\r\n', ['%% ' 'SetupAllEventListeners' newline]);
setupEventListeners = sprintf('%s%s\r\n', setupEventListeners, ...
    'function SetupAllEventListeners(self)');

commandList = deviceComm.commandList;
eventCallbacks ='';
for i=1:deviceComm.commandList.Count
    
    if commandList.Item(i-1).EventType ~= IA.Common.StandardCommunication.Tools.EventType.NotEvent 
        eventName = char(deviceComm.cmdNames(i)); % matlab indexing
        id = ['0x' dec2hex(commandList.Item(i-1).CommandId)];
        hexid = dec2hex(commandList.Item(i-1).CommandId);
        setupEventListeners = [setupEventListeners '    self.AddEventListener(self.deviceComm.E' hexid ',' '''' 'Handler''' ',@self.' eventName ');' newline];
      
        func = sprintf('%s %s %s\r\n','%%',id, eventName);
        
        paraDesc = strread(char(deviceComm.cmdDescriptions(i)), '%s', 'delimiter', sprintf('\n'));
        para = [];
        for j = 1:numel(paraDesc)
            if strcmp(char(paraDesc(j)),'Parameters') == 1 || strcmp(char(paraDesc(j)),'Reply') == 1
                para = [para sprintf('%s %s\r\n','%', char(paraDesc(j)))];
            else
                para = [para sprintf('%s   eventData.Data.%s\r\n','%', char(paraDesc(j)))];
            end
        end 
        func = sprintf('%s%s\r\n',func, ...
            [para newline ...
            'function ' eventName '( self, ~, eventData )' newline ...
            'end']);
        eventCallbacks = sprintf('%s%s',eventCallbacks, func);
    end
end

setupEventListeners = sprintf('%s%s\r\n', setupEventListeners, 'end');

classContainer = sprintf('%s%s', classContainer, ...
['methods(Access = private)' newline ... % Start of methods(Access = private)
'%% AddEventListener' newline ...
'% Add a callback upon receiving an event' newline ...
'function AddEventListener(self, eventInstance, label, callback)' newline ...
'    if(~isempty(self.els))' newline ...
'      self.els{end + 1} = event.listener(eventInstance, label, callback);' newline ...
'    else' newline ...
'      self.els{1} = event.listener(eventInstance, label, callback);' newline ...
'    end  ' newline ...
'end' newline ...
newline]);

if(strcmp(opt, 'bare') == 0)
classContainer = sprintf('%s%s\r\n',classContainer, ...
    [setupEventListeners newline]);

classContainer = sprintf('%s%s\r\n',classContainer, ...
    [eventCallbacks newline]);
end

classContainer = sprintf('%s%s\r\n',classContainer, ...
['end' newline ...          % end of methods(Access = private)
'end' newline]);            % end of classDef

filename = [name '.m'];
if exist(filename, 'file') ~= 0
    prompt = ['File ''' filename '''' ' already exists. Is it okay to overwrite? Y/N: ' ];
    x = input(prompt,'s');
    if(strcmp(lower(x),'y') == 1)
    FID = fopen(filename,'w');
    fprintf(FID, '%s', classContainer);
    fclose(FID);        
    end
end

end